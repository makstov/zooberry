structure Print =
struct

    open RabbitAst

    exception PrintException of string

    type fbind_element = {varid: varid, pat: pat, exp: exp}
    type efbind_element = {varid: varid, pat: pat, exp: exp}
    type param_element = {anaid: anaid, sigexp: sigexp}


    fun print_spaces 0 = ()
      | print_spaces n = (print_string " "; print_spaces (n - 1))


    fun print_varid n (name,_) = print_spaces n; print_string name

    fun print_ctlid n (name,_) = print_spaces n; print_string name

    val print_anaid = fn n (name,_) => print_spaces n; print_string name

    val print_conid = fn n (name,_) => print_spaces n; print_string name

    val print_cvarid = fn n (name,_) => print_spaces n; print_string name

    val print_domid = fn (name,_) => print_string name

    val print_setid = fn n (name,_) => print_spaces n; print_string name

    val print_latid = fn n (name,_) => print_spaces n; print_string name

    val print_sigid = fn n (name,_) => print_spaces n; print_string name

    val print_temid = fn (name,_) => print_string name

    val print_elmtid = fn n (name,_) => print_spaces n; print_string name


    val print_varlongid = fn
        (var_name::[],r) => print_varid 0 (var_name,r)
      | (ana_name::var_name::[],r) => print_string ana_name;
                                      print_string ".";
                                      print_varid 0 (var_name,r)
      | _ => raise PrintException "Invalid varlongid"

    val print_domlongid = fn
        (dom_name::[],r) => print_domid (dom_name,r)
      | (ana_name::dom_name::[],r) => print_string ana_name;
                                      print_string ".";
                                      print_domid (dom_name,r)
      | _ => raise PrintException "Invalid domlongid"

    val print_setlongid = fn
        (set_name::[],r) => print_setid 0 (set_name,r)
      | (ana_name::set_name::[],r) => print_string ana_name;
                                      print_string ".";
                                      print_setid 0 (set_name,r)
      | _ => raise PrintException "Invalid setlongid"

    val print_latlongid = fn
        (lat_name::[],r) => print_latid 0 (lat_name,r)
      | (ana_name::lat_name::[],r) => print_string ana_name;
                                      print_string ".";
                                      print_latid 0 (lat_name,r)
      | _ => raise PrintException "Invalid latlongid"

    fun print_conlongid n = fn
        (con_name::[],r) => print_spaces n;
                            print_conid 0 (con_name,r)
      | (ana_name::con_name::[],r) => print_spaces n;
                                      print_string ana_name;
                                      print_string ".";
                                      print_conid 0 (con_name,r)
      | _ => raise PrintException "Invalid conlongid"

    fun print_cvarlongid n = fn
        (cvar_name::[],r) => print_spaces n;
                             print_cvarid 0 (cvar_name,r)
      | (ana_name::cvar_name::[],r) => print_spaces n;
                                       print_string ana_name;
                                       print_string ".";
                                       print_cvarid 0 (cvar_name,r)
      | _ => raise PrintException "Invalid cvarlongid"

    fun print_elmtlongid n = fn
        (elmt_name::[],r) => print_spaces n;
                             print_elmtid 0 (elmt_name,r)
      | (ana_name::elmt_name::[],r) => print_spaces n;
                                       print_string ana_name;
                                       print_string ".";
                                       print_elmtid 0 (elmt_name,r)
      | _ => raise PrintException "Invalid elmtlongid"


    fun print_const n = fn
        (IntConst intnum) => print_spaces n;
                             print_string "IntConst(";
                             print_int intnum;
                             print_string ")"

      | (ElmtIdConst elmtlongid) => print_spaces n;
                                    print_string "ElmtIdConst(";
                                    print_elmtlongid 0 elmtlongid;
                                    print_string ")"

      | (TopConst) => print_spaces n;
                      print_string "TopConst"

      | (BottomConst) => print_spaces n;
                         print_string "BottomConst"

      | (TrueConst) => print_spaces n;
                       print_string "TrueConst"

      | (FalseConst) => print_spaces n;
                        print_string "FalseConst"


    fun print_rop n = fn
        (LTrop) => print_spaces n;
                   print_string "LTrop"

      | (GTrop) => print_spaces n;
                   print_string "GTrop"

      | (EQrop) => print_spaces n;
                   print_string "EQrop"

      | (LErop) => print_spaces n;
                   print_string "LErop"

      | (GErop) => print_spaces n;
                   print_string "GErop"


    fun print_bop n = fn
        (PlusOp) => print_spaces n;
                    print_string "PlusOp"

      | (MultiOp) => print_spaces n;
                     print_string "MultiOp"

      | (MinusOp) => print_spaces n;
                     print_string "MinusOp"

      | (RelOp rop) => print_spaces n;
                       print_string "RelOp(";
                       print_rop 0 rop;
                       print_string ")"


    fun print_injtag n injtag = print_spaces n;
                                print_int injtag


    fun print_projtag n = fn
        (IntProjTag intnum) => print_spaces n;
                               print_string "IntProjTag(";
                               print_int intnum;
                               print_string ")"

      | (IdProjTag domlongid) => print_spaces n;
                                 print_string "IdProjTag(";
                                 print_domlongid domlongid;
                                 print_string ")"


    fun print_kind n = fn
        (SyntreeKind) => print_spaces n;
                         print_string "SyntreeKind"

      | (IndexKind) => print_spaces n;
                       print_string "IndexKind"

      | (PowerKind) => print_spaces n;
                       print_string "PowerKind"

      | (SumKind) => print_spaces n;
                     print_string "SumKind"

      | (ProductKind) => print_spaces n;
                         print_string "ProductKind"

      | (ArrowKind) => print_spaces n;
                       print_string "ArrowKind"

      | (ConstraintKind) => print_spaces n;
                            print_string "ConstraintKind"


    fun print_ty n = fn
        (IntTy) => print_spaces n;
                   print_string "IntTy"

      | (BoolTy) => print_spaces n;
                    print_string "BoolTy"

      | (DomTy (domlongid,_)) => print_spaces n;
                                 print_string "DomTy(";
                                 print_domlongid domlongid;
                                 print_string ")"

      | (NmlTy (nml,_)) => print_spaces n;
                           print_string "NmlTy(";
                           print_string nml;
                           print_string ")"

      | (TupleTy (ty_list,_)) => print_spaces n;
                                 print_string "TupleTy(\n";
                                 print_ty_list n ty_list;
                                 print_newline ();
                                 print_spaces n;
                                 print_string ")"

      | (SumTy (ty_list,_)) => print_spaces n;
                               print_string "SumTy(\n";
                               print_ty_list n ty_list;
                               print_newline ();
                               print_spaces n;
                               print_string ")"

      | (ArrowTy (ty1,ty2,_)) => print_spaces n;
                                 print_string "ArrowTy(\n";
                                 print_ty (n+2) ty1;
                                 print_string ",\n";
                                 print_ty (n+2) ty2;
                                 print_newline ();
                                 print_spaces n;
                                 print_string ")"

      | (PowerTy (ty,_)) => print_spaces n;
                            print_string "PowerTy(\n";
                            print_ty (n+2) ty;
                            print_newline ();
                            print_spaces n;
                            print_string ")"

      | (KindTy (ty,kind,_)) => print_spaces n;
                                print_string "KindTy(\n";
                                print_ty (n+2) ty;
                                print_string ",\n";
                                print_kind (n+2) kind;
                                print_newline ();
                                print_spaces n;
                                print_string ")"


    and print_ty_list n = fn
        [] => raise PrintException "print_ty_list"

      | (ty::[]) => print_ty (n+2) ty

      | (ty::ty_list) => print_ty (n+2) ty;
                         print_string ",\n";
                         print_ty_list n ty_list



    (* topdec *)
    fun print_topdec [] = print_newline ()
      | print_topdec (dec::dec_list) = print_dec 0 dec;
                                       print_newline ();
                                       print_topdec dec_list


    and print_dec n = fn
        (ADec adec) => print_spaces n;
                       print_string "ADec(\n";
                       print_adec n adec;
                       print_newline ();
                       print_spaces n;
                       print_string ")"

      | (AnaDec anadec) => print_spaces n;
                           print_string "AnaDec(\n";
                           print_anaid (n+2) anadec.anaid;
                           print_string ",\n";
                           print_anaexp (n+2) anadec.anaexp;
                           print_newline ();
                           print_spaces n;
                           print_string ")"

      | (SigDec sigdec) => print_spaces n;
                           print_string "SigDec(\n";
                           print_sigid (n+2) sigdec.sigid;
                           print_string ",\n";
                           print_sigexp (n+2) sigdec.sigexp;
                           print_newline ();
                           print_spaces n;
                           print_string ")"

      | (TemDec temdec) => print_spaces n;
                           print_string "TemDec(\n";
                           print_spaces (n+2);
                           print_temid temdec.temid;
                           print_string ",\n";
                           print_spaces (n+2);
                           print_string "[\n";
                           print_param_list (n+2) temdec.params;
                           print_spaces (n+2);
                           print_string "],\n";
                           print_spaces (n+2);
                           print_string "[\n";
                           print_adec (n+2) temdec.body;
                           print_newline ();
                           print_spaces (n+2);
                           print_string "]\n";
                           print_spaces n;
                           print_string ")"


    and print_param n = fn
        (param:param_element) => print_spaces n;
                                 print_string "(\n";
                                 print_anaid (n+2) param.anaid;
                                 print_string ",\n";
                                 print_sigexp (n+2) param.sigexp;
                                 print_newline ();
                                 print_spaces n;
                                 print_string ")"


    and print_param_list n = fn
        [] => raise PrintException "print_param_list"

      | (param::[]) => print_param (n+2) param;
                       print_newline ()

      | (param::param_list) => print_param (n+2) param;
                               print_string ",\n";
                               print_param_list n param_list


    and print_adec n = fn
        [] => raise PrintException "Invalid adec"
      | (ade::[]) => print_ade (n+2) ade
      | (ade::rest) => print_ade (n+2) ade;
                       print_string ",\n";
                       print_adec n rest


    and print_ade n = fn
        (DomDec t) => print_spaces n;
                      print_string "DomDec(\n";
                      print_domdec (n+2) t;
                      print_newline ();
                      print_spaces n;
                      print_string ")"

      | (SemDec t) => print_spaces n;
                      print_string "SemDec(\n";
                      print_semdec (n+2) t;
                      print_newline ();
                      print_spaces n;
                      print_string ")"

      | (QueryDec t) => print_spaces n;
                        print_string "QueryDec()"


    and print_anaexp n = fn
        (AnaExpEnd adec) => print_spaces n;
                            print_string "AnaExpEnd(\n";
                            print_adec n adec;
                            print_newline ();
                            print_spaces n;
                            print_string ")"

      | (AnaExpId anaid) => print_spaces n;
                            print_string "AnaExpId(";
                            print_anaid 0 anaid;
                            print_string ")"

      | (AnaExpApp anaexpapp) => print_spaces n;
                                 print_string "AnaExpApp()"


    and print_sigexp n = fn
        (SigExp adesc) => print_spaces n;
                          print_string "SigExp(\n";
                          print_adesc (n+2) adesc;
                          print_newline ();
                          print_spaces n;
                          print_string ")"

      | (SigId sigid) => print_spaces n;
                         print_string "SigId(";
                         print_sigid 0 sigid;
                         print_string ")"


    and print_adesc n = fn
        [] => raise PrintException "print_adesc"

      | (ades::[]) => print_ades n ades

      | (ades::adesc) => print_ades n ades;
                         print_string ",\n";
                         print_adesc n adesc


    and print_ades n = fn
        (SDescId setid) => print_spaces n;
                           print_string "SDescId(";
                           print_setid 0 setid;
                           print_string ")"

      | (SDescKind (setid,kind)) => print_spaces n;
                                    print_string "SDescKind(";
                                    print_setid 0 setid;
                                    print_string ", ";
                                    print_kind 0 kind;
                                    print_string ")"

      | (SDescBind (setid,setexp)) => print_spaces n;
                                      print_string "SDescBind(\n";
                                      print_setid (n+2) setid;
                                      print_string ",\n";
                                      print_setexp (n+2) setexp;
                                      print_newline ();
                                      print_spaces n;
                                      print_string ")"

      | (LDescId latid) => print_spaces n;
                           print_string "LDescId(";
                           print_latid 0 latid;
                           print_string ")"

      | (LDescKind (latid,kind)) => print_spaces n;
                                    print_string "LDescKind(";
                                    print_latid 0 latid;
                                    print_string ", ";
                                    print_kind 0 kind;
                                    print_string ")"

      | (LDescBind (latid,latexp)) => print_spaces n;
                                      print_string "LDescBind(\n";
                                      print_latid (n+2) latid;
                                      print_string ",\n";
                                      print_latexp (n+2) latexp;
                                      print_newline ();
                                      print_spaces n;
                                      print_string ")"

      | (VarDesc (varid,ty)) => print_spaces n;
                                print_string "VarDesc(\n";
                                print_varid (n+2) varid;
                                print_string ",\n";
                                print_ty (n+2) ty;
                                print_newline ();
                                print_spaces n;
                                print_string ")"

      | (EqnDesc (varid,ty)) => print_spaces n;
                                print_string "EqnDesc(\n";
                                print_varid (n+2) varid;
                                print_string ",\n";
                                print_ty (n+2) ty;
                                print_newline ();
                                print_spaces n;
                                print_string ")"

      | (QueryDesc (ctlid,ty)) => print_spaces n;
                                  print_string "QueryDesc(\n)";
                                  print_ctlid (n+2) ctlid;
                                  print_string ",\n";
                                  print_ty (n+2) ty;
                                  print_newline ();
                                  print_spaces n;
                                  print_string ")"


    and print_domdec n = fn
        (SetDec (setid,setexp)) => print_spaces n;
                                   print_string "SetDec(\n";
                                   print_setid (n+2) setid;
                                   print_string ",\n";
                                   print_setexp (n+2) setexp;
                                   print_newline ();
                                   print_spaces n;
                                   print_string ")"

      | (LatDec (latid,latexp)) => print_spaces n;
                                   print_string "LatDec(\n";
                                   print_latid (n+2) latid;
                                   print_string ",\n";
                                   print_latexp (n+2) latexp;
                                   print_newline ();
                                   print_spaces n;
                                   print_string ")"

      | (WidenDec (latid,match)) => print_spaces n;
                                    print_string "WidenDec(\n";
                                    print_latid (n+2) latid;
                                    print_string ",\n";
                                    print_match (n+2) match;
                                    print_newline ();
                                    print_spaces n;
                                    print_string ")"


    and print_setexp n = fn
        (NmlTySet (nml,_)) => print_spaces n;
                              print_string "NmlTySet(";
                              print_string nml;
                              print_string ")"

      | (NmlStrSet (nml,_)) => print_spaces n;
                               print_string "NmlStrSet()";
                               print_string nml;
                               print_string ")"

      | (IdSet (setlongid,_)) => print_spaces n;
                                 print_string "IdSet(";
                                 print_setlongid setlongid;
                                 print_string ")"

      | (IntervalSet (exp1,exp2,_)) => print_spaces n;
                                       print_string "IntervalSet(\n";
                                       print_exp (n+2) exp1;
                                       print_string ",\n";
                                       print_exp (n+2) exp2;
                                       print_newline ();
                                       print_spaces n;
                                       print_string ")"

      | (EnumSet (elmtid_list,_)) => print_spaces n;
                                     print_string "EnumSet(";
                                     print_elmtid_list 0 elmtid_list;
                                     print_string ")"

      | (PowerSet (setexp,_)) => print_spaces n;
                                 print_string "PowerSet(\n";
                                 print_setexp (n+2) setexp;
                                 print_newline ();
                                 print_spaces n;
                                 print_string ")"

      | (ProductSet (setexp_list,r)) => print_spaces n;
                                        print_string "ProductSet(\n";
                                        print_setexp_list n setexp_list;
                                        print_newline ();
                                        print_spaces n;
                                        print_string ")"

      | (SumSet (setexp_list,r)) => print_spaces n;
                                    print_string "SumSet(\n";
                                    print_setexp_list n setexp_list;
                                    print_newline ();
                                    print_spaces n;
                                    print_string ")"

      | (FunSet (setexp1,setexp2,r)) => print_spaces n;
                                        print_string "FunSet(\n";
                                        print_setexp (n+2) setexp1;
                                        print_string ",\n";
                                        print_setexp (n+2) setexp2;
                                        print_newline ();
                                        print_spaces n;
                                        print_string ")"

      | (CnstSet (setexp,cnstdec,_)) => print_spaces n;
                                        print_string "CnstSet(\n";
                                        print_setexp (n+2) setexp;
                                        print_string ",\n";
                                        print_spaces (n+2);
                                        print_string "(\n";
                                        print_cnstdec (n+2) cnstdec;
                                        print_newline ();
                                        print_spaces (n+2);
                                        print_string ")\n";
                                        print_spaces n;
                                        print_string ")"


    and print_elmtid_list n = fn
        [] => raise PrintException "print_elmtid_list"
      | (elmtid::[]) => print_elmtid 0 elmtid
      | (elmtid::elmtid_list) => print_elmtid 0 elmtid;
                                 print_string ", ";
                                 print_elmtid_list n elmtid_list


    and print_setexp_list n = fn
        [] => raise PrintException "print_cnst_list"
      | (setexp::[]) => print_setexp (n+2) setexp
      | (setexp::setexp_list) => print_setexp (n+2) setexp;
                                 print_string ",\n";
                                 print_setexp_list n setexp_list


    and print_cnstdec n = fn
        [] => raise PrintException "print_cnst_list"
      | (cnst::[]) => print_cnst (n+2) cnst
      | (cnst::cnstdec) => print_cnst (n+2) cnst;
                           print_string ",\n";
                           print_cnstdec n cnstdec


    and print_cnst n = fn
        (cnst:cnst) => print_spaces n;
                       print_string "[";
                       print_cvarid_list 0 cnst.cvar;
                       print_string "],\n";
                       print_index n cnst.index;
                       print_newline ();
                       print_spaces n;
                       print_string "[\n";
                       print_rhs_list n cnst.rhs;
                       print_newline ();
                       print_spaces n;
                       print_string "]"


    and print_cvarid_list n = fn
        [] => raise PrintException "print_cvarid_list"
      | (cvarid::[]) => print_cvarid 0 cvarid
      | (cvarid::cvarid_list) => print_cvarid 0 cvarid;
                                 print_string ", ";
                                 print_cvarid_list n cvarid_list


    and print_index n = fn
        (None) => ()
      | (Some setexp) => print_setexp n setexp;
                         print_string ","


    and print_rhs_list n = fn
        [] => raise PrintException "print_rhs_list"
      | (rhs::[]) => print_rhs (n+2) rhs
      | (rhs::rhs_list) => print_rhs (n+2) rhs;
                           print_string ",\n";
                           print_rhs_list n rhs_list


    and print_rhs n = fn
        (RhsVar) => print_spaces n;
                    print_string "RhsVar"

      | (RhsVarr setlongid) => print_spaces n;
                               print_string "RhsVarr(";
                               print_setlongid setlongid;
                               print_string ")"

      | (RhsConid rhs) => print_spaces n;
                          print_string "RhsConid(\n";
                          print_conid (n+2) rhs.conid;
                          print_string ",\n";
                          print_carg (n+2) rhs.carg;
                          print_string ",\n";
                          print_atomicflag (n+2) rhs.flag;
                          print_newline ();
                          print_spaces n;
                          print_string ")"


    and print_carg n = fn
        (CargEmpty) => print_spaces n;
                       print_string "CargEmpty"

      | (CargVar) => print_spaces n;
                     print_string "CargVar"

      | (CargVarr setlongid) => print_spaces n;
                                print_string "CargVarr(";
                                print_setlongid setlongid;
                                print_string ")"

      | (CargSet setexp) => print_spaces n;
                            print_string "CargSet(\n";
                            print_setexp (n+2) setexp;
                            print_newline ();
                            print_spaces n;
                            print_string ")"

      | (CargTuple carg_list) => print_spaces n;
                                 print_string "CargTuple(\n";
                                 print_carg_list n carg_list;
                                 print_newline ();
                                 print_spaces n;
                                 print_string ")"


    and print_carg_list n = fn
        [] => raise PrintException "print_carg_list"
      | (carg::[]) => print_carg (n+2) carg
      | (carg::carg_list) => print_carg (n+2) carg;
                             print_string ",\n";
                             print_carg_list n carg_list
    

    and print_atomicflag n = fn
        (Atomic) => print_spaces n;
                    print_string "Atomic"

      | (NonAtomic) => print_spaces n;
                       print_string "NonAtomic"


    and print_latexp n = fn
        (NmlStrLat (nml,_)) => print_spaces n;
                               print_string "NmlStrLat(";
                               print_string nml;
                               print_string ")"

      | (IdLat (latlongid,_)) => print_spaces n;
                                 print_string "IdLat(";
                                 print_latlongid latlongid;
                                 print_string ")"

      | (FlatLat (setexp,_)) => print_spaces n;
                                print_string "FlatLat(\n";
                                print_setexp (n+2) setexp;
                                print_newline ();
                                print_spaces n;
                                print_string ")"

      | (PowerLat (setexp,_)) => print_spaces n;
                                 print_string "PowerLat(\n";
                                 print_setexp (n+2) setexp;
                                 print_newline ();
                                 print_spaces n;
                                 print_string ")"

      | (ProductLat (latexp_list,_)) => print_spaces n;
                                        print_string "ProductLat(\n";
                                        print_latexp_list n latexp_list;
                                        print_newline ();
                                        print_spaces n;
                                        print_string ")"

      | (SumLat (latexp_list,_)) => print_spaces n;
                                    print_string "SumLat(\n";
                                    print_latexp_list n latexp_list;
                                    print_newline ();
                                    print_spaces n;
                                    print_string ")"

      | (AtomicLat (latexp1,latexp2,_)) => print_spaces n;
                                           print_string "AtomicLat(\n";
                                           print_latexp (n+2) latexp1;
                                           print_string ",\n";
                                           print_latexp (n+2) latexp2;
                                           print_newline ();
                                           print_spaces n;
                                           print_string ")"

      | (DependLat (setexp,latexp,_)) => print_spaces n;
                                         print_string "DependLat(\n";
                                         print_setexp (n+2) setexp;
                                         print_string ",\n";
                                         print_latexp (n+2) latexp;
                                         print_newline ();
                                         print_spaces n;
                                         print_string ")"

      | (OrderLat (setexp,order,_)) => print_spaces n;
                                       print_string "OrderLat(\n";
                                       print_setexp (n+2) setexp;
                                       print_string ",\n";
                                       print_spaces (n+2);
                                       print_string "[\n";
                                       print_order (n+2) order;
                                       print_newline ();
                                       print_spaces (n+2);
                                       print_string "]\n";
                                       print_spaces n;
                                       print_string ")"


    and print_latexp_list n = fn
        [] => raise PrintException "print_latexp_list"
      | (latexp::[]) => print_latexp (n+2) latexp
      | (latexp::latexp_list) => print_latexp (n+2) latexp;
                                 print_string ",\n";
                                 print_latexp_list n latexp_list


    and print_order n = fn
        (order_element_list,_) => print_order_element_list n order_element_list


    and print_order_element_list n = fn
        [] => raise PrintException "print_order"
      | (order_element::[]) => print_order_element (n+2) order_element
      | (order_element::ol) => print_order_element (n+2) order_element;
                               print_string ",\n";
                               print_order_element_list n ol


    and print_order_element n = fn
        (rop,pat) => print_spaces n;
                     print_string "(\n";
                     print_rop (n+2) rop;
                     print_string ",\n";
                     print_pat (n+2) pat;
                     print_newline ();
                     print_spaces n;
                     print_string ")"


    and print_semdec n = fn
        (ValDec dec) => print_spaces n;
                        print_string "ValDec(\n";
                        print_valdec (n+2) dec;
                        print_newline ();
                        print_spaces n;
                        print_string ")"

      | (EqnDec eqndec) => print_spaces n;
                           print_string "EqnDec(\n";
                           print_eqndec (n+2) eqndec;
                           print_newline ();
                           print_spaces n;
                           print_string ")"

      | (CcrDec dec) => print_spaces n;
                        print_string "CcrDec(\n";
                        print_ccrdec (n+2) dec;
                        print_newline ();
                        print_spaces n;
                        print_string ")"

      | (CimDec cimdec) => print_spaces n;
                           print_string "CimDec(\n";
                           print_cimdec (n+2) cimdec;
                           print_newline ();
                           print_spaces n;
                           print_string ")"


    and print_valdec n = fn
        (ValBind (vbinds,_)) => print_spaces n;
                                print_string "ValBind(\n";
                                print_vbind_list n vbinds;
                                print_newline ();
                                print_spaces n;
                                print_string ")"

      | (RecValBind (vbinds,_)) => print_spaces n;
                                   print_string "RecValBind(\n";
                                   print_vbind_list n vbinds;
                                   print_newline ();
                                   print_spaces n;
                                   print_string ")"

      | (FunBind (fbinds,_)) => print_spaces n;
                                print_string "FunBind(\n";
                                print_fbind_list n fbinds;
                                print_newline ();
                                print_spaces n;
                                print_string ")"

      | (MapBind (fbinds,_)) => print_spaces n;
                                print_string "MapBind(\n";
                                print_fbind_list n fbinds;
                                print_newline ();
                                print_spaces n;
                                print_string ")"


    and print_valdec_list n = fn
        [] => raise PrintException "print_valdec_list"
      | (valdec::[]) => print_valdec (n+2) valdec
      | (valdec::valdec_list) => print_valdec (n+2) valdec;
                                 print_string ",\n";
                                 print_valdec_list n valdec_list


    and print_vbind n = fn
        (pat,exp) => print_spaces n;
                     print_string "(\n";
                     print_pat (n+2) pat;
                     print_string ",\n";
                     print_exp (n+2) exp;
                     print_newline ();
                     print_spaces n;
                     print_string ")"


    and print_vbind_list n = fn
        [] => raise PrintException "print_vbind_list"
      | (vbind::[]) => print_vbind (n+2) vbind
      | (vbind::vbind_list) => print_vbind (n+2) vbind;
                               print_string ",\n";
                               print_vbind_list n vbind_list


    and print_fbind_element n = fn
        (x:fbind_element) => print_spaces n;
                             print_string "(\n";
                             print_varid (n+2) x.varid;
                             print_string ",\n";
                             print_pat (n+2) x.pat;
                             print_string ",\n";
                             print_exp (n+2) x.exp;
                             print_newline ();
                             print_spaces n;
                             print_string ")"


    and print_fbind n = fn
        [] => raise PrintException ("print_fbind")
      | (x::[]) => print_fbind_element (n+2) x
      | (x::fbind) => print_fbind_element (n+2) x;
                      print_string ",\n";
                      print_fbind n fbind


    and print_fbind_list n = fn
        [] => raise PrintException ("print_fbind_list")
      | ((fbind,_)::[]) => print_spaces (n+2);
                           print_string "[\n";
                           print_fbind (n+2) fbind;
                           print_newline ();
                           print_spaces (n+2);
                           print_string "]"

      | ((fbind,_)::fbind_list) => print_spaces (n+2);
                                   print_string "[\n";
                                   print_fbind (n+2) fbind;
                                   print_newline ();
                                   print_spaces (n+2);
                                   print_string "],\n";
                                   print_fbind_list n fbind_list


    and print_eqndec n = fn
        (EqnBind (ebind_list,_)) => print_spaces n;
                                    print_string "EqnBind()"

      | (RecEqnBind (ebind_list,_)) => print_spaces n;
                                       print_string "RecEqnBind()"

      | (FunEqnBind (efbind_list,_)) => print_spaces n;
                                        print_string "FunEqnBind(\n";
                                        print_efbind_list (n+2) efbind_list;
                                        print_newline ();
                                        print_spaces n;
                                        print_string ")"


    and print_efbind_list n = fn
        [] => raise PrintException ("print_efbind_list")
      | ((efbind,_)::[]) => print_spaces n;
                            print_string "[\n";
                            print_efbind n efbind;
                            print_newline ();
                            print_spaces n;
                            print_string "]"

      | ((efbind,_)::efbind_list) => print_spaces n;
                                     print_string "[\n";
                                     print_efbind (n+2) efbind;
                                     print_newline ();
                                     print_spaces n;
                                     print_string "],\n";
                                     print_efbind_list n efbind_list


    and print_efbind n = fn
        [] => raise PrintException ("print_efbind")
      | (x::[]) => print_efbind_element (n+2) x
      | (x::efbind) => print_efbind_element (n+2) x;
                       print_string ",\n";
                       print_efbind n efbind


    and print_efbind_element n = fn
        (x:efbind_element) => print_spaces n;
                              print_string "(\n";
                              print_varid (n+2) x.varid;
                              print_string ",\n";
                              print_pat (n+2) x.pat;
                              print_string ",\n";
                              print_exp (n+2) x.exp;
                              print_newline ();
                              print_spaces n;
                              print_string ")"


    and print_ccrdec n = fn
        (x,_) => print_spaces n;
                 print_string "[ // premise\n";
                 print_cnstguard_list n x.premise;
                 print_newline ();
                 print_spaces n;
                 print_string "],\n";
                 print_spaces n;
                 print_string "[ // conseq\n";
                 print_constraint_list n x.conseq;
                 print_newline ();
                 print_spaces n;
                 print_string "]"


    and print_constraint n = fn
        (cvarexp,rhsexp_list) => print_spaces n;
                                 print_string "(\n";
                                 print_cvarexp (n+2) cvarexp;
                                 print_string ",\n";
                                 print_spaces (n+2);
                                 print_string "[\n";
                                 print_rhsexp_list (n+2) rhsexp_list;
                                 print_newline ();
                                 print_spaces (n+2);
                                 print_string "]\n";
                                 print_spaces n;
                                 print_string ")"


    and print_constraint_list n = fn
        [] => raise PrintException ("print_constraint_list")
      | (constraint::[]) => print_constraint (n+2) constraint
      | (constraint::constraint_list) => print_constraint (n+2) constraint;
                                         print_string ",\n";
                                         print_constraint_list n constraint_list


    and print_cnstguard n = fn
        (CcrCnst constraint) => print_spaces n;
                                print_string "CcrCnst(\n";
                                print_constraint (n+2) constraint;
                                print_newline ();
                                print_spaces n;
                                print_string ")"

      | (CcrGuard guard) => print_spaces n;
                            print_string "CcrGuard(\n";
                            print_guard (n+2) guard;
                            print_newline ();
                            print_spaces n;
                            print_string ")"


    and print_cnstguard_list n = fn
        [] => raise PrintException ("print_cnstguard_list")
      | (cnstguard::[]) => print_cnstguard (n+2) cnstguard
      | (cnstguard::cnstguard_list) => print_cnstguard (n+2) cnstguard;
                                       print_string ",\n";
                                       print_cnstguard_list n cnstguard_list

    and print_rhsexp n = fn
        (RhsexpCvar cvarexp) => print_spaces n;
                                print_string "RhsexpCvar(\n";
                                print_cvarexp (n+2) cvarexp;
                                print_newline ();
                                print_spaces n;
                                print_string ")"

      | (RhsexpConid (conlongid,cargexp)) => print_spaces n;
                                             print_string "RhsexpConid(\n";
                                             print_conlongid (n+2) conlongid;
                                             print_string ",\n";
                                             print_cargexp (n+2) cargexp;
                                             print_newline ();
                                             print_spaces n;
                                             print_string ")"

    and print_rhsexp_list n = fn
        [] => raise PrintException ("print_rhsexp_list")
      | (rhsexp::[]) => print_rhsexp (n+2) rhsexp
      | (rhsexp::rhsexp_list) => print_rhsexp (n+2) rhsexp;
                                 print_string ",\n";
                                 print_rhsexp_list n rhsexp_list

   
    and print_cargexp n = fn
        (CargexpEmpty) => print_spaces n;
                          print_string "CargexpEmpty"

      | (CargexpCvar cvarexp) => print_spaces n;
                                 print_string "CargexpCvar(\n";
                                 print_cvarexp (n+2) cvarexp;
                                 print_newline ();
                                 print_spaces n;
                                 print_string ")"

      | (CargexpPat pat) => print_spaces n;
                            print_string "CargexpPat(\n";
                            print_pat (n+2) pat;
                            print_newline ();
                            print_spaces n;
                            print_string ")"

      | (CargexpTuple cargexp_list) => print_spaces n;
                                       print_string "CargexpTuple(\n";
                                       print_cargexp_list n cargexp_list;
                                       print_newline ();
                                       print_spaces n;
                                       print_string ")"

    
    and print_cargexp_list n = fn
        [] => raise PrintException ("print_cargexp_list")
      | (cargexp::[]) => print_cargexp (n+2) cargexp
      | (cargexp::cargexp_list) => print_cargexp (n+2) cargexp;
                                   print_string ",\n";
                                   print_cargexp_list n cargexp_list


    and print_cvarexp n = fn
        (x:cvarexp) => print_cvarlongid n x.cvarid;
                       case x.index of (None) => ()
                                     | (Some pat) => print_string ",\n";
                                                     print_pat n pat


    and print_cimdec n = fn
        (conlongid,None,exp,_) => print_conlongid n conlongid;
                                  print_string ",\n";
                                  print_exp n exp

      | (conlongid,Some pat,exp,_) => print_conlongid n conlongid;
                                      print_string ",\n";
                                      print_pat n pat;
                                      print_string ",\n";
                                      print_exp n exp


    and print_exp n = fn
        (NmlExp (nml,_)) => print_spaces n;
                            print_string "NmlExp(";
                            print_string nml;
                            print_string ")"

      | (SetIdExp (setlongid,_)) => print_spaces n;
                                    print_string "SetIdExp(";
                                    print_setlongid setlongid;
                                    print_string ")"

      | (CnstExp (cnst,_)) => print_spaces n;
                              print_string "CnstExp(\n";
                              print_constraint (n+2) cnst;
                              print_newline ();
                              print_spaces n;
                              print_string ")"

      | (ConstExp (const,_)) => print_spaces n;
                                print_string "ConstExp(";
                                print_const 0 const;
                                print_string ")"

      | (IdExp (varlongid,_)) => print_spaces n;
                                 print_string "IdExp(";
                                 print_varlongid varlongid;
                                 print_string ")"

      | (BopExp (exp1,bop,exp2,_)) => print_spaces n;
                                      print_string "BopExp(\n";
                                      print_exp (n+2) exp1;
                                      print_string ",\n";
                                      print_bop (n+2) bop;
                                      print_string ",\n";
                                      print_exp (n+2) exp2;
                                      print_newline ();
                                      print_spaces n;
                                      print_string ")"

      | (IntervalSetExp (exp1,exp2,_)) => print_spaces n;
                                          print_string "IntervalSetExp(\n";
                                          print_exp (n+2) exp1;
                                          print_string ",\n";
                                          print_exp (n+2) exp2;
                                          print_newline ();
                                          print_spaces n;
                                          print_string ")"

      | (EnumSetExp (exp_list,_)) => print_spaces n;
                                     print_string "EnumSetExp(\n";
                                     print_exp_list n exp_list;
                                     print_newline ();
                                     print_spaces n;
                                     print_string ")"

      | (SetCompExp (exp_list,qual,_)) => print_spaces n;
                                          print_string "SetCompExp(\n";
                                          print_spaces (n+2);
                                          print_string "[\n";
                                          print_exp_list (n+2) exp_list;
                                          print_newline ();
                                          print_spaces (n+2);
                                          print_string "],\n";
                                          print_qual (n+2) qual;
                                          print_newline ();
                                          print_spaces n;
                                          print_string ")"

      | (MapExp (mrule_list,_)) => print_spaces n;
                                   print_string "MapExp(\n";
                                   print_mrule_list (n+2) mrule_list;
                                   print_newline ();
                                   print_spaces n

      | (MapCompExp (mrule_list,qual,_)) => print_spaces n;
                                            print_string "MapCompExp(\n";
                                            print_spaces (n+2);
                                            print_string "[\n";
                                            print_mrule_list (n+2) mrule_list;
                                            print_newline ();
                                            print_spaces (n+2);
                                            print_string "],\n";
                                            print_qual (n+2) qual;
                                            print_newline ();
                                            print_spaces n;
                                            print_string ")"

      | (EmptySetExp _) => print_spaces n;
                           print_string "EmptySetExp()"

      | (FoldJoinExp (exp,_)) => print_spaces n;
                                 print_string "FoldJoinExp(\n";
                                 print_exp (n+2) exp;
                                 print_newline ();
                                 print_spaces n;
                                 print_string ")"

      | (FoldMeetExp (exp,_)) => print_spaces n;
                                 print_string "FoldMeetExp(\n";
                                 print_exp (n+2) exp;
                                 print_newline ();
                                 print_spaces n;
                                 print_string ")"

      | (TupleExp (exp_list,_)) => print_spaces n;
                                   print_string "TupleExp(\n";
                                   print_exp_list n exp_list;
                                   print_newline ();
                                   print_spaces n;
                                   print_string ")"

      | (ProjectExp (exp,projtag,_)) => print_spaces n;
                                        print_string "ProjectExp(\n";
                                        print_exp (n+2) exp;
                                        print_string ",\n";
                                        print_projtag (n+2) projtag;
                                        print_newline ();
                                        print_spaces n;
                                        print_string ")"

      | (InjectExp (injtag,ty,exp,_)) => print_spaces n;
                                         print_string "InjectExp(\n";
                                         print_injtag (n+2) injtag;
                                         print_string ",\n";
                                         print_ty (n+2) ty;
                                         print_string ",\n";
                                         print_exp (n+2) exp;
                                         print_newline ();
                                         print_spaces n;
                                         print_string ")"

      | (LetExp (valdec_list,exp,_)) => print_spaces n;
                                        print_string "LetExp(\n";
                                        print_spaces (n+2);
                                        print_string "[\n";
                                        print_valdec_list (n+2) valdec_list;
                                        print_newline ();
                                        print_spaces (n+2);
                                        print_string "],\n";
                                        print_exp (n+2) exp;
                                        print_newline ();
                                        print_spaces n;
                                        print_string ")"

      | (FnExp (match,_)) => print_spaces n;
                             print_string "FnExp()"

      | (AppExp (exp1,exp2,_)) => print_spaces n;
                                  print_string "AppExp(\n";
                                  print_exp (n+2) exp1;
                                  print_string ",\n";
                                  print_exp (n+2) exp2;
                                  print_newline ();
                                  print_spaces n;
                                  print_string ")"

      | (CoerceExp (exp,ty,_)) => print_spaces n;
                                  print_string "CoerceExp(\n";
                                  print_exp (n+2) exp;
                                  print_string ",\n";
                                  print_ty (n+2) ty;
                                  print_newline ();
                                  print_spaces n;
                                  print_string ")"

      | (IndexExp (s,_)) => print_spaces n;
                            print_string "IndexExp()"

      | (MapModExp (exp,mrule,_)) => print_spaces n;
                                     print_string "MapModExp()"

      | (MpExp (match,_)) => print_spaces n;
                             print_string "MpExp()"

      | (CaseExp (exp,match,_)) => print_spaces n;
                                   print_string "CaseExp()"

      | (IfExp (exp1,exp2,exp3,_)) => print_spaces n;
                                      print_string "IfExp(\n";
                                      print_exp (n+2) exp1;
                                      print_string ",\n";
                                      print_exp (n+2) exp2;
                                      print_string ",\n";
                                      print_exp (n+2) exp3;
                                      print_newline ();
                                      print_spaces n;
                                      print_string ")"

      | (MappingExp (exp1,exp2,_)) => print_spaces n;
                                      print_string "MappingExp(\n";
                                      print_exp (n+2) exp1;
                                      print_string ",\n";
                                      print_exp (n+2) exp2;
                                      print_newline ();
                                      print_spaces n;
                                      print_string ")"

    and print_exp_list n = fn
        [] => raise PrintException "print_exp_list"
      | (exp::[]) => print_exp (n+2) exp
      | (exp::exp_list) => print_exp (n+2) exp;
                           print_string ",\n";
                           print_exp_list n exp_list


    and print_qual n = fn
        (gen,None) => print_spaces n;
                      print_string "[\n";
                      print_gen n gen;
                      print_newline ();
                      print_spaces n;
                      print_string "]"

      | (gen,Some guard) => print_spaces n;
                            print_string "[\n";
                            print_gen n gen;
                            print_newline ();
                            print_spaces n;
                            print_string "],\n";
                            print_guard n guard


    and print_ge n = fn
        (SetElmtGen (pat,exp,_)) => print_spaces n;
                                    print_string "SetElmtGen(\n";
                                    print_pat (n+2) pat;
                                    print_string ",\n";
                                    print_exp (n+2) exp;
                                    print_newline ();
                                    print_spaces n;
                                    print_string ")"

      | (MapElmtGen (mpat,exp,_)) => print_spaces n;
                                     print_string "MapElmtGen(\n";
                                     print_mpat (n+2) mpat;
                                     print_string ",\n";
                                     print_exp (n+2) exp;
                                     print_newline ();
                                     print_spaces n;
                                     print_string ")"


    and print_gen n (ge_list,_) = print_ge_list n ge_list


    and print_ge_list n = fn
        [] => raise PrintException "print_ge_list"
      | (ge::[]) => print_ge (n+2) ge
      | (ge::ge_list) => print_ge (n+2) ge;
                         print_string ",\n";
                         print_ge_list n ge_list


    and print_guard n = fn
        (RopGuard (rop,exp_list,_)) => print_spaces n;
                                       print_string "RopGuard(\n";
                                       print_rop (n+2) rop;
                                       print_string ",\n";
                                       print_spaces (n+2);
                                       print_string "[\n";
                                       print_exp_list (n+2) exp_list;
                                       print_newline ();
                                       print_spaces (n+2);
                                       print_string "]\n";
                                       print_spaces n;
                                       print_string ")"

      | (MemberGuard (exp1,exp2,_)) => print_spaces n;
                                       print_string "MemberGuard(\n";
                                       print_exp (n+2) exp1;
                                       print_string ",\n";
                                       print_exp (n+2) exp2;
                                       print_newline ();
                                       print_spaces n;
                                       print_string ")"

      | (NotGuard (guard,_)) => print_spaces n;
                                print_string "NotGuard(\n";
                                print_guard (n+2) guard;
                                print_newline ();
                                print_spaces n;
                                print_string ")"

      | (AndGuard (guard_list,_)) => print_spaces n;
                                     print_string "AndGuard(\n";
                                     print_guard_list n guard_list;
                                     print_newline ();
                                     print_spaces n;
                                     print_string ")"

      | (OrGuard (guard_list,_)) => print_spaces n;
                                    print_string "OrGuard(\n";
                                    print_guard_list n guard_list;
                                    print_newline ();
                                    print_spaces n;
                                    print_string ")"

      | (UnivGuard (gen,guard,_)) => print_spaces n;
                                     print_string "UnivGuard(\n";
                                     print_spaces (n+2);
                                     print_string "[\n";
                                     print_gen (n+2) gen;
                                     print_spaces (n+2);
                                     print_string "],\n";
                                     print_guard (n+2) guard;
                                     print_newline ();
                                     print_spaces n;
                                     print_string ")"

      | (ExisGuard (gen,guard,_)) => print_spaces n;
                                     print_string "ExisGuard(\n";
                                     print_spaces (n+2);
                                     print_string "[\n";
                                     print_gen (n+2) gen;
                                     print_spaces (n+2);
                                     print_string "],\n";
                                     print_guard (n+2) guard;
                                     print_newline ();
                                     print_spaces n;
                                     print_string ")"

    and print_guard_list n = fn
        [] => raise PrintException "print_guard_list"
     | (guard::[]) => print_guard (n+2) guard
     | (guard::guard_list) => print_guard (n+2) guard;
                              print_string ",\n";
                              print_guard_list n guard_list


    and print_match n (mrule_list,_) = print_mrule_list n mrule_list

    and print_mrule_list n = fn
        [] => raise PrintException "print_mrule_list"
      | (mrule::[]) => print_mrule (n+2) mrule
      | (mrule::mrule_list) => print_mrule (n+2) mrule;
                               print_string ",\n";
                               print_mrule_list n mrule_list

    and print_mrule n = fn
        (pat,exp,_) => print_spaces n;
                       print_string "(\n";
                       print_pat (n+2) pat;
                       print_string ",\n";
                       print_exp (n+2) exp;
                       print_newline ();
                       print_spaces n;
                       print_string ")"

    and print_pat n = fn
        (WildPat) => print_spaces n;
                     print_string "WildPat"

      | (VarPat varid) => print_spaces n;
                          print_string "VarPat(";
                          print_varid 0 varid;
                          print_string ")"

      | (NmlPat nml) => print_spaces n;
                        print_string "NmlPat(";
                        print_string nml;
                        print_string ")"

      | (SetPat pat_list) => print_spaces n;
                             print_string "SetPat(\n";
                             print_pat_list n pat_list;
                             print_newline ();
                             print_spaces n;
                             print_string ")"

      | (SetDotsPat pat_list) => print_spaces n;
                                 print_string "SetDotsPat(\n";
                                 print_pat_list n pat_list;
                                 print_newline ();
                                 print_spaces n;
                                 print_string ")"

      | (IntervalSetPat (pat1,pat2)) => print_spaces n;
                                        print_string "IntervalSetPat(\n";
                                        print_pat (n+2) pat1;
                                        print_string ",\n";
                                        print_pat (n+2) pat2;
                                        print_newline ();
                                        print_spaces n;
                                        print_string ")"

      | (MapPat mpat_list) => print_spaces n;
                              print_string "MapPat(\n";
                              print_mpat_list n mpat_list;
                              print_newline ();
                              print_spaces n;
                              print_string ")"

      | (MapDotsPat mpat_list) => print_spaces n;
                                  print_string "MapDotsPat(\n";
                                  print_mpat_list n mpat_list;
                                  print_newline ();
                                  print_spaces n;
                                  print_string ")"

      | (InjectPat (injtag,pat)) => print_spaces n;
                                    print_string "InjectPat(\n";
                                    print_injtag (n+2) injtag;
                                    print_string ",\n";
                                    print_pat (n+2) pat;
                                    print_newline ();
                                    print_spaces n;
                                    print_string ")"

      | (TuplePat pat_list) => print_spaces n;
                               print_string "TuplePat(\n";
                               print_pat_list n pat_list;
                               print_newline ();
                               print_spaces n;
                               print_string ")"

      | (GuardedPat (pat,guard)) => print_spaces n;
                                    print_string "GuardedPat(\n";
                                    print_pat (n+2) pat;
                                    print_string ",\n";
                                    print_guard (n+2) guard;
                                    print_newline ();
                                    print_spaces n;
                                    print_string ")"

      | (OrPat pat_list) => print_spaces n;
                            print_string "OrPat(\n";
                            print_pat_list n pat_list;
                            print_newline ();
                            print_spaces n;
                            print_string ")"

      | (AsPat (varid,pat)) => print_spaces n;
                               print_string "AsPat(\n";
                               print_varid (n+2) varid;
                               print_string ",\n";
                               print_pat (n+2) pat;
                               print_newline ();
                               print_spaces n;
                               print_string ")"

      | (TyPat (pat,ty)) => print_spaces n;
                            print_string "TyPat(\n";
                            print_pat (n+2) pat;
                            print_string ",\n";
                            print_ty (n+2) ty;
                            print_newline ();
                            print_spaces n;
                            print_string ")"

      | (ConstPat const) => print_spaces n;
                            print_string "ConstPat(";
                            print_const 0 const;
                            print_string ")"

      | (RopPat (pat,rop,exp)) => print_spaces n;
                                  print_string "RopPat(\n";
                                  print_pat (n+2) pat;
                                  print_string ",\n";
                                  print_rop (n+2) rop;
                                  print_string ",\n";
                                  print_exp (n+2) exp;
                                  print_newline ();
                                  print_spaces n;
                                  print_string ")"

      | (InPat (pat,exp)) => print_spaces n;
                             print_string "InPat(\n";
                             print_pat (n+2) pat;
                             print_string ",\n";
                             print_exp (n+2) exp;
                             print_newline ();
                             print_spaces n;
                             print_string ")"

    and print_pat_list n = fn
        [] => raise PrintException "print_pat_list"
      | (pat::[]) => print_pat (n+2) pat
      | (pat::pat_list) => print_pat (n+2) pat;
                           print_string ",\n";
                           print_pat_list n pat_list


    and print_mpat n = fn
        (pat1,pat2) => print_spaces n;
                       print_string "<\n";
                       print_pat (n+2) pat1;
                       print_string ",\n";
                       print_pat (n+2) pat2;
                       print_newline ();
                       print_spaces n;
                       print_string ">"


    and print_mpat_list n = fn
        [] => raise PrintException "print_mpat_list"
      | (mpat::[]) => print_mpat (n+2) mpat
      | (mpat::mpat_list) => print_mpat (n+2) mpat;
                             print_string ",\n";
                             print_mpat_list n mpat_list

end
