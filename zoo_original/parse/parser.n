signature Parser = sig 

type token =
    ANA
  | ANALYSIS
  | AND
  | ARROW
  | AS
  | ATOMIC
  | BOTTOM
  | CASE
  | CCR
  | CIM
  | CONSTRAINT
  | ELSE
  | END
  | EQN
  | FALSE
  | FLAT
  | FN
  | FROM
  | FUN
  | IF
  | IN
  | INDEX
  | INT
  | LATTICE
  | LET
  | MAP
  | MP
  | NOT
  | OF
  | OR
  | ORDER
  | POST
  | POWER
  | PRE
  | PRODUCT
  | REC
  | RHS
  | QUERY
  | SET
  | SIG
  | SIGNATURE
  | SUM
  | SYNTREE
  | THEN
  | TOP
  | TRUE
  | VAL
  | VAR
  | WIDEN
  | WITH
  | AF
  | AG
  | AU
  | AX
  | EF
  | EG
  | EU
  | EX
  | UNDER
  | UNDERUNDER
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COLON
  | COMMA
  | STAR
  | PLUS
  | MINUS
  | LEFTARROW
  | RIGHTARROW
  | BOTHARROW
  | DOUBLEARROW
  | AT
  | HAT
  | BAR
  | DOT
  | DOTDOTDOT
  | BANG
  | QUESTION
  | LT
  | GT
  | EQ
  | LE
  | GE
  | LINE
  | EOF
  | LID of (string)
  | UID of (string)
  | SID of (string)
  | INTNUM of (int)
  | NMLEXP of (string)
  | CTLID of (string)
  | ANAID of (string)

val rabbit :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> RabbitAst.topdec


end (* END of signature Parser *)


structure Parser = struct 

type token =
    ANA
  | ANALYSIS
  | AND
  | ARROW
  | AS
  | ATOMIC
  | BOTTOM
  | CASE
  | CCR
  | CIM
  | CONSTRAINT
  | ELSE
  | END
  | EQN
  | FALSE
  | FLAT
  | FN
  | FROM
  | FUN
  | IF
  | IN
  | INDEX
  | INT
  | LATTICE
  | LET
  | MAP
  | MP
  | NOT
  | OF
  | OR
  | ORDER
  | POST
  | POWER
  | PRE
  | PRODUCT
  | REC
  | RHS
  | QUERY
  | SET
  | SIG
  | SIGNATURE
  | SUM
  | SYNTREE
  | THEN
  | TOP
  | TRUE
  | VAL
  | VAR
  | WIDEN
  | WITH
  | AF
  | AG
  | AU
  | AX
  | EF
  | EG
  | EU
  | EX
  | UNDER
  | UNDERUNDER
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COLON
  | COMMA
  | STAR
  | PLUS
  | MINUS
  | LEFTARROW
  | RIGHTARROW
  | BOTHARROW
  | DOUBLEARROW
  | AT
  | HAT
  | BAR
  | DOT
  | DOTDOTDOT
  | BANG
  | QUESTION
  | LT
  | GT
  | EQ
  | LE
  | GE
  | LINE
  | EOF
  | LID of (string)
  | UID of (string)
  | SID of (string)
  | INTNUM of (int)
  | NMLEXP of (string)
  | CTLID of (string)
  | ANAID of (string)

open Parsing
(* # 18 "parser.ny" *)

open RabbitAst
open ErrorInfo
open Print


(* Default YACC error handler *)

fun parse_error msg = 
    let
        val error_line = FileInfo.get_current_line_number ()
        val error_pos1 = FileInfo.get_current_token_start ()
        val error_pos2 = error_pos1 - FileInfo.get_current_line_start () + 1
    in
        print_int error_line;
        print_string ".";
        print_int error_pos2;
        print_string ": ";

        print_string msg;
        print_newline ()
    end


(* Get the region structure *)

fun region () =
    let
        val start_loc = FileInfo.get_loc (Parsing.symbol_start ())
        val end_loc   = FileInfo.get_loc (Parsing.symbol_end ())
    in
        Region.make_region start_loc end_loc
    end

fun region_of n =
    let
        val start_loc = FileInfo.get_loc (Parsing.rhs_start n)
        val end_loc   = FileInfo.get_loc (Parsing.rhs_end n)
    in
        Region.make_region start_loc end_loc
    end

fun merged_region_of s e =
    let
        val start_region = region_of s
        val end_region   = region_of e
    in
        Region.merge_region start_region end_region
    end


(* Keep information of variables *)

val check_ctlid = ref false
val check_anaid = ref false

exception InternalError;

val anaid_env = ref [([]:string list)]
val setid_env = ref [([]:string list)]
val latid_env = ref [([]:string list)]
val ctlid_env = ref [([]:string list)]
val cvarid_env = ref [([]:string list)]

fun general_push [] = raise InternalError
  | general_push ll = ([]::ll)

fun push_anaid_env () = (anaid_env := general_push (!anaid_env))
fun push_setid_env () = (setid_env := general_push (!setid_env))
fun push_latid_env () = (latid_env := general_push (!latid_env))
fun push_ctlid_env () = (ctlid_env := general_push (!ctlid_env))
fun push_cvarid_env () = (cvarid_env := general_push (!cvarid_env))

fun general_pop []      = raise InternalError
  | general_pop (_::[]) = raise InternalError
  | general_pop (_::ll) = ll

fun pop_anaid_env () = (anaid_env := general_pop (!anaid_env))
fun pop_setid_env () = (setid_env := general_pop (!setid_env))
fun pop_latid_env () = (latid_env := general_pop (!latid_env))
fun pop_ctlid_env () = (ctlid_env := general_pop (!ctlid_env))
fun pop_cvarid_env () = (cvarid_env := general_pop (!cvarid_env))

fun general_store s []      = raise InternalError
  | general_store s (l::ll) = ((s::l)::ll)

fun store_anaid s = (anaid_env := general_store s (!anaid_env))
fun store_setid s = (setid_env := general_store s (!setid_env))
fun store_latid s = (latid_env := general_store s (!latid_env))
fun store_ctlid s = (ctlid_env := general_store s (!ctlid_env))
fun store_cvarid s = (cvarid_env := general_store s (!cvarid_env))

fun general_lookup s [] = raise InternalError
  | general_lookup s ll = 
        (List.exists (fn l => List.exists (fn x => x = s) l) ll)

fun is_anaid s = general_lookup s (!anaid_env)
fun is_setid s = general_lookup s (!setid_env)
fun is_latid s = general_lookup s (!setid_env)
fun is_ctlid s = general_lookup s (!ctlid_env)
fun is_cvarid s = general_lookup s (!cvarid_env)


(* Intermediate parse tree *)

type domexp = NmlTyDom of string                * Region.region
            | IdDom of domlongid                * Region.region
            | IntervalDom of exp * exp          * Region.region
            | EnumDom of elmtid list            * Region.region
            | FlatDom of setexp                 * Region.region
            | PowerDom of setexp                * Region.region
            | ProductDom of domexp list         * Region.region
            | SumDom of domexp list             * Region.region
            | ArrowDom of domexp * domexp       * Region.region
            | OrderDom of setexp * order        * Region.region
            | ConstraintDom of setexp * cnstdec * Region.region

fun is_setexp (NmlTyDom _)         = True
  | is_setexp (IdDom _)            = True
  | is_setexp (IntervalDom _)      = True
  | is_setexp (EnumDom _)          = True
  | is_setexp (FlatDom _)          = False
  | is_setexp (PowerDom _)         = True
  | is_setexp (ProductDom (l,_))   = is_setexp_list l
  | is_setexp (SumDom (l,_))       = is_setexp_list l
  | is_setexp (ArrowDom (d1,d2,_)) = (is_setexp d1) andalso (is_setexp d2)
  | is_setexp (OrderDom _)         = False
  | is_setexp (ConstraintDom _)    = True

and is_setexp_list []     = True
  | is_setexp_list (d::l) = (is_setexp d) andalso (is_setexp_list l)

fun is_latexp (NmlTyDom _)         = True
  | is_latexp (IdDom _)            = True
  | is_latexp (IntervalDom _)      = False
  | is_latexp (EnumDom _)          = False
  | is_latexp (FlatDom _)          = True
  | is_latexp (PowerDom _)         = True
  | is_latexp (ProductDom (l,_) )  = is_latexp_list l
  | is_latexp (SumDom (l,_))       = is_latexp_list l
  | is_latexp (ArrowDom (d1,d2,_)) = is_latexp d2
  | is_latexp (OrderDom _)         = True
  | is_latexp (ConstraintDom _)    = False

and is_latexp_list []     = True
  | is_latexp_list (d::l) = (is_latexp d) andalso (is_latexp_list l)

val rec print_domexp = fn
    (NmlTyDom _) => print_string "NmlTyDom()"
  | (IdDom _) => print_string "IdDom()"
  | (IntervalDom _) => print_string "IntervalDom()"
  | (EnumDom _) => print_string "EnumDom()"
  | (FlatDom _) => print_string "FlatDom()"
  | (PowerDom _) => print_string "PowerDom()"
  | (ProductDom _) => print_string "ProductDom()"
  | (SumDom _) => print_string "SumDom()"
  | (ArrowDom _) => print_string "ArrowDom()"
  | (OrderDom _) => print_string "OrderDom()"
  | (ConstraintDom _) => print_string "ConstraintDom()"

fun setexp_of (NmlTyDom (s,r))        = NmlTySet (s,r)
  | setexp_of (IdDom (s,r))           = IdSet (s,r)
  | setexp_of (IntervalDom (e1,e2,r)) = IntervalSet (e1,e2,r)
  | setexp_of (EnumDom (l,r))         = EnumSet (l,r)
  | setexp_of (FlatDom (_,r))         = raise Error (Invalid_setexp,r)
  | setexp_of (PowerDom (d,r))        = PowerSet (d,r)
  | setexp_of (ProductDom (l,r))      = ProductSet (List.map setexp_of l,r)
  | setexp_of (SumDom (l,r))          = SumSet (List.map setexp_of l,r)
  | setexp_of (ArrowDom (d1,d2,r))    = FunSet (setexp_of d1,setexp_of d2,r)
  | setexp_of (OrderDom (_,_,r))      = raise Error (Invalid_setexp,r)
  | setexp_of (ConstraintDom (d,c,r)) = CnstSet (d,c,r)

fun latexp_of (NmlTyDom (s,r))        = NmlStrLat (s,r)
  | latexp_of (IdDom (s,r))           = IdLat (s,r)
  | latexp_of (IntervalDom (_,_,r))   = raise Error (Invalid_latexp,r)
  | latexp_of (EnumDom (_,r))         = raise Error (Invalid_latexp,r)
  | latexp_of (FlatDom (d,r))         = FlatLat (d,r)
  | latexp_of (PowerDom (d,r))        = PowerLat (d,r)
  | latexp_of (ProductDom (l,r))      = ProductLat (List.map latexp_of l,r)
  | latexp_of (SumDom (l,r))          = SumLat (List.map latexp_of l,r)
  | latexp_of (ArrowDom (d1,d2,r))    = 
        if is_latexp d1 then AtomicLat (latexp_of d1,latexp_of d2,r)
                        else DependLat (setexp_of d1,latexp_of d2,r)
  | latexp_of (OrderDom (d,o,r))      = OrderLat (d,o,r)
  | latexp_of (ConstraintDom (_,_,r)) = raise Error (Invalid_latexp,r)

type common = Nml of string                 * Region.region
            | Id of id                      * Region.region
            | LongId of id list             * Region.region
            | Const of const                * Region.region
            | Set of common list            * Region.region
            | Map of map list               * Region.region
            | Tuple of common list          * Region.region
            | Interval of common * common   * Region.region
            | Join of common * common       * Region.region
            | Meet of common * common       * Region.region
            | Coercion of common * ty       * Region.region
            | Index of common * common      * Region.region
            | Exp of exp                    * Region.region
            | Pat of pat                    * Region.region
            (*
            | Cargexp of cargexp            * Region.region
            *)
            | Ty of ty                      * Region.region
            | Rop of common * rop * exp     * Region.region

and map     = common * common               * Region.region

fun get_region (Nml (_,r))        = r
  | get_region (Id (_,r))         = r
  | get_region (LongId (_,r))     = r
  | get_region (Const (_,r))      = r
  | get_region (Set (_,r))        = r
  | get_region (Tuple (_,r))      = r
  | get_region (Interval (_,_,r)) = r
  | get_region (Join (_,_,r))     = r
  | get_region (Meet (_,_,r))     = r
  | get_region (Map (_,r))        = r
  | get_region (Coercion (_,_,r)) = r
  | get_region (Index (_,_,r))    = r
  | get_region (Exp (_,r))        = r
  | get_region (Pat (_,r))        = r
  (*
  | get_region (Cargexp (_,r))    = r
  *)
  | get_region (Ty (_,r))         = r
  | get_region (Rop (_,_,_,r))    = r

fun is_id (Id _) = True
  | is_id _ = False

fun is_longid (Id _) = True
  | is_longid (LongId _) = True
  | is_longid _ = False

fun is_pat (Nml _)            = True
  | is_pat (Id _)             = True
  | is_pat (Const _)          = True
  | is_pat (Set (l,_))        = is_pat_list l
  | is_pat (Map (l,_))        = is_mpat_list l
  | is_pat (Tuple (l,_))      = is_pat_list l
  | is_pat (Interval (x,y,_)) = (is_pat x) andalso (is_pat y)
  | is_pat (Pat _)            = True
  | is_pat (Rop (x,_,_,_))    = is_pat x
  | is_pat _ = False

and is_pat_list []            = True
  | is_pat_list (first::rest) = (is_pat first) andalso (is_pat_list rest)

and is_mpat (p1,p2,_) = (is_pat p1) andalso (is_pat p2)

and is_mpat_list []            = True
  | is_mpat_list (first::rest) = (is_mpat first) andalso (is_mpat_list rest)


fun id_of (Id (i,r)) = (i,r)
  | id_of c = raise Error (Invalid_id, get_region c)

fun longid_of (Id (i,r)) = (i::[],r)
  | longid_of (LongId (l,r)) = (l,r)
  | longid_of c = raise Error (Invalid_longid, get_region c)

fun exp_of (Nml (e,r))     = NmlExp (e,r)
  | exp_of (Id (e,r))      = if is_setid e 
                             then SetIdExp ((e::[],r),r)
                             else IdExp ((e::[],r),r)
  | exp_of (LongId (n1::n2::[],r)) = if is_setid n2 
                                     then SetIdExp ((n1::n2::[],r),r)
                                     else IdExp ((n1::n2::[],r),r)
  | exp_of (Const (e,r))  = ConstExp (e,r)
  | exp_of (Set (l,r))    = EnumSetExp ((exp_list_of l), r)
  | exp_of (Map (l,r))    = MapExp ((mrule_list_of l), r)
  | exp_of (Tuple (l,r))  = TupleExp ((exp_list_of l), r)
  | exp_of (Interval (e1,e2,r)) = IntervalSetExp (exp_of e1, exp_of e2, r)
  | exp_of (Join (e1,e2,r)) = BopExp (exp_of e1, PlusOp, exp_of e2, r)
  | exp_of (Meet (e1,e2,r)) = BopExp (exp_of e1, MultiOp, exp_of e2, r)
  | exp_of (Coercion (e,ty,r)) = CoerceExp (exp_of e, ty, r)
  | exp_of (Index (longid,exp,r)) = IndexExp ({tag=None, eqnid=(longid_of longid), index=(exp_of exp)},r)
  | exp_of (Exp (e,r))      = e
  | exp_of (Rop (e1,rop,e2,r)) = BopExp (exp_of e1, RelOp rop, e2, r)
  | exp_of c = raise Error (Invalid_exp, get_region c)

and exp_list_of [] = []
  | exp_list_of (first::rest) = (exp_of first)::(exp_list_of rest)

and pat_of (Nml (p,r))   = NmlPat (p)
  | pat_of (Id (p,r))    = VarPat (p,r)
  | pat_of (LongId ([anaid,elmtid],r)) = ConstPat (ElmtIdConst ([anaid,elmtid],r))
  | pat_of (Const (p,r)) = ConstPat (p)
  | pat_of (Set (l,r))   = SetPat (pat_list_of l)
  | pat_of (Map (l,r))   = MapPat (mpat_list_of l)
  | pat_of (Tuple (l,r)) = TuplePat (pat_list_of l)
  | pat_of (Interval (p1,p2,r)) = IntervalSetPat (pat_of p1, pat_of p2)
  | pat_of (Coercion (p,ty,r)) = TyPat (pat_of p, ty)
  | pat_of (Pat (p,r))   = p
  | pat_of (Rop (p,rop,e,r)) = RopPat (pat_of p, rop, e)
  | pat_of c = raise Error (Invalid_pat, get_region c)

and pat_list_of [] = []
  | pat_list_of (first::rest) = (pat_of first)::(pat_list_of rest)


and mrule_of (p,e,r) = (pat_of p, exp_of e, r)

and mpat_of (p1,p2,r) = (pat_of p1, pat_of p2)

and mrule_list_of l = List.map mrule_of l

and mpat_list_of l = List.map mpat_of l


fun ty_of (Nml (t,r))      = NmlTy (t,r)
  | ty_of (Id (t,r))       = DomTy ((t::[],r),r)
  | ty_of (LongId (l,r))   = DomTy ((l,r),r)
  | ty_of (Join (t1,t2,r)) = SumTy ((ty_of t1)::(ty_of t2)::[], r)
  | ty_of (Meet (t1,t2,r)) = TupleTy ((ty_of t1)::(ty_of t2)::[], r)
  | ty_of (Ty (t,r))       = t
  | ty_of c = raise Error (Invalid_ty, get_region c)

and ty_list_of [] = []
  | ty_list_of (first::rest) = (ty_of first)::(ty_list_of rest)


fun cvarexp_of (Id (n,r)) = {cvarid=([n],r), index=None}
  | cvarexp_of (LongId (l,r)) = {cvarid=(l,r), index=None}
  | cvarexp_of (Index (c1,c2,r)) = {cvarid=(longid_of c1), index=(Some (pat_of c2))}
  (*
  | cvarexp_of (Cargexp (CargexpCvar e,r)) = e
  *)
  | cvarexp_of c = raise Error (Invalid_cvarexp, get_region c)

fun cargexp_of (Tuple (l,r)) = CargexpTuple (cargexp_list_of l)
  | cargexp_of (Index (c1,c2,r)) = CargexpCvar (cvarexp_of (Index (c1,c2,r)))
  (*
  | cargexp_of (Cargexp (c,r)) = c
  *)
  | cargexp_of c = if is_pat c then CargexpPat (pat_of c) 
                               else raise Error (Invalid_cargexp, get_region c)

and cargexp_list_of [] = []
  | cargexp_list_of (first::rest) = (cargexp_of first)::(cargexp_list_of rest)



fun dissolve_sugared_order _ [] = []
  | dissolve_sugared_order pat1 ((po,pat2)::rest) =
        (po,TuplePat [pat1,pat2])::(dissolve_sugared_order pat2 rest)
(* Line 351, file parser.n *)
val yytransl_const = [|
  257 (* ANA *),
  258 (* ANALYSIS *),
  259 (* AND *),
  260 (* ARROW *),
  261 (* AS *),
  262 (* ATOMIC *),
  263 (* BOTTOM *),
  264 (* CASE *),
  265 (* CCR *),
  266 (* CIM *),
  267 (* CONSTRAINT *),
  268 (* ELSE *),
  269 (* END *),
  270 (* EQN *),
  271 (* FALSE *),
  272 (* FLAT *),
  273 (* FN *),
  274 (* FROM *),
  275 (* FUN *),
  276 (* IF *),
  277 (* IN *),
  278 (* INDEX *),
  279 (* INT *),
  280 (* LATTICE *),
  281 (* LET *),
  282 (* MAP *),
  283 (* MP *),
  284 (* NOT *),
  285 (* OF *),
  286 (* OR *),
  287 (* ORDER *),
  288 (* POST *),
  289 (* POWER *),
  290 (* PRE *),
  291 (* PRODUCT *),
  292 (* REC *),
  293 (* RHS *),
  294 (* QUERY *),
  295 (* SET *),
  296 (* SIG *),
  297 (* SIGNATURE *),
  298 (* SUM *),
  299 (* SYNTREE *),
  300 (* THEN *),
  301 (* TOP *),
  302 (* TRUE *),
  303 (* VAL *),
  304 (* VAR *),
  305 (* WIDEN *),
  306 (* WITH *),
  307 (* AF *),
  308 (* AG *),
  309 (* AU *),
  310 (* AX *),
  311 (* EF *),
  312 (* EG *),
  313 (* EU *),
  314 (* EX *),
  315 (* UNDER *),
  316 (* UNDERUNDER *),
  317 (* LPAREN *),
  318 (* RPAREN *),
  319 (* LBRACE *),
  320 (* RBRACE *),
  321 (* LBRACKET *),
  322 (* RBRACKET *),
  323 (* COLON *),
  324 (* COMMA *),
  325 (* STAR *),
  326 (* PLUS *),
  327 (* MINUS *),
  328 (* LEFTARROW *),
  329 (* RIGHTARROW *),
  330 (* BOTHARROW *),
  331 (* DOUBLEARROW *),
  332 (* AT *),
  333 (* HAT *),
  334 (* BAR *),
  335 (* DOT *),
  336 (* DOTDOTDOT *),
  337 (* BANG *),
  338 (* QUESTION *),
  339 (* LT *),
  340 (* GT *),
  341 (* EQ *),
  342 (* LE *),
  343 (* GE *),
  344 (* LINE *),
    0 (* EOF *),
    0|]

val yytransl_block = [|
  345 (* LID *),
  346 (* UID *),
  347 (* SID *),
  348 (* INTNUM *),
  349 (* NMLEXP *),
  350 (* CTLID *),
  351 (* ANAID *),
    0|]

val yylhs = "\255\255\
\001\000\003\000\003\000\003\000\004\000\004\000\005\000\005\000\
\005\000\002\000\002\000\009\000\009\000\009\000\013\000\013\000\
\006\000\015\000\014\000\014\000\014\000\016\000\016\000\007\000\
\007\000\018\000\008\000\020\000\020\000\019\000\019\000\021\000\
\021\000\021\000\021\000\021\000\017\000\017\000\025\000\025\000\
\025\000\022\000\022\000\028\000\028\000\028\000\023\000\023\000\
\010\000\010\000\010\000\030\000\027\000\031\000\029\000\034\000\
\034\000\034\000\034\000\034\000\034\000\036\000\036\000\036\000\
\039\000\039\000\039\000\040\000\040\000\041\000\041\000\033\000\
\033\000\037\000\037\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\042\000\042\000\044\000\044\000\
\044\000\044\000\044\000\044\000\045\000\045\000\045\000\045\000\
\046\000\046\000\046\000\038\000\038\000\048\000\048\000\048\000\
\048\000\032\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\011\000\011\000\011\000\011\000\050\000\050\000\050\000\
\050\000\056\000\056\000\057\000\054\000\054\000\060\000\060\000\
\055\000\055\000\051\000\051\000\051\000\062\000\061\000\061\000\
\052\000\066\000\066\000\064\000\064\000\067\000\071\000\071\000\
\071\000\071\000\071\000\071\000\070\000\070\000\065\000\065\000\
\053\000\053\000\053\000\053\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\078\000\079\000\080\000\080\000\
\080\000\080\000\081\000\081\000\069\000\069\000\069\000\069\000\
\069\000\069\000\082\000\082\000\083\000\083\000\058\000\058\000\
\058\000\072\000\072\000\085\000\085\000\086\000\086\000\086\000\
\087\000\087\000\088\000\088\000\088\000\024\000\024\000\059\000\
\059\000\089\000\089\000\091\000\091\000\035\000\035\000\035\000\
\092\000\092\000\093\000\093\000\074\000\074\000\063\000\063\000\
\063\000\063\000\063\000\075\000\075\000\084\000\076\000\076\000\
\049\000\049\000\077\000\077\000\077\000\077\000\077\000\077\000\
\096\000\096\000\097\000\097\000\090\000\090\000\090\000\090\000\
\090\000\098\000\098\000\098\000\094\000\094\000\099\000\099\000\
\100\000\100\000\068\000\068\000\068\000\095\000\095\000\012\000\
\102\000\101\000\101\000\104\000\104\000\104\000\104\000\104\000\
\104\000\103\000\103\000\106\000\106\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\105\000\105\000\
\109\000\109\000\111\000\111\000\107\000\107\000\107\000\110\000\
\112\000\113\000\114\000\000\000"

val yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\001\000\001\000\
\001\000\001\000\002\000\001\000\001\000\001\000\001\000\002\000\
\004\000\001\000\003\000\004\000\001\000\001\000\003\000\006\000\
\004\000\002\000\008\000\005\000\003\000\001\000\003\000\002\000\
\002\000\004\000\004\000\004\000\001\000\002\000\001\000\003\000\
\001\000\001\000\003\000\001\000\003\000\001\000\001\000\003\000\
\001\000\001\000\001\000\002\000\003\000\002\000\003\000\001\000\
\001\000\003\000\005\000\003\000\003\000\001\000\003\000\003\000\
\001\000\002\000\002\000\001\000\003\000\001\000\003\000\001\000\
\003\000\008\000\010\000\001\000\002\000\004\000\001\000\002\000\
\002\000\003\000\004\000\004\000\001\000\003\000\001\000\002\000\
\004\000\003\000\005\000\005\000\001\000\003\000\001\000\003\000\
\002\000\002\000\002\000\001\000\003\000\002\000\002\000\003\000\
\003\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\003\000\002\000\
\002\000\001\000\002\000\003\000\001\000\003\000\004\000\006\000\
\001\000\003\000\002\000\003\000\002\000\003\000\001\000\003\000\
\004\000\001\000\001\000\001\000\003\000\003\000\001\000\003\000\
\003\000\005\000\002\000\004\000\001\000\003\000\001\000\003\000\
\004\000\006\000\005\000\007\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\005\000\003\000\003\000\005\000\005\000\004\000\006\000\004\000\
\002\000\003\000\005\000\005\000\002\000\002\000\001\000\001\000\
\002\000\002\000\001\000\002\000\001\000\003\000\004\000\006\000\
\004\000\006\000\001\000\002\000\001\000\004\000\001\000\003\000\
\003\000\001\000\002\000\001\000\001\000\001\000\002\000\002\000\
\001\000\003\000\001\000\003\000\003\000\001\000\003\000\001\000\
\006\000\001\000\003\000\001\000\003\000\001\000\005\000\006\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\002\000\
\002\000\004\000\003\000\001\000\003\000\003\000\001\000\003\000\
\001\000\003\000\003\000\003\000\005\000\005\000\005\000\005\000\
\003\000\003\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\001\000\002\000\001\000\003\000\
\001\000\003\000\001\000\004\000\004\000\001\000\003\000\002\000\
\003\000\001\000\003\000\004\000\008\000\005\000\009\000\005\000\
\009\000\002\000\002\000\002\000\003\000\001\000\002\000\002\000\
\002\000\002\000\002\000\002\000\006\000\006\000\001\000\002\000\
\001\000\003\000\001\000\003\000\001\000\003\000\003\000\001\000\
\001\000\001\000\001\000\002\000"

val yydefred = "\000\000\
\000\000\000\000\000\000\000\000\052\001\000\000\000\000\007\000\
\008\000\009\000\000\000\002\000\003\000\004\000\000\000\000\000\
\001\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\017\000\000\000\000\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\013\000\014\000\
\000\000\049\000\050\000\051\000\114\000\115\000\116\000\117\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\031\000\000\000\000\000\159\000\163\000\168\000\
\000\000\000\000\000\000\000\000\000\000\158\000\162\000\167\000\
\161\000\000\000\000\000\000\000\000\000\160\000\000\000\000\000\
\157\000\164\000\165\000\000\000\000\000\000\000\000\000\000\000\
\139\000\000\000\000\000\166\000\000\000\197\000\000\000\206\000\
\209\000\000\000\000\000\000\000\005\001\000\000\011\001\000\000\
\000\000\000\000\133\000\000\000\131\000\000\000\000\000\120\000\
\000\000\054\000\121\000\000\000\016\001\000\000\000\000\052\000\
\000\000\000\000\118\000\000\000\000\000\195\000\000\000\016\000\
\019\000\000\000\000\000\033\000\000\000\046\000\000\000\000\000\
\032\000\000\000\041\000\000\000\024\000\038\000\000\000\000\000\
\000\000\020\000\000\000\000\000\205\000\006\001\000\000\196\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\225\000\218\000\000\000\000\000\000\000\000\000\000\000\
\000\000\227\000\000\000\000\000\177\000\000\000\000\000\000\000\
\000\000\000\000\207\000\208\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\188\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\253\000\254\000\255\000\000\001\001\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\132\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\119\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\000\000\000\023\000\123\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\232\000\000\000\000\000\000\000\000\000\
\000\000\233\000\000\000\000\000\178\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\001\000\000\000\000\000\000\170\000\
\000\000\171\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\181\000\182\000\185\000\186\000\112\000\113\000\
\108\000\109\000\111\000\110\000\107\000\201\000\200\000\137\000\
\000\000\000\000\141\000\000\000\142\000\000\000\190\000\000\000\
\210\000\000\000\000\000\000\000\000\000\008\001\010\001\000\000\
\153\000\000\000\134\000\000\000\130\000\136\000\000\000\000\000\
\000\000\000\000\000\000\056\000\000\000\055\000\062\000\000\000\
\068\000\000\000\000\000\000\000\017\001\000\000\019\001\053\000\
\126\000\124\000\106\000\000\000\045\000\048\000\000\000\040\000\
\043\000\000\000\027\000\000\000\193\000\000\000\191\000\000\000\
\000\000\000\000\000\000\000\000\000\000\226\000\000\000\015\001\
\000\000\000\000\000\000\219\000\221\000\228\000\000\000\000\000\
\174\000\000\000\000\000\000\000\000\000\000\000\176\000\240\000\
\249\000\250\000\252\000\012\001\013\001\000\000\000\000\000\000\
\000\000\000\000\198\000\000\000\000\000\155\000\000\000\067\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\001\
\026\001\030\001\039\001\180\000\000\000\000\000\234\000\242\000\
\000\000\000\000\000\000\179\000\000\000\169\000\000\000\172\000\
\000\000\173\000\152\000\000\000\000\000\150\000\154\000\000\000\
\000\000\061\000\000\000\060\000\000\000\058\000\000\000\063\000\
\000\000\000\000\064\000\000\000\000\000\069\000\000\000\073\000\
\000\000\000\000\000\000\000\000\040\001\032\001\033\001\000\000\
\031\001\035\001\036\001\000\000\034\001\000\000\000\000\000\000\
\000\000\028\001\194\000\192\000\000\000\000\000\237\000\175\000\
\000\000\243\000\000\000\244\000\000\000\000\000\156\000\128\000\
\000\000\006\000\000\000\000\000\097\000\098\000\000\000\000\000\
\000\000\099\000\000\000\000\000\000\000\000\000\000\000\020\001\
\000\000\000\000\048\001\000\000\029\001\049\001\000\000\050\001\
\051\001\000\000\000\000\217\000\224\000\000\000\000\000\000\000\
\059\000\000\000\101\000\000\000\000\000\000\000\024\001\000\000\
\022\001\000\000\000\000\000\000\000\000\000\000\042\001\044\001\
\046\001\047\001\247\000\245\000\248\000\246\000\000\000\104\000\
\105\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\001\038\001\000\000\000\000\000\000\000\000\
\021\001\000\000\000\000\025\001\023\001\000\000\000\000\000\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\082\000\000\000\000\000\086\000\078\000\000\000\000\000\
\090\000\000\000\083\000\084\000\089\000\000\000\000\000\000\000\
\000\000\000\000\000\000\091\000\092\000\094\000\096\000"

val yydgoto = "\002\000\
\005\000\006\000\091\000\140\001\007\000\008\000\009\000\010\000\
\045\000\046\000\047\000\048\000\049\000\068\000\028\000\069\000\
\062\000\011\000\023\000\024\000\063\000\145\000\140\000\169\000\
\146\000\038\001\147\000\141\000\142\000\050\000\051\000\052\000\
\086\002\071\001\170\000\072\001\192\001\195\001\073\001\074\001\
\075\001\057\002\058\002\087\002\088\002\196\001\092\000\242\001\
\252\000\053\000\054\000\055\000\056\000\131\000\115\000\156\000\
\132\000\093\000\171\000\116\000\117\000\118\000\172\000\094\000\
\040\001\095\000\157\000\173\000\098\000\045\001\046\001\099\000\
\100\000\251\000\183\000\184\000\116\001\195\000\196\000\197\000\
\101\000\102\000\103\000\254\000\104\000\105\000\106\000\186\000\
\176\000\214\000\177\000\178\000\179\000\108\000\180\000\191\000\
\192\000\109\000\110\000\111\000\125\000\126\000\077\001\078\001\
\214\001\162\001\215\001\163\001\216\001\252\001\217\001\255\001\
\002\002\003\002"

val yysindex = "\042\000\
\048\255\000\000\154\000\154\000\000\000\062\000\048\255\000\000\
\000\000\000\000\097\255\000\000\000\000\000\000\119\255\197\255\
\000\000\000\000\154\000\044\255\103\255\168\255\222\255\205\255\
\000\000\232\255\000\000\164\014\122\000\000\000\150\255\219\255\
\154\000\044\255\237\006\154\000\093\255\154\000\216\255\154\000\
\154\000\218\255\107\008\225\255\164\014\000\000\000\000\000\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\154\000\246\255\154\000\008\000\154\000\058\000\122\000\122\000\
\000\000\086\000\000\000\056\000\066\000\000\000\000\000\000\000\
\152\255\133\007\154\000\014\009\154\000\000\000\000\000\000\000\
\000\000\233\005\032\007\224\007\224\007\000\000\083\007\083\007\
\000\000\000\000\000\000\087\000\106\000\053\000\085\000\000\000\
\000\000\108\000\014\009\000\000\121\000\000\000\143\000\000\000\
\000\000\151\000\215\255\221\000\000\000\211\000\000\000\009\008\
\154\000\131\008\000\000\236\000\000\000\019\001\014\009\000\000\
\194\000\000\000\000\000\199\000\000\000\030\001\206\000\000\000\
\014\009\135\006\000\000\034\001\241\254\000\000\247\000\000\000\
\000\000\232\000\244\254\000\000\233\000\000\000\240\000\121\255\
\000\000\245\000\000\000\250\000\000\000\000\000\031\001\164\014\
\044\255\000\000\152\255\041\001\000\000\000\000\026\255\000\000\
\111\000\135\006\083\007\135\006\253\000\124\007\083\007\061\001\
\252\000\000\000\000\000\005\001\002\001\019\255\215\255\130\000\
\051\001\000\000\021\001\011\001\000\000\002\000\005\255\109\255\
\006\001\005\000\000\000\000\000\018\255\057\001\010\001\001\001\
\003\001\175\000\087\000\087\000\000\000\099\001\038\009\237\006\
\154\000\106\000\038\009\083\007\224\007\224\007\224\007\224\007\
\000\000\000\000\000\000\000\000\000\000\224\007\133\007\133\007\
\154\000\135\006\162\255\254\000\000\000\135\006\195\255\154\000\
\154\000\074\000\154\000\154\000\074\000\000\000\014\009\175\007\
\083\007\224\007\070\000\246\255\224\007\070\000\008\000\224\007\
\000\000\063\001\000\000\000\000\135\006\038\009\154\000\038\009\
\154\000\052\001\054\001\000\000\017\255\012\001\042\001\007\001\
\083\007\000\000\083\007\224\007\000\000\237\006\083\007\083\007\
\175\007\175\007\133\007\000\000\083\007\083\007\056\006\000\000\
\083\007\000\000\083\007\027\001\083\007\124\007\124\007\083\007\
\237\006\237\006\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\001\108\000\000\000\058\008\000\000\023\001\000\000\028\001\
\000\000\005\000\151\000\151\000\005\000\000\000\000\000\180\008\
\000\000\135\006\000\000\175\007\000\000\000\000\074\000\074\000\
\074\000\083\007\000\000\000\000\018\001\000\000\000\000\137\255\
\000\000\026\001\118\000\044\001\000\000\066\005\000\000\000\000\
\000\000\000\000\000\000\252\000\000\000\000\000\252\000\000\000\
\000\000\252\000\000\000\100\001\000\000\032\001\000\000\039\001\
\083\007\083\007\135\006\056\001\054\001\000\000\005\000\000\000\
\021\001\038\255\058\001\000\000\000\000\000\000\043\001\054\001\
\000\000\065\001\090\255\067\001\107\001\069\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\009\014\009\154\000\
\014\009\154\000\000\000\135\006\211\255\000\000\059\001\000\000\
\000\000\073\001\068\001\074\001\060\001\049\001\098\001\087\009\
\074\000\074\000\074\000\142\255\066\005\154\000\154\000\082\001\
\154\000\154\000\154\000\086\001\154\000\250\004\154\000\000\000\
\000\000\000\000\000\000\000\000\038\009\038\009\000\000\000\000\
\136\001\124\007\083\007\000\000\085\001\000\000\135\006\000\000\
\135\006\000\000\000\000\014\009\221\008\000\000\000\000\135\006\
\154\000\000\000\154\000\000\000\083\007\000\000\066\001\000\000\
\124\007\124\007\000\000\072\001\096\255\000\000\026\001\000\000\
\049\000\088\000\154\000\075\001\000\000\000\000\000\000\154\000\
\000\000\000\000\000\000\154\000\000\000\149\001\091\001\127\001\
\060\000\000\000\000\000\000\000\175\007\083\007\000\000\000\000\
\093\001\000\000\104\001\000\000\014\009\014\009\000\000\000\000\
\068\001\000\000\102\001\110\001\000\000\000\000\087\009\124\007\
\124\007\000\000\154\000\084\001\154\000\096\001\101\001\000\000\
\109\001\114\001\000\000\174\000\000\000\000\000\174\000\000\000\
\000\000\174\000\174\000\000\000\000\000\186\006\186\006\014\009\
\000\000\154\000\000\000\096\255\096\255\105\001\000\000\108\001\
\000\000\154\000\154\000\154\000\174\000\174\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\103\001\000\000\
\000\000\154\000\154\000\116\001\121\001\133\001\075\255\134\001\
\135\001\119\001\000\000\000\000\074\000\115\001\120\001\122\001\
\000\000\166\001\127\255\000\000\000\000\123\001\185\000\037\001\
\000\000\129\001\127\255\000\000\126\001\192\000\025\000\205\001\
\142\001\147\001\127\255\000\000\140\001\000\000\146\001\038\000\
\064\000\000\000\225\001\228\001\000\000\000\000\148\001\025\000\
\000\000\025\000\000\000\000\000\000\000\171\001\172\001\181\001\
\182\001\025\000\025\000\000\000\000\000\000\000\000\000"

val yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\245\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\190\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\193\001\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\243\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\244\001\000\000\
\000\000\000\000\000\000\196\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\203\001\072\004\000\000\173\001\069\255\
\000\000\146\003\172\009\000\000\220\002\000\000\237\003\000\000\
\000\000\006\012\000\000\036\255\000\000\245\254\000\000\000\000\
\000\000\000\000\000\000\006\006\000\000\155\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\014\000\000\000\000\
\000\000\000\000\000\000\085\006\000\000\000\000\000\000\000\000\
\000\000\000\000\209\000\000\000\172\000\000\000\000\000\000\001\
\000\000\016\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\239\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\003\
\142\014\000\000\000\000\000\000\186\255\220\001\041\255\221\014\
\038\015\000\000\184\015\000\000\000\000\067\255\000\000\000\000\
\243\255\240\013\000\000\000\000\000\000\000\000\206\001\000\000\
\000\000\000\000\038\002\129\002\000\000\000\000\000\000\000\000\
\000\000\163\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\020\000\000\000\000\212\019\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\014\000\000\000\000\002\010\000\000\092\012\000\000\000\000\
\000\000\094\013\178\012\008\013\167\013\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\096\016\000\000\000\000\000\000\000\000\085\019\
\000\000\126\019\116\013\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\005\000\000\000\000\092\005\000\000\
\000\000\127\005\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\254\019\000\000\063\014\000\000\
\001\016\191\255\000\000\000\000\000\000\000\000\231\255\074\016\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\088\010\000\000\000\000\000\000\000\000\000\000\189\013\000\000\
\000\000\000\000\146\005\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\174\010\004\011\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\019\000\000\000\000\167\019\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\255\000\000\010\000\
\222\001\000\000\000\000\000\000\000\000\111\015\000\000\000\000\
\170\255\000\000\170\255\000\000\000\000\090\011\000\000\000\000\
\234\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\176\011\
\000\000\000\000\000\000\119\017\185\017\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\251\017\061\018\
\000\000\044\019\000\000\238\016\000\000\053\017\000\000\000\000\
\127\018\193\018\000\000\000\000\000\000\167\016\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\237\001\238\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

val yygindex = "\000\000\
\000\000\039\003\253\255\113\254\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\217\255\029\003\244\002\158\002\
\095\001\000\000\027\003\000\000\000\000\082\002\086\002\139\000\
\000\000\255\000\031\003\000\000\030\003\000\000\000\000\000\000\
\034\255\022\001\211\254\000\000\000\000\092\001\232\254\184\001\
\000\000\178\254\000\000\227\254\040\255\000\000\013\000\237\255\
\130\255\229\255\000\000\000\000\000\000\140\255\240\255\180\002\
\000\000\238\255\066\255\151\001\172\255\000\000\180\255\137\002\
\216\001\000\000\223\255\226\255\246\000\215\001\000\000\224\254\
\000\000\088\001\001\255\069\002\013\255\000\000\000\000\008\001\
\181\002\016\003\000\000\188\255\000\000\198\255\050\001\043\000\
\000\000\173\002\000\000\093\002\110\002\185\255\002\255\000\000\
\178\255\000\000\160\002\174\002\148\002\000\000\166\254\000\000\
\189\254\000\000\003\000\000\000\137\001\000\000\138\001\000\000\
\000\000\000\000"

val yytablesize = 5460
val yytable = "\015\000\
\016\000\096\000\158\000\070\001\097\000\136\000\080\001\104\001\
\107\001\193\000\161\001\129\001\230\000\111\001\185\000\022\000\
\026\000\030\000\190\000\190\000\141\001\120\000\021\000\123\000\
\133\000\187\000\188\000\065\000\221\000\022\000\026\000\118\001\
\112\000\114\000\119\000\022\001\119\000\124\000\136\001\137\001\
\002\001\082\001\001\000\234\001\025\000\155\000\007\001\007\001\
\007\001\003\000\009\001\198\000\009\001\138\000\235\000\143\000\
\009\001\148\000\214\000\206\001\207\001\017\000\209\001\210\001\
\211\001\007\001\213\001\007\001\016\001\232\000\214\000\159\000\
\226\000\161\000\108\001\109\001\009\001\107\000\168\000\168\000\
\202\000\205\001\017\001\168\000\168\000\250\000\008\001\255\000\
\004\000\205\000\214\000\014\001\014\001\219\000\180\001\223\000\
\045\002\007\001\138\001\007\001\223\000\246\000\214\000\007\001\
\247\000\171\001\083\001\175\001\214\000\220\000\133\000\046\002\
\242\000\214\000\081\001\214\000\107\000\249\001\041\001\007\001\
\198\001\250\001\031\002\007\001\175\000\135\001\168\000\155\000\
\113\000\225\001\236\000\227\001\012\000\013\000\014\000\048\001\
\138\000\205\000\205\000\205\000\062\001\057\001\029\000\235\001\
\236\000\059\001\049\001\143\001\230\001\026\000\041\001\205\000\
\205\000\205\000\205\000\205\000\138\000\019\000\168\000\168\000\
\168\000\041\001\041\001\168\000\014\001\041\001\096\000\144\001\
\092\001\097\000\038\000\223\001\018\001\201\001\055\002\202\001\
\005\002\040\000\240\001\241\001\200\001\012\000\013\000\014\000\
\037\002\038\002\019\001\238\000\020\001\064\000\028\001\012\000\
\013\000\014\000\114\001\110\001\008\002\044\001\043\000\225\000\
\168\000\123\001\203\001\020\000\117\001\229\000\117\001\061\001\
\185\000\205\001\039\001\190\000\133\000\056\001\168\000\012\000\
\013\000\014\000\168\000\225\000\119\000\220\000\069\001\076\001\
\124\000\069\001\167\001\168\001\198\000\168\000\012\000\013\000\
\014\000\225\000\031\000\206\000\068\002\134\001\012\000\013\000\
\014\000\168\000\107\000\094\001\077\002\096\001\058\001\014\001\
\050\001\014\001\124\001\125\001\236\000\168\000\236\000\168\000\
\053\001\107\000\107\000\168\000\168\000\198\000\160\001\028\002\
\030\002\168\000\168\000\168\000\236\000\168\000\236\000\168\000\
\033\000\168\000\027\002\029\002\168\000\198\000\169\001\060\001\
\021\000\021\000\066\002\032\000\207\000\208\000\004\002\007\001\
\134\000\073\002\121\001\122\001\034\000\133\001\237\000\184\001\
\063\001\209\000\210\000\211\000\212\000\213\000\103\001\066\000\
\107\000\121\000\239\000\127\000\237\000\107\000\168\000\183\001\
\137\000\064\001\135\000\069\001\069\001\069\001\139\001\021\000\
\239\000\134\000\239\000\107\000\107\000\013\001\149\000\043\001\
\062\002\031\001\207\000\208\000\014\001\158\000\050\002\139\000\
\032\001\015\001\043\001\043\001\021\000\063\002\025\000\066\001\
\134\000\063\001\021\000\033\001\041\001\168\000\168\000\168\000\
\072\002\144\000\226\001\186\001\228\001\134\000\034\001\134\000\
\035\001\080\002\064\001\231\001\134\000\243\001\202\000\036\001\
\037\001\012\000\067\001\014\000\084\001\068\001\134\000\087\001\
\107\000\089\002\090\001\153\000\181\001\081\002\044\001\154\000\
\168\000\094\002\095\002\082\002\000\002\001\002\065\001\057\000\
\066\001\012\000\013\000\014\000\199\000\069\001\069\001\069\001\
\204\001\058\000\076\001\076\001\245\001\076\001\076\001\076\001\
\200\000\076\001\168\000\218\001\197\001\150\000\151\000\059\000\
\060\000\202\000\012\000\067\001\014\000\194\000\068\001\168\000\
\061\000\174\000\182\000\168\000\198\000\168\000\189\000\189\000\
\012\000\013\000\014\000\201\000\168\000\119\000\222\001\233\001\
\047\000\047\000\248\000\146\001\042\001\249\000\147\001\107\000\
\047\001\117\001\117\001\047\000\203\000\244\001\246\001\247\001\
\175\000\021\002\029\001\030\001\076\001\237\001\238\001\204\000\
\076\001\047\000\047\000\202\000\209\000\210\000\211\000\212\000\
\213\000\174\000\047\000\205\000\134\000\044\000\044\000\215\000\
\150\001\151\001\152\001\153\001\154\001\155\001\156\001\157\001\
\044\000\085\001\022\002\093\001\088\001\095\001\224\000\014\002\
\216\000\016\002\012\000\013\000\014\000\202\000\044\000\044\000\
\032\002\033\002\253\000\197\001\012\002\013\002\253\000\044\000\
\051\001\052\001\168\000\168\000\025\002\026\002\233\001\012\000\
\013\000\014\000\027\001\159\001\039\000\039\000\036\002\076\001\
\076\001\012\000\060\002\014\000\044\000\225\000\226\000\039\000\
\012\000\070\002\014\000\227\000\042\000\042\000\040\002\041\002\
\228\000\134\000\229\000\253\000\231\000\039\000\039\000\042\000\
\233\000\069\001\234\000\241\000\236\000\134\000\039\000\056\002\
\175\000\175\000\237\000\061\002\069\001\042\000\042\000\056\002\
\239\000\000\001\071\002\069\001\240\000\245\000\042\000\056\002\
\253\000\003\001\005\001\039\000\004\001\006\001\011\001\010\001\
\012\001\021\001\023\001\091\001\069\001\024\001\069\001\025\001\
\097\001\026\001\222\000\007\001\062\002\099\001\069\001\069\001\
\101\001\098\001\119\001\126\001\130\001\131\001\145\001\106\001\
\142\001\063\002\100\001\066\001\106\001\112\001\031\001\064\002\
\115\001\070\000\115\001\165\001\253\000\032\001\148\001\189\000\
\164\001\071\000\166\001\042\001\134\000\170\001\134\000\172\001\
\033\001\072\000\173\001\073\000\177\001\012\000\067\001\014\000\
\174\001\068\001\176\001\034\001\178\001\035\001\186\001\187\001\
\185\001\188\001\190\001\189\001\036\001\037\001\208\001\078\000\
\079\000\191\001\212\001\221\001\224\001\239\001\236\001\251\001\
\253\001\248\001\219\001\220\001\254\001\080\000\081\000\130\000\
\006\002\083\000\015\002\135\000\135\000\009\002\039\002\135\000\
\135\000\134\000\134\000\007\002\010\002\135\000\017\002\086\000\
\019\002\042\002\135\000\018\002\135\000\020\002\043\002\034\002\
\253\000\253\000\035\002\012\000\013\000\014\000\089\000\090\000\
\135\000\135\000\044\002\047\002\048\002\049\002\052\002\051\002\
\053\002\135\000\054\002\135\000\069\002\187\000\067\002\059\002\
\075\002\187\000\074\002\187\000\187\000\076\002\187\000\187\000\
\187\000\187\000\134\000\134\000\187\000\187\000\187\000\187\000\
\079\002\187\000\187\000\187\000\187\000\078\002\083\002\187\000\
\187\000\084\002\187\000\187\000\187\000\085\002\090\002\091\002\
\187\000\187\000\092\002\093\002\010\000\174\000\187\000\187\000\
\187\000\187\000\026\000\187\000\187\000\134\000\030\000\015\000\
\037\000\022\000\106\001\122\000\140\000\187\000\187\000\187\000\
\187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
\187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
\187\000\231\000\187\000\045\001\251\000\187\000\187\000\187\000\
\187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
\183\000\005\000\093\000\095\000\183\000\018\000\183\000\183\000\
\027\000\183\000\183\000\183\000\183\000\152\000\243\000\183\000\
\183\000\183\000\183\000\067\000\183\000\183\000\183\000\183\000\
\089\001\086\001\183\000\183\000\122\000\183\000\183\000\183\000\
\128\000\199\001\011\002\183\000\183\000\065\002\244\000\232\001\
\043\001\183\000\183\000\183\000\183\000\179\001\183\000\183\000\
\182\001\120\001\001\001\160\000\009\001\115\001\115\001\102\001\
\183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\183\000\183\000\183\000\183\000\105\001\183\000\054\001\079\001\
\183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\183\000\183\000\183\000\184\000\023\002\055\001\000\000\184\000\
\024\002\184\000\184\000\000\000\184\000\184\000\184\000\184\000\
\000\000\000\000\184\000\184\000\184\000\184\000\000\000\184\000\
\184\000\184\000\184\000\000\000\000\000\184\000\184\000\000\000\
\184\000\184\000\184\000\000\000\000\000\000\000\184\000\184\000\
\000\000\000\000\000\000\000\000\184\000\184\000\184\000\184\000\
\000\000\184\000\184\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\184\000\184\000\184\000\184\000\184\000\
\184\000\184\000\184\000\184\000\184\000\184\000\184\000\184\000\
\184\000\184\000\184\000\184\000\184\000\184\000\184\000\000\000\
\184\000\000\000\000\000\184\000\184\000\184\000\184\000\184\000\
\184\000\184\000\184\000\184\000\184\000\184\000\189\000\000\000\
\000\000\000\000\189\000\000\000\189\000\189\000\000\000\189\000\
\189\000\189\000\189\000\000\000\000\000\189\000\189\000\000\000\
\189\000\000\000\189\000\189\000\189\000\189\000\000\000\000\000\
\189\000\189\000\000\000\189\000\189\000\189\000\000\000\000\000\
\000\000\189\000\189\000\000\000\000\000\000\000\000\000\189\000\
\189\000\189\000\189\000\000\000\189\000\189\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\189\000\189\000\
\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\
\189\000\189\000\189\000\189\000\189\000\189\000\189\000\000\000\
\189\000\189\000\000\000\189\000\000\000\000\000\189\000\189\000\
\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\
\189\000\165\000\000\000\000\000\000\000\165\000\000\000\165\000\
\165\000\000\000\165\000\165\000\165\000\165\000\000\000\000\000\
\165\000\165\000\000\000\165\000\000\000\165\000\165\000\165\000\
\165\000\000\000\000\000\165\000\165\000\000\000\165\000\165\000\
\165\000\000\000\000\000\000\000\165\000\165\000\000\000\000\000\
\000\000\000\000\165\000\165\000\165\000\165\000\000\000\165\000\
\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\000\000\165\000\165\000\165\000\165\000\165\000\165\000\000\000\
\000\000\165\000\165\000\165\000\165\000\165\000\000\000\165\000\
\165\000\165\000\165\000\165\000\195\000\000\000\000\000\000\000\
\195\000\000\000\195\000\195\000\000\000\195\000\195\000\195\000\
\195\000\000\000\000\000\195\000\195\000\000\000\195\000\000\000\
\195\000\195\000\195\000\195\000\000\000\000\000\195\000\195\000\
\000\000\195\000\195\000\195\000\000\000\000\000\000\000\195\000\
\195\000\000\000\000\000\000\000\000\000\195\000\195\000\195\000\
\195\000\000\000\195\000\195\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\195\000\195\000\195\000\195\000\
\195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
\195\000\000\000\195\000\195\000\195\000\000\000\195\000\195\000\
\000\000\195\000\000\000\000\000\195\000\195\000\195\000\195\000\
\195\000\195\000\195\000\195\000\195\000\195\000\195\000\199\000\
\000\000\000\000\000\000\199\000\000\000\199\000\199\000\000\000\
\199\000\199\000\199\000\199\000\000\000\000\000\199\000\199\000\
\000\000\199\000\000\000\199\000\199\000\199\000\199\000\000\000\
\000\000\199\000\199\000\000\000\199\000\199\000\199\000\000\000\
\000\000\000\000\199\000\199\000\000\000\000\000\000\000\000\000\
\199\000\199\000\199\000\199\000\000\000\199\000\199\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\199\000\
\199\000\199\000\199\000\199\000\199\000\000\000\199\000\199\000\
\199\000\199\000\199\000\199\000\000\000\199\000\199\000\199\000\
\000\000\199\000\199\000\000\000\199\000\000\000\000\000\199\000\
\199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
\199\000\199\000\202\000\000\000\000\000\000\000\202\000\000\000\
\202\000\202\000\000\000\202\000\202\000\202\000\202\000\000\000\
\000\000\202\000\202\000\000\000\202\000\000\000\202\000\202\000\
\202\000\202\000\000\000\000\000\202\000\202\000\000\000\202\000\
\202\000\202\000\000\000\000\000\000\000\202\000\202\000\000\000\
\000\000\000\000\000\000\202\000\202\000\202\000\202\000\000\000\
\202\000\202\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\202\000\202\000\202\000\202\000\202\000\202\000\
\000\000\202\000\000\000\202\000\202\000\202\000\202\000\000\000\
\202\000\202\000\202\000\000\000\202\000\202\000\000\000\202\000\
\000\000\000\000\202\000\202\000\202\000\202\000\202\000\202\000\
\202\000\202\000\202\000\202\000\202\000\203\000\000\000\000\000\
\000\000\203\000\000\000\203\000\203\000\000\000\203\000\203\000\
\203\000\203\000\000\000\000\000\203\000\203\000\000\000\203\000\
\000\000\203\000\203\000\203\000\203\000\000\000\000\000\203\000\
\203\000\000\000\203\000\203\000\203\000\000\000\000\000\000\000\
\203\000\203\000\000\000\000\000\000\000\000\000\203\000\203\000\
\203\000\203\000\000\000\203\000\203\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\203\000\203\000\203\000\
\203\000\203\000\203\000\000\000\203\000\000\000\203\000\203\000\
\203\000\203\000\000\000\203\000\203\000\203\000\000\000\203\000\
\203\000\000\000\203\000\000\000\000\000\203\000\203\000\203\000\
\203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
\070\000\162\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\163\000\000\000\000\000\164\000\165\000\000\000\
\072\000\000\000\073\000\166\000\167\000\149\001\000\000\000\000\
\000\000\075\000\076\000\077\000\000\000\000\000\000\000\000\000\
\035\000\035\000\000\000\000\000\000\000\000\000\078\000\079\000\
\000\000\000\000\000\000\035\000\150\001\151\001\152\001\153\001\
\154\001\155\001\156\001\157\001\080\000\081\000\158\001\000\000\
\083\000\035\000\035\000\000\000\000\000\000\000\084\000\085\000\
\000\000\000\000\035\000\000\000\000\000\000\000\086\000\000\000\
\070\000\000\000\087\000\088\000\000\000\000\000\000\000\000\000\
\071\000\000\000\012\000\013\000\014\000\089\000\090\000\159\001\
\072\000\000\000\073\000\000\000\000\000\149\001\000\000\000\000\
\000\000\075\000\076\000\077\000\000\000\000\000\000\000\000\000\
\036\000\036\000\000\000\000\000\000\000\000\000\078\000\079\000\
\000\000\000\000\000\000\036\000\150\001\151\001\152\001\153\001\
\154\001\155\001\156\001\157\001\080\000\081\000\158\001\000\000\
\083\000\036\000\036\000\000\000\000\000\000\000\084\000\085\000\
\000\000\000\000\036\000\034\000\034\000\000\000\086\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\
\165\000\000\000\012\000\013\000\014\000\089\000\090\000\159\001\
\165\000\000\000\000\000\000\000\034\000\034\000\165\000\000\000\
\165\000\000\000\165\000\000\000\000\000\034\000\000\000\000\000\
\000\000\165\000\165\000\165\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\165\000\165\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\165\000\165\000\165\000\000\000\
\165\000\005\000\165\000\000\000\165\000\000\000\165\000\165\000\
\165\000\165\000\165\000\000\000\000\000\165\000\165\000\000\000\
\165\000\165\000\000\000\000\000\165\000\165\000\165\000\165\000\
\165\000\000\000\165\000\165\000\165\000\165\000\165\000\070\000\
\162\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\
\000\000\163\000\000\000\000\000\164\000\165\000\000\000\072\000\
\000\000\073\000\166\000\167\000\074\000\000\000\000\000\000\000\
\075\000\076\000\077\000\000\000\000\000\000\000\129\000\129\000\
\000\000\000\000\129\000\129\000\000\000\078\000\079\000\000\000\
\129\000\000\000\129\000\000\000\000\000\129\000\000\000\129\000\
\000\000\000\000\000\000\080\000\081\000\082\000\000\000\083\000\
\000\000\000\000\000\000\129\000\129\000\084\000\085\000\000\000\
\000\000\000\000\000\000\000\000\129\000\086\000\129\000\000\000\
\000\000\087\000\088\000\000\000\000\000\000\000\070\000\162\000\
\000\000\012\000\013\000\014\000\089\000\090\000\071\000\000\000\
\163\000\000\000\000\000\164\000\165\000\000\000\072\000\000\000\
\073\000\166\000\167\000\000\000\000\000\000\000\000\000\075\000\
\076\000\077\000\000\000\000\000\000\000\125\000\125\000\000\000\
\000\000\125\000\125\000\000\000\078\000\079\000\000\000\125\000\
\000\000\125\000\000\000\000\000\125\000\000\000\125\000\000\000\
\000\000\000\000\080\000\081\000\130\000\000\000\083\000\113\001\
\000\000\000\000\125\000\125\000\084\000\085\000\000\000\000\000\
\000\000\000\000\000\000\125\000\086\000\125\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\070\000\162\000\000\000\
\012\000\013\000\014\000\089\000\090\000\071\000\000\000\163\000\
\000\000\000\000\164\000\165\000\000\000\072\000\000\000\073\000\
\166\000\167\000\000\000\000\000\000\000\000\000\075\000\076\000\
\077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\078\000\079\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\070\000\080\000\081\000\130\000\000\000\083\000\000\000\000\000\
\071\000\000\000\000\000\084\000\085\000\164\000\165\000\000\000\
\072\000\000\000\073\000\086\000\000\000\074\000\000\000\000\000\
\000\000\075\000\076\000\077\000\000\000\000\000\000\000\012\000\
\013\000\014\000\089\000\090\000\000\000\000\000\078\000\079\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\070\000\080\000\081\000\082\000\000\000\
\083\000\000\000\000\000\071\000\000\000\000\000\084\000\085\000\
\000\000\000\000\000\000\072\000\000\000\073\000\086\000\000\000\
\074\000\000\000\087\000\088\000\075\000\076\000\077\000\000\000\
\000\000\000\000\012\000\013\000\014\000\089\000\090\000\000\000\
\000\000\078\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\000\080\000\
\081\000\082\000\000\000\083\000\000\000\000\000\071\000\000\000\
\000\000\084\000\085\000\164\000\165\000\000\000\072\000\000\000\
\073\000\086\000\000\000\000\000\000\000\087\000\088\000\075\000\
\076\000\077\000\000\000\000\000\000\000\012\000\013\000\014\000\
\089\000\090\000\000\000\000\000\078\000\079\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\080\000\081\000\130\000\000\000\083\000\181\000\
\000\000\071\000\000\000\000\000\084\000\085\000\164\000\165\000\
\000\000\072\000\000\000\073\000\086\000\000\000\000\000\000\000\
\000\000\000\000\075\000\076\000\077\000\000\000\000\000\000\000\
\012\000\013\000\014\000\089\000\090\000\000\000\000\000\078\000\
\079\000\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\000\070\000\000\000\080\000\081\000\130\000\
\000\000\083\000\072\000\071\000\073\000\000\000\000\000\084\000\
\085\000\000\000\000\000\072\000\000\000\073\000\000\000\086\000\
\074\000\000\000\000\000\000\000\075\000\076\000\077\000\000\000\
\078\000\079\000\000\000\012\000\013\000\014\000\089\000\090\000\
\000\000\078\000\079\000\000\000\000\000\070\000\080\000\081\000\
\130\000\000\000\083\000\000\000\000\000\071\000\000\000\080\000\
\081\000\082\000\164\000\083\000\000\000\072\000\000\000\073\000\
\086\000\084\000\085\000\000\000\000\000\000\000\075\000\076\000\
\077\000\086\000\000\000\000\000\012\000\013\000\014\000\089\000\
\090\000\000\000\000\000\078\000\079\000\012\000\013\000\014\000\
\089\000\090\000\000\000\000\000\000\000\000\000\070\000\000\000\
\000\000\080\000\081\000\130\000\000\000\083\000\071\000\000\000\
\000\000\000\000\000\000\084\000\085\000\000\000\072\000\000\000\
\073\000\000\000\000\000\086\000\000\000\000\000\000\000\075\000\
\076\000\077\000\000\000\000\000\000\000\000\000\000\000\012\000\
\013\000\014\000\089\000\090\000\078\000\079\000\000\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\
\000\000\000\000\080\000\081\000\130\000\000\000\083\000\072\000\
\000\000\073\000\000\000\000\000\084\000\085\000\000\000\000\000\
\075\000\076\000\077\000\000\000\086\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\078\000\079\000\000\000\
\012\000\013\000\014\000\089\000\090\000\000\000\000\000\000\000\
\070\000\000\000\000\000\080\000\081\000\130\000\000\000\083\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\000\000\073\000\000\000\000\000\086\000\000\000\217\000\
\000\000\075\000\076\000\077\000\000\000\218\000\000\000\000\000\
\000\000\012\000\013\000\014\000\089\000\090\000\078\000\079\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\000\000\000\000\080\000\081\000\130\000\000\000\
\083\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\000\000\000\073\000\000\000\127\001\086\000\000\000\
\128\001\070\000\075\000\076\000\077\000\000\000\129\000\000\000\
\000\000\071\000\012\000\013\000\014\000\089\000\090\000\078\000\
\079\000\072\000\000\000\073\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\076\000\077\000\080\000\081\000\130\000\
\000\000\083\000\000\000\000\000\000\000\000\000\000\000\078\000\
\079\000\000\000\000\000\000\000\000\000\000\000\000\000\086\000\
\000\000\000\000\070\000\000\000\000\000\080\000\081\000\130\000\
\000\000\083\000\071\000\012\000\013\000\014\000\089\000\090\000\
\000\000\000\000\072\000\000\000\073\000\000\000\000\000\086\000\
\000\000\000\000\000\000\075\000\076\000\077\000\000\000\222\000\
\000\000\000\000\000\000\012\000\013\000\014\000\089\000\090\000\
\078\000\079\000\000\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\000\000\000\000\080\000\081\000\
\130\000\000\000\083\000\072\000\000\000\073\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\076\000\077\000\000\000\
\086\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\132\001\078\000\079\000\000\000\012\000\013\000\014\000\089\000\
\090\000\000\000\000\000\000\000\070\000\000\000\000\000\080\000\
\081\000\130\000\000\000\083\000\071\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\000\000\000\073\000\000\000\
\229\001\086\000\000\000\000\000\070\000\075\000\076\000\077\000\
\000\000\000\000\000\000\000\000\071\000\012\000\013\000\014\000\
\089\000\090\000\078\000\079\000\072\000\000\000\073\000\000\000\
\000\000\000\000\000\000\000\000\000\000\075\000\000\000\077\000\
\080\000\081\000\130\000\000\000\083\000\000\000\000\000\000\000\
\000\000\000\000\078\000\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\086\000\000\000\000\000\070\000\000\000\000\000\
\080\000\081\000\130\000\000\000\083\000\071\000\012\000\013\000\
\014\000\089\000\090\000\000\000\000\000\072\000\000\000\073\000\
\000\000\000\000\086\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\013\000\
\014\000\089\000\090\000\078\000\079\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\080\000\081\000\130\000\000\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\086\000\000\000\000\000\000\000\000\000\
\000\000\193\001\194\001\000\000\000\000\000\000\204\000\012\000\
\013\000\014\000\089\000\090\000\204\000\204\000\000\000\204\000\
\204\000\204\000\000\000\000\000\000\000\204\000\204\000\000\000\
\204\000\000\000\000\000\204\000\000\000\204\000\000\000\000\000\
\204\000\204\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\204\000\204\000\000\000\000\000\000\000\000\000\204\000\
\000\000\000\000\204\000\000\000\204\000\204\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\204\000\000\000\204\000\000\000\204\000\000\000\204\000\
\204\000\204\000\204\000\000\000\204\000\204\000\204\000\000\000\
\000\000\204\000\000\000\204\000\000\000\000\000\204\000\204\000\
\204\000\204\000\204\000\204\000\143\000\000\000\000\000\000\000\
\000\000\000\000\143\000\143\000\000\000\143\000\143\000\143\000\
\000\000\000\000\000\000\143\000\143\000\000\000\143\000\000\000\
\000\000\143\000\000\000\143\000\000\000\000\000\143\000\143\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\
\143\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\
\143\000\000\000\143\000\143\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\
\000\000\143\000\000\000\143\000\000\000\143\000\143\000\143\000\
\143\000\000\000\143\000\143\000\143\000\000\000\000\000\143\000\
\000\000\143\000\000\000\000\000\143\000\143\000\143\000\143\000\
\143\000\143\000\147\000\000\000\000\000\000\000\000\000\000\000\
\147\000\147\000\000\000\147\000\147\000\147\000\000\000\000\000\
\000\000\147\000\147\000\000\000\147\000\000\000\000\000\147\000\
\000\000\147\000\000\000\000\000\147\000\147\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\147\000\147\000\000\000\
\000\000\000\000\000\000\147\000\000\000\000\000\147\000\000\000\
\147\000\147\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\147\000\000\000\147\000\
\000\000\147\000\000\000\147\000\147\000\147\000\147\000\000\000\
\147\000\147\000\147\000\000\000\000\000\147\000\000\000\147\000\
\000\000\000\000\147\000\147\000\147\000\147\000\147\000\147\000\
\145\000\000\000\000\000\000\000\000\000\000\000\145\000\145\000\
\000\000\145\000\145\000\145\000\000\000\000\000\000\000\145\000\
\145\000\000\000\145\000\000\000\000\000\145\000\000\000\145\000\
\000\000\000\000\145\000\145\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\145\000\145\000\000\000\000\000\000\000\
\000\000\145\000\000\000\000\000\145\000\000\000\145\000\145\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\145\000\000\000\145\000\000\000\145\000\
\000\000\145\000\145\000\145\000\145\000\000\000\145\000\145\000\
\145\000\000\000\000\000\145\000\000\000\145\000\000\000\000\000\
\145\000\145\000\145\000\145\000\145\000\145\000\144\000\000\000\
\000\000\000\000\000\000\000\000\144\000\144\000\000\000\144\000\
\144\000\144\000\000\000\000\000\000\000\144\000\144\000\000\000\
\144\000\000\000\000\000\144\000\000\000\144\000\000\000\000\000\
\144\000\144\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\144\000\144\000\000\000\000\000\000\000\000\000\144\000\
\000\000\000\000\144\000\000\000\144\000\144\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\144\000\000\000\144\000\000\000\144\000\000\000\144\000\
\144\000\144\000\144\000\000\000\144\000\144\000\144\000\000\000\
\000\000\144\000\000\000\144\000\000\000\000\000\144\000\144\000\
\144\000\144\000\144\000\144\000\148\000\000\000\000\000\000\000\
\000\000\000\000\148\000\148\000\000\000\148\000\148\000\148\000\
\000\000\000\000\000\000\148\000\148\000\000\000\148\000\000\000\
\000\000\148\000\000\000\148\000\000\000\000\000\148\000\148\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\148\000\
\148\000\000\000\000\000\000\000\000\000\148\000\000\000\000\000\
\148\000\000\000\148\000\148\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\148\000\
\000\000\148\000\000\000\148\000\000\000\148\000\148\000\148\000\
\148\000\000\000\148\000\148\000\148\000\000\000\000\000\148\000\
\000\000\148\000\000\000\000\000\148\000\148\000\148\000\148\000\
\148\000\148\000\146\000\000\000\000\000\000\000\000\000\000\000\
\146\000\146\000\000\000\146\000\146\000\146\000\000\000\000\000\
\000\000\146\000\146\000\000\000\146\000\000\000\000\000\146\000\
\000\000\146\000\000\000\000\000\146\000\146\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\146\000\146\000\000\000\
\000\000\000\000\000\000\146\000\000\000\000\000\146\000\000\000\
\146\000\146\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\146\000\000\000\146\000\
\000\000\146\000\000\000\146\000\146\000\146\000\146\000\000\000\
\146\000\146\000\146\000\000\000\000\000\146\000\000\000\146\000\
\000\000\000\000\146\000\146\000\146\000\146\000\146\000\146\000\
\211\000\000\000\000\000\000\000\000\000\000\000\211\000\211\000\
\000\000\211\000\211\000\211\000\000\000\000\000\000\000\211\000\
\211\000\000\000\211\000\000\000\000\000\211\000\000\000\211\000\
\000\000\000\000\211\000\211\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\211\000\211\000\000\000\000\000\000\000\
\000\000\211\000\000\000\000\000\211\000\000\000\211\000\211\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\211\000\000\000\211\000\000\000\211\000\
\000\000\211\000\000\000\211\000\211\000\000\000\211\000\211\000\
\211\000\000\000\000\000\211\000\000\000\211\000\000\000\000\000\
\211\000\211\000\211\000\211\000\211\000\211\000\149\000\000\000\
\000\000\000\000\000\000\000\000\149\000\149\000\000\000\149\000\
\149\000\149\000\000\000\000\000\000\000\149\000\149\000\000\000\
\149\000\000\000\000\000\149\000\000\000\149\000\000\000\000\000\
\149\000\149\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\149\000\149\000\000\000\000\000\000\000\000\000\149\000\
\000\000\000\000\149\000\000\000\149\000\149\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\149\000\000\000\149\000\000\000\149\000\000\000\149\000\
\149\000\000\000\149\000\000\000\149\000\149\000\149\000\000\000\
\000\000\149\000\000\000\149\000\000\000\000\000\149\000\149\000\
\149\000\149\000\149\000\149\000\212\000\000\000\000\000\000\000\
\000\000\000\000\212\000\212\000\000\000\212\000\212\000\212\000\
\000\000\000\000\000\000\212\000\212\000\000\000\212\000\000\000\
\000\000\212\000\000\000\212\000\000\000\000\000\212\000\212\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\212\000\
\212\000\000\000\000\000\000\000\000\000\212\000\000\000\000\000\
\212\000\000\000\212\000\212\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\212\000\
\000\000\212\000\000\000\212\000\000\000\212\000\000\000\212\000\
\212\000\000\000\212\000\212\000\212\000\000\000\000\000\212\000\
\000\000\212\000\000\000\000\000\212\000\212\000\212\000\212\000\
\212\000\212\000\213\000\000\000\000\000\000\000\000\000\000\000\
\213\000\213\000\000\000\213\000\213\000\213\000\000\000\000\000\
\000\000\213\000\213\000\000\000\213\000\000\000\000\000\213\000\
\000\000\213\000\000\000\000\000\213\000\213\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\213\000\213\000\000\000\
\000\000\000\000\000\000\213\000\000\000\000\000\213\000\000\000\
\213\000\213\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\213\000\000\000\213\000\
\000\000\213\000\000\000\213\000\000\000\213\000\213\000\000\000\
\213\000\213\000\213\000\000\000\000\000\213\000\000\000\213\000\
\000\000\000\000\213\000\213\000\213\000\213\000\213\000\213\000\
\003\001\000\000\000\000\000\000\000\000\000\000\003\001\003\001\
\000\000\003\001\003\001\003\001\000\000\000\000\000\000\003\001\
\003\001\000\000\000\000\000\000\000\000\003\001\000\000\003\001\
\000\000\000\000\003\001\003\001\072\000\072\000\000\000\000\000\
\072\000\072\000\000\000\003\001\003\001\000\000\072\000\000\000\
\000\000\003\001\000\000\072\000\003\001\072\000\003\001\003\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\072\000\072\000\003\001\000\000\003\001\000\000\003\001\
\000\000\003\001\072\000\000\000\072\000\000\000\003\001\003\001\
\003\001\002\001\000\000\003\001\000\000\003\001\000\000\002\001\
\002\001\072\000\002\001\002\001\002\001\003\001\000\000\072\000\
\002\001\002\001\000\000\000\000\000\000\000\000\002\001\127\000\
\002\001\000\000\000\000\002\001\002\001\127\000\127\000\000\000\
\000\000\127\000\127\000\000\000\002\001\002\001\000\000\127\000\
\000\000\127\000\002\001\000\000\127\000\002\001\127\000\002\001\
\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\127\000\127\000\002\001\000\000\002\001\000\000\
\002\001\000\000\002\001\127\000\000\000\127\000\000\000\002\001\
\002\001\002\001\214\000\000\000\002\001\000\000\002\001\000\000\
\214\000\214\000\000\000\214\000\214\000\214\000\002\001\000\000\
\000\000\214\000\214\000\000\000\214\000\000\000\000\000\214\000\
\000\000\214\000\000\000\000\000\214\000\214\000\018\001\018\001\
\000\000\000\000\018\001\018\001\000\000\214\000\214\000\000\000\
\018\001\000\000\000\000\214\000\000\000\018\001\214\000\018\001\
\214\000\214\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\001\018\001\214\000\000\000\214\000\
\000\000\214\000\000\000\214\000\018\001\000\000\018\001\000\000\
\214\000\000\000\214\000\000\000\000\000\214\000\000\000\214\000\
\000\000\215\000\214\000\214\000\214\000\214\000\214\000\215\000\
\215\000\000\000\215\000\215\000\215\000\000\000\000\000\000\000\
\215\000\215\000\000\000\215\000\000\000\000\000\215\000\000\000\
\215\000\000\000\000\000\215\000\215\000\151\000\151\000\000\000\
\000\000\151\000\151\000\000\000\215\000\215\000\000\000\151\000\
\000\000\000\000\215\000\000\000\151\000\215\000\151\000\215\000\
\215\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\151\000\151\000\215\000\000\000\215\000\000\000\
\215\000\000\000\215\000\151\000\000\000\151\000\000\000\215\000\
\000\000\215\000\000\000\000\000\215\000\000\000\215\000\000\000\
\216\000\215\000\215\000\215\000\215\000\215\000\216\000\216\000\
\000\000\216\000\216\000\216\000\000\000\000\000\000\000\216\000\
\216\000\000\000\216\000\000\000\000\000\216\000\000\000\216\000\
\000\000\000\000\216\000\216\000\035\000\036\000\000\000\000\000\
\000\000\037\000\000\000\216\000\216\000\000\000\038\000\000\000\
\000\000\216\000\000\000\039\000\216\000\040\000\216\000\216\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\042\000\216\000\000\000\216\000\000\000\216\000\
\000\000\216\000\043\000\000\000\044\000\000\000\000\000\000\000\
\216\000\000\000\000\000\216\000\000\000\216\000\000\000\220\000\
\216\000\216\000\216\000\216\000\216\000\220\000\220\000\000\000\
\220\000\220\000\220\000\000\000\000\000\000\000\220\000\220\000\
\000\000\220\000\000\000\000\000\220\000\000\000\220\000\000\000\
\000\000\220\000\220\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\220\000\220\000\000\000\000\000\000\000\000\000\
\220\000\000\000\000\000\220\000\000\000\220\000\220\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\220\000\000\000\220\000\000\000\220\000\000\000\
\220\000\000\000\000\000\000\000\000\000\000\000\000\000\220\000\
\222\000\000\000\220\000\000\000\220\000\000\000\222\000\222\000\
\000\000\222\000\222\000\222\000\000\000\000\000\000\000\222\000\
\222\000\000\000\000\000\000\000\000\000\222\000\000\000\222\000\
\000\000\000\000\222\000\222\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\222\000\222\000\000\000\000\000\000\000\
\000\000\222\000\000\000\000\000\222\000\000\000\222\000\222\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\222\000\000\000\222\000\000\000\222\000\
\000\000\222\000\000\000\000\000\000\000\000\000\000\000\000\000\
\222\000\223\000\000\000\222\000\000\000\222\000\000\000\223\000\
\223\000\000\000\223\000\223\000\223\000\000\000\000\000\000\000\
\223\000\223\000\000\000\000\000\000\000\000\000\223\000\000\000\
\223\000\000\000\000\000\223\000\223\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\223\000\223\000\000\000\000\000\
\000\000\000\000\223\000\000\000\000\000\223\000\000\000\223\000\
\223\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\223\000\000\000\223\000\000\000\
\223\000\000\000\223\000\000\000\000\000\000\000\000\000\000\000\
\000\000\223\000\229\000\000\000\223\000\000\000\223\000\000\000\
\229\000\229\000\000\000\229\000\229\000\229\000\000\000\000\000\
\000\000\229\000\229\000\000\000\000\000\000\000\000\000\229\000\
\000\000\229\000\000\000\000\000\229\000\229\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\229\000\229\000\000\000\
\000\000\000\000\000\000\229\000\000\000\000\000\229\000\000\000\
\229\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\229\000\000\000\229\000\
\000\000\229\000\000\000\229\000\000\000\000\000\000\000\000\000\
\000\000\000\000\229\000\230\000\000\000\229\000\000\000\229\000\
\000\000\230\000\230\000\000\000\230\000\230\000\230\000\000\000\
\000\000\000\000\230\000\230\000\000\000\000\000\000\000\000\000\
\230\000\000\000\230\000\000\000\000\000\230\000\230\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\230\000\230\000\
\000\000\000\000\000\000\000\000\230\000\000\000\000\000\230\000\
\000\000\230\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\230\000\000\000\
\230\000\000\000\230\000\000\000\230\000\000\000\000\000\000\000\
\000\000\000\000\000\000\230\000\238\000\000\000\230\000\000\000\
\230\000\000\000\238\000\238\000\000\000\238\000\238\000\238\000\
\000\000\000\000\000\000\238\000\238\000\000\000\000\000\000\000\
\000\000\238\000\000\000\238\000\000\000\000\000\238\000\000\000\
\057\000\057\000\057\000\000\000\057\000\057\000\000\000\238\000\
\238\000\000\000\057\000\000\000\000\000\238\000\000\000\057\000\
\238\000\057\000\238\000\000\000\000\000\000\000\057\000\000\000\
\000\000\000\000\000\000\000\000\057\000\057\000\057\000\238\000\
\000\000\238\000\000\000\238\000\000\000\238\000\057\000\000\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\
\000\000\238\000\000\000\000\000\000\000\057\000\000\000\000\000\
\000\000\000\000\057\000\057\000\057\000\057\000\000\000\000\000\
\057\000\000\000\000\000\000\000\000\000\057\000\003\000\088\000\
\088\000\088\000\000\000\088\000\088\000\000\000\000\000\000\000\
\000\000\088\000\000\000\000\000\000\000\000\000\088\000\000\000\
\088\000\000\000\000\000\000\000\000\000\088\000\000\000\000\000\
\000\000\000\000\000\000\088\000\088\000\088\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\000\000\000\088\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\088\000\000\000\000\000\000\000\
\000\000\088\000\088\000\088\000\088\000\000\000\000\000\088\000\
\000\000\000\000\000\000\000\000\088\000\003\000\077\000\077\000\
\077\000\000\000\077\000\077\000\000\000\000\000\000\000\000\000\
\077\000\000\000\000\000\000\000\000\000\077\000\000\000\077\000\
\000\000\000\000\000\000\000\000\077\000\000\000\000\000\000\000\
\000\000\000\000\077\000\077\000\077\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\077\000\000\000\077\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\000\000\000\000\000\000\000\000\000\
\000\000\077\000\077\000\077\000\000\000\000\000\077\000\000\000\
\000\000\000\000\000\000\077\000\003\000\087\000\087\000\087\000\
\000\000\087\000\087\000\000\000\000\000\000\000\000\000\087\000\
\000\000\000\000\000\000\000\000\087\000\000\000\087\000\000\000\
\000\000\000\000\000\000\087\000\000\000\000\000\000\000\000\000\
\000\000\087\000\087\000\087\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\087\000\000\000\087\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\087\000\000\000\000\000\000\000\000\000\087\000\
\087\000\087\000\087\000\000\000\000\000\087\000\000\000\102\000\
\102\000\102\000\087\000\102\000\102\000\000\000\000\000\000\000\
\000\000\102\000\000\000\000\000\000\000\000\000\102\000\000\000\
\102\000\000\000\000\000\000\000\000\000\102\000\000\000\000\000\
\000\000\000\000\000\000\102\000\102\000\102\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\102\000\000\000\102\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\102\000\000\000\000\000\000\000\
\000\000\000\000\102\000\102\000\102\000\000\000\000\000\102\000\
\000\000\103\000\103\000\103\000\102\000\103\000\103\000\000\000\
\000\000\000\000\000\000\103\000\000\000\000\000\000\000\000\000\
\103\000\000\000\103\000\000\000\000\000\000\000\000\000\103\000\
\000\000\000\000\000\000\000\000\000\000\103\000\103\000\103\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\103\000\
\000\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\103\000\000\000\
\000\000\000\000\000\000\000\000\103\000\103\000\103\000\000\000\
\000\000\103\000\000\000\076\000\076\000\076\000\103\000\076\000\
\076\000\000\000\000\000\000\000\000\000\076\000\000\000\000\000\
\000\000\000\000\076\000\000\000\076\000\000\000\000\000\000\000\
\000\000\076\000\000\000\000\000\000\000\000\000\000\000\076\000\
\076\000\076\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\000\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\076\000\000\000\000\000\000\000\000\000\000\000\076\000\076\000\
\076\000\000\000\000\000\076\000\000\000\079\000\079\000\079\000\
\076\000\079\000\079\000\000\000\000\000\000\000\000\000\079\000\
\000\000\000\000\000\000\000\000\079\000\000\000\079\000\000\000\
\000\000\000\000\000\000\079\000\000\000\000\000\000\000\000\000\
\000\000\079\000\079\000\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\000\000\079\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\000\000\000\000\000\000\000\000\000\000\000\
\079\000\079\000\079\000\000\000\000\000\079\000\000\000\080\000\
\080\000\080\000\079\000\080\000\080\000\000\000\000\000\000\000\
\000\000\080\000\000\000\000\000\000\000\000\000\080\000\000\000\
\080\000\000\000\000\000\000\000\000\000\080\000\000\000\000\000\
\000\000\000\000\000\000\080\000\080\000\080\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\080\000\000\000\080\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\
\000\000\000\000\080\000\080\000\080\000\000\000\000\000\080\000\
\000\000\081\000\081\000\081\000\080\000\081\000\081\000\000\000\
\000\000\000\000\000\000\081\000\000\000\000\000\000\000\000\000\
\081\000\000\000\081\000\000\000\000\000\000\000\000\000\081\000\
\000\000\000\000\000\000\000\000\000\000\081\000\081\000\081\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
\000\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\081\000\000\000\
\000\000\000\000\000\000\000\000\081\000\081\000\081\000\000\000\
\000\000\081\000\000\000\100\000\100\000\100\000\081\000\100\000\
\100\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\
\000\000\000\000\100\000\000\000\100\000\000\000\000\000\000\000\
\000\000\100\000\000\000\000\000\000\000\000\000\000\000\100\000\
\100\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\100\000\000\000\100\000\085\000\085\000\085\000\000\000\
\085\000\085\000\000\000\000\000\000\000\000\000\085\000\000\000\
\100\000\000\000\000\000\085\000\000\000\085\000\100\000\100\000\
\100\000\000\000\085\000\100\000\000\000\000\000\000\000\000\000\
\085\000\085\000\085\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\085\000\000\000\085\000\065\000\065\000\000\000\
\000\000\065\000\065\000\000\000\000\000\000\000\000\000\065\000\
\000\000\085\000\000\000\000\000\065\000\000\000\065\000\085\000\
\085\000\085\000\000\000\000\000\085\000\000\000\000\000\000\000\
\000\000\065\000\065\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\000\000\065\000\070\000\070\000\
\000\000\000\000\070\000\070\000\000\000\000\000\000\000\000\000\
\070\000\000\000\065\000\000\000\000\000\070\000\000\000\070\000\
\065\000\065\000\065\000\000\000\000\000\065\000\000\000\000\000\
\000\000\000\000\070\000\070\000\070\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\000\000\070\000\071\000\
\071\000\000\000\000\000\071\000\071\000\000\000\000\000\000\000\
\000\000\071\000\000\000\070\000\000\000\000\000\071\000\000\000\
\071\000\070\000\000\000\070\000\000\000\000\000\070\000\000\000\
\000\000\000\000\000\000\071\000\071\000\071\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\071\000\241\000\071\000\
\000\000\000\000\000\000\000\000\241\000\241\000\000\000\241\000\
\241\000\241\000\000\000\000\000\071\000\000\000\241\000\000\000\
\000\000\000\000\071\000\241\000\071\000\241\000\000\000\071\000\
\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\241\000\241\000\000\000\000\000\000\000\000\000\241\000\
\235\000\000\000\241\000\000\000\241\000\000\000\235\000\235\000\
\000\000\235\000\235\000\235\000\000\000\000\000\000\000\000\000\
\235\000\241\000\000\000\241\000\000\000\235\000\231\000\235\000\
\000\000\000\000\235\000\000\000\231\000\231\000\000\000\231\000\
\231\000\231\000\000\000\235\000\235\000\000\000\231\000\000\000\
\000\000\235\000\000\000\231\000\235\000\231\000\235\000\000\000\
\231\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\231\000\231\000\235\000\000\000\235\000\000\000\231\000\
\000\000\000\000\231\000\000\000\231\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\231\000"

val yycheck = "\003\000\
\004\000\035\000\074\000\226\000\035\000\045\000\229\000\006\001\
\008\001\088\000\078\001\044\001\129\000\013\001\083\000\019\000\
\020\000\021\000\087\000\088\000\066\001\038\000\000\000\040\000\
\043\000\084\000\085\000\031\000\113\000\033\000\034\000\019\001\
\036\000\037\000\038\000\018\001\040\000\041\000\063\001\064\001\
\167\000\232\000\001\000\187\001\001\001\073\000\030\001\030\001\
\030\001\002\001\062\001\067\001\064\001\057\000\067\001\059\000\
\068\001\061\000\018\001\150\001\151\001\000\000\153\001\154\001\
\155\001\030\001\157\001\030\001\064\001\085\001\030\001\075\000\
\085\001\077\000\009\001\010\001\088\001\035\000\082\000\083\000\
\099\000\149\001\078\001\087\000\088\000\162\000\068\001\164\000\
\041\001\021\001\050\001\075\001\075\001\112\000\127\001\114\000\
\022\001\062\001\065\001\064\001\119\000\076\001\062\001\068\001\
\079\001\068\001\233\000\018\001\068\001\113\000\129\000\037\001\
\152\000\073\001\231\000\075\001\074\000\208\001\030\001\030\001\
\145\001\212\001\010\002\088\001\082\000\060\001\130\000\155\000\
\036\001\175\001\064\001\177\001\089\001\090\001\091\001\204\000\
\068\001\069\001\070\001\071\001\225\000\218\000\040\001\189\001\
\078\001\222\000\205\000\011\001\181\001\153\000\062\001\083\001\
\084\001\085\001\086\001\087\001\088\001\061\001\162\000\163\000\
\164\000\073\001\074\001\167\000\075\001\199\000\200\000\031\001\
\245\000\200\000\019\001\171\001\064\001\032\001\048\001\034\001\
\222\001\026\001\083\001\084\001\147\001\089\001\090\001\091\001\
\019\002\020\002\078\001\067\001\080\001\040\001\194\000\089\001\
\090\001\091\001\015\001\011\001\229\001\201\000\047\001\030\001\
\204\000\024\001\061\001\085\001\017\001\085\001\019\001\224\000\
\021\001\021\002\198\000\024\001\231\000\217\000\218\000\089\001\
\090\001\091\001\222\000\050\001\224\000\225\000\226\000\227\000\
\228\000\229\000\097\001\098\001\067\001\233\000\089\001\090\001\
\091\001\064\001\067\001\021\001\059\002\058\001\089\001\090\001\
\091\001\245\000\200\000\247\000\067\002\249\000\085\001\062\001\
\206\000\064\001\025\001\026\001\062\001\001\001\064\001\003\001\
\214\000\215\000\216\000\007\001\008\001\067\001\078\001\006\002\
\007\002\013\001\014\001\015\001\078\001\017\001\080\001\019\001\
\068\001\021\001\006\002\007\002\024\001\067\001\099\001\085\001\
\002\001\085\001\056\002\062\001\070\001\071\001\221\001\030\001\
\043\000\063\002\022\001\023\001\061\001\056\001\064\001\085\001\
\016\001\083\001\084\001\085\001\086\001\087\001\004\001\085\001\
\006\001\090\001\064\001\090\001\078\001\011\001\058\001\132\001\
\013\001\033\001\090\001\063\001\064\001\065\001\066\001\041\001\
\078\001\076\000\080\001\025\001\026\001\068\001\013\001\062\001\
\048\001\004\001\070\001\071\001\075\001\149\001\045\002\090\001\
\011\001\080\001\073\001\074\001\062\001\061\001\001\001\063\001\
\099\000\016\001\068\001\022\001\126\001\097\001\098\001\099\001\
\063\002\090\001\175\001\062\001\177\001\112\000\033\001\114\000\
\035\001\068\001\033\001\184\001\119\000\061\001\129\001\042\001\
\043\001\089\001\090\001\091\001\234\000\093\001\129\000\237\000\
\078\001\082\002\240\000\068\001\128\001\062\001\130\001\062\001\
\132\001\090\002\091\002\068\001\073\001\074\001\061\001\014\001\
\063\001\089\001\090\001\091\001\088\001\145\001\146\001\147\001\
\148\001\024\001\150\001\151\001\061\001\153\001\154\001\155\001\
\068\001\157\001\158\001\159\001\144\001\063\000\064\000\038\001\
\039\001\180\001\089\001\090\001\091\001\079\001\093\001\171\001\
\047\001\082\000\083\000\175\001\067\001\177\001\087\000\088\000\
\089\001\090\001\091\001\072\001\184\001\185\001\170\001\187\001\
\013\001\014\001\076\001\070\001\199\000\079\001\073\001\149\001\
\203\000\006\002\007\002\024\001\076\001\201\001\202\001\203\001\
\158\001\028\001\195\000\196\000\208\001\193\001\194\001\065\001\
\212\001\038\001\039\001\230\001\083\001\084\001\085\001\086\001\
\087\001\130\000\047\001\069\001\231\000\013\001\014\001\003\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\024\001\235\000\061\001\246\000\238\000\248\000\003\001\243\001\
\030\001\245\001\089\001\090\001\091\001\008\002\038\001\039\001\
\012\002\013\002\163\000\239\001\240\001\241\001\167\000\047\001\
\207\000\208\000\006\002\007\002\002\002\003\002\010\002\089\001\
\090\001\091\001\092\001\094\001\013\001\014\001\018\002\019\002\
\020\002\089\001\090\001\091\001\068\001\003\001\085\001\024\001\
\089\001\090\001\091\001\085\001\013\001\014\001\034\002\035\002\
\003\001\044\001\085\001\204\000\003\001\038\001\039\001\024\001\
\050\001\045\002\067\001\013\001\068\001\056\001\047\001\051\002\
\006\002\007\002\067\001\055\002\056\002\038\001\039\001\059\002\
\068\001\061\001\062\002\063\002\067\001\021\001\047\001\067\002\
\233\000\005\001\062\001\068\001\073\001\068\001\050\001\021\001\
\062\001\068\001\018\001\013\001\080\002\068\001\082\002\079\001\
\029\001\079\001\085\001\030\001\048\001\044\001\090\002\091\002\
\001\001\078\001\064\001\068\001\070\001\066\001\069\001\008\001\
\079\001\061\001\092\001\063\001\013\001\014\001\004\001\067\001\
\017\001\007\001\019\001\076\001\021\001\011\001\067\001\024\001\
\013\001\015\001\076\001\126\001\127\001\062\001\129\001\062\001\
\022\001\023\001\080\001\025\001\018\001\089\001\090\001\091\001\
\064\001\093\001\064\001\033\001\064\001\035\001\062\001\068\001\
\078\001\064\001\090\001\080\001\042\001\043\001\061\001\045\001\
\046\001\048\001\061\001\012\001\064\001\078\001\085\001\003\001\
\062\001\079\001\165\001\166\001\030\001\059\001\060\001\061\001\
\068\001\063\001\079\001\009\001\010\001\064\001\064\001\013\001\
\014\001\180\001\181\001\068\001\063\001\019\001\079\001\077\001\
\068\001\062\001\024\001\079\001\026\001\068\001\062\001\079\001\
\097\001\098\001\079\001\089\001\090\001\091\001\092\001\093\001\
\038\001\039\001\062\001\062\001\062\001\079\001\079\001\085\001\
\079\001\047\001\037\001\049\001\079\001\003\001\078\001\085\001\
\067\001\007\001\006\001\009\001\010\001\067\001\012\001\013\001\
\014\001\015\001\229\001\230\001\018\001\019\001\020\001\021\001\
\079\001\023\001\024\001\025\001\026\001\090\001\006\001\029\001\
\030\001\006\001\032\001\033\001\034\001\090\001\068\001\068\001\
\038\001\039\001\062\001\062\001\000\000\158\001\044\001\045\001\
\046\001\047\001\061\001\049\001\050\001\008\002\062\001\013\001\
\013\001\062\001\171\001\021\001\088\001\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\078\001\062\001\080\001\062\001\079\001\083\001\084\001\085\001\
\086\001\087\001\088\001\089\001\090\001\091\001\092\001\093\001\
\003\001\064\001\062\001\062\001\007\001\007\000\009\001\010\001\
\020\000\012\001\013\001\014\001\015\001\066\000\153\000\018\001\
\019\001\020\001\021\001\033\000\023\001\024\001\025\001\026\001\
\239\000\236\000\029\001\030\001\039\000\032\001\033\001\034\001\
\042\000\146\001\239\001\038\001\039\001\056\002\155\000\185\001\
\200\000\044\001\045\001\046\001\047\001\126\001\049\001\050\001\
\130\001\021\001\166\000\076\000\176\000\006\002\007\002\003\001\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\007\001\080\001\215\000\228\000\
\083\001\084\001\085\001\086\001\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\003\001\252\001\216\000\255\255\007\001\
\255\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\030\001\255\255\
\032\001\033\001\034\001\255\255\255\255\255\255\038\001\039\001\
\255\255\255\255\255\255\255\255\044\001\045\001\046\001\047\001\
\255\255\049\001\050\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\078\001\255\255\
\080\001\255\255\255\255\083\001\084\001\085\001\086\001\087\001\
\088\001\089\001\090\001\091\001\092\001\093\001\003\001\255\255\
\255\255\255\255\007\001\255\255\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\255\255\255\255\018\001\019\001\255\255\
\021\001\255\255\023\001\024\001\025\001\026\001\255\255\255\255\
\029\001\030\001\255\255\032\001\033\001\034\001\255\255\255\255\
\255\255\038\001\039\001\255\255\255\255\255\255\255\255\044\001\
\045\001\046\001\047\001\255\255\049\001\050\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\255\255\
\077\001\078\001\255\255\080\001\255\255\255\255\083\001\084\001\
\085\001\086\001\087\001\088\001\089\001\090\001\091\001\092\001\
\093\001\003\001\255\255\255\255\255\255\007\001\255\255\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\255\255\255\255\
\018\001\019\001\255\255\021\001\255\255\023\001\024\001\025\001\
\026\001\255\255\255\255\029\001\030\001\255\255\032\001\033\001\
\034\001\255\255\255\255\255\255\038\001\039\001\255\255\255\255\
\255\255\255\255\044\001\045\001\046\001\047\001\255\255\049\001\
\050\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\255\255\075\001\076\001\077\001\078\001\079\001\080\001\255\255\
\255\255\083\001\084\001\085\001\086\001\087\001\255\255\089\001\
\090\001\091\001\092\001\093\001\003\001\255\255\255\255\255\255\
\007\001\255\255\009\001\010\001\255\255\012\001\013\001\014\001\
\015\001\255\255\255\255\018\001\019\001\255\255\021\001\255\255\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\030\001\
\255\255\032\001\033\001\034\001\255\255\255\255\255\255\038\001\
\039\001\255\255\255\255\255\255\255\255\044\001\045\001\046\001\
\047\001\255\255\049\001\050\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\255\255\073\001\074\001\075\001\255\255\077\001\078\001\
\255\255\080\001\255\255\255\255\083\001\084\001\085\001\086\001\
\087\001\088\001\089\001\090\001\091\001\092\001\093\001\003\001\
\255\255\255\255\255\255\007\001\255\255\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\255\255\021\001\255\255\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\030\001\255\255\032\001\033\001\034\001\255\255\
\255\255\255\255\038\001\039\001\255\255\255\255\255\255\255\255\
\044\001\045\001\046\001\047\001\255\255\049\001\050\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\066\001\067\001\
\068\001\069\001\070\001\071\001\255\255\073\001\074\001\075\001\
\255\255\077\001\078\001\255\255\080\001\255\255\255\255\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\090\001\091\001\
\092\001\093\001\003\001\255\255\255\255\255\255\007\001\255\255\
\009\001\010\001\255\255\012\001\013\001\014\001\015\001\255\255\
\255\255\018\001\019\001\255\255\021\001\255\255\023\001\024\001\
\025\001\026\001\255\255\255\255\029\001\030\001\255\255\032\001\
\033\001\034\001\255\255\255\255\255\255\038\001\039\001\255\255\
\255\255\255\255\255\255\044\001\045\001\046\001\047\001\255\255\
\049\001\050\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\062\001\063\001\064\001\
\255\255\066\001\255\255\068\001\069\001\070\001\071\001\255\255\
\073\001\074\001\075\001\255\255\077\001\078\001\255\255\080\001\
\255\255\255\255\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\090\001\091\001\092\001\093\001\003\001\255\255\255\255\
\255\255\007\001\255\255\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\255\255\255\255\018\001\019\001\255\255\021\001\
\255\255\023\001\024\001\025\001\026\001\255\255\255\255\029\001\
\030\001\255\255\032\001\033\001\034\001\255\255\255\255\255\255\
\038\001\039\001\255\255\255\255\255\255\255\255\044\001\045\001\
\046\001\047\001\255\255\049\001\050\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\068\001\069\001\
\070\001\071\001\255\255\073\001\074\001\075\001\255\255\077\001\
\078\001\255\255\080\001\255\255\255\255\083\001\084\001\085\001\
\086\001\087\001\088\001\089\001\090\001\091\001\092\001\093\001\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\255\255\017\001\255\255\255\255\020\001\021\001\255\255\
\023\001\255\255\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\032\001\033\001\034\001\255\255\255\255\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\045\001\046\001\
\255\255\255\255\255\255\024\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\255\255\
\063\001\038\001\039\001\255\255\255\255\255\255\069\001\070\001\
\255\255\255\255\047\001\255\255\255\255\255\255\077\001\255\255\
\007\001\255\255\081\001\082\001\255\255\255\255\255\255\255\255\
\015\001\255\255\089\001\090\001\091\001\092\001\093\001\094\001\
\023\001\255\255\025\001\255\255\255\255\028\001\255\255\255\255\
\255\255\032\001\033\001\034\001\255\255\255\255\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\045\001\046\001\
\255\255\255\255\255\255\024\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\255\255\
\063\001\038\001\039\001\255\255\255\255\255\255\069\001\070\001\
\255\255\255\255\047\001\013\001\014\001\255\255\077\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\007\001\255\255\089\001\090\001\091\001\092\001\093\001\094\001\
\015\001\255\255\255\255\255\255\038\001\039\001\021\001\255\255\
\023\001\255\255\025\001\255\255\255\255\047\001\255\255\255\255\
\255\255\032\001\033\001\034\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\045\001\046\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\255\255\067\001\255\255\069\001\070\001\
\071\001\072\001\073\001\255\255\255\255\076\001\077\001\255\255\
\079\001\080\001\255\255\255\255\083\001\084\001\085\001\086\001\
\087\001\255\255\089\001\090\001\091\001\092\001\093\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\255\255\017\001\255\255\255\255\020\001\021\001\255\255\023\001\
\255\255\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\032\001\033\001\034\001\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\013\001\014\001\255\255\045\001\046\001\255\255\
\019\001\255\255\021\001\255\255\255\255\024\001\255\255\026\001\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\255\255\255\255\255\255\038\001\039\001\069\001\070\001\255\255\
\255\255\255\255\255\255\255\255\047\001\077\001\049\001\255\255\
\255\255\081\001\082\001\255\255\255\255\255\255\007\001\008\001\
\255\255\089\001\090\001\091\001\092\001\093\001\015\001\255\255\
\017\001\255\255\255\255\020\001\021\001\255\255\023\001\255\255\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\032\001\
\033\001\034\001\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\013\001\014\001\255\255\045\001\046\001\255\255\019\001\
\255\255\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\255\255\255\255\038\001\039\001\069\001\070\001\255\255\255\255\
\255\255\255\255\255\255\047\001\077\001\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\007\001\008\001\255\255\
\089\001\090\001\091\001\092\001\093\001\015\001\255\255\017\001\
\255\255\255\255\020\001\021\001\255\255\023\001\255\255\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\032\001\033\001\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\045\001\046\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\007\001\059\001\060\001\061\001\255\255\063\001\255\255\255\255\
\015\001\255\255\255\255\069\001\070\001\020\001\021\001\255\255\
\023\001\255\255\025\001\077\001\255\255\028\001\255\255\255\255\
\255\255\032\001\033\001\034\001\255\255\255\255\255\255\089\001\
\090\001\091\001\092\001\093\001\255\255\255\255\045\001\046\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\007\001\059\001\060\001\061\001\255\255\
\063\001\255\255\255\255\015\001\255\255\255\255\069\001\070\001\
\255\255\255\255\255\255\023\001\255\255\025\001\077\001\255\255\
\028\001\255\255\081\001\082\001\032\001\033\001\034\001\255\255\
\255\255\255\255\089\001\090\001\091\001\092\001\093\001\255\255\
\255\255\045\001\046\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\007\001\059\001\
\060\001\061\001\255\255\063\001\255\255\255\255\015\001\255\255\
\255\255\069\001\070\001\020\001\021\001\255\255\023\001\255\255\
\025\001\077\001\255\255\255\255\255\255\081\001\082\001\032\001\
\033\001\034\001\255\255\255\255\255\255\089\001\090\001\091\001\
\092\001\093\001\255\255\255\255\045\001\046\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\007\001\059\001\060\001\061\001\255\255\063\001\064\001\
\255\255\015\001\255\255\255\255\069\001\070\001\020\001\021\001\
\255\255\023\001\255\255\025\001\077\001\255\255\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\255\255\255\255\255\255\
\089\001\090\001\091\001\092\001\093\001\255\255\255\255\045\001\
\046\001\255\255\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\007\001\255\255\059\001\060\001\061\001\
\255\255\063\001\023\001\015\001\025\001\255\255\255\255\069\001\
\070\001\255\255\255\255\023\001\255\255\025\001\255\255\077\001\
\028\001\255\255\255\255\255\255\032\001\033\001\034\001\255\255\
\045\001\046\001\255\255\089\001\090\001\091\001\092\001\093\001\
\255\255\045\001\046\001\255\255\255\255\007\001\059\001\060\001\
\061\001\255\255\063\001\255\255\255\255\015\001\255\255\059\001\
\060\001\061\001\020\001\063\001\255\255\023\001\255\255\025\001\
\077\001\069\001\070\001\255\255\255\255\255\255\032\001\033\001\
\034\001\077\001\255\255\255\255\089\001\090\001\091\001\092\001\
\093\001\255\255\255\255\045\001\046\001\089\001\090\001\091\001\
\092\001\093\001\255\255\255\255\255\255\255\255\007\001\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\015\001\255\255\
\255\255\255\255\255\255\069\001\070\001\255\255\023\001\255\255\
\025\001\255\255\255\255\077\001\255\255\255\255\255\255\032\001\
\033\001\034\001\255\255\255\255\255\255\255\255\255\255\089\001\
\090\001\091\001\092\001\093\001\045\001\046\001\255\255\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\023\001\
\255\255\025\001\255\255\255\255\069\001\070\001\255\255\255\255\
\032\001\033\001\034\001\255\255\077\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\045\001\046\001\255\255\
\089\001\090\001\091\001\092\001\093\001\255\255\255\255\255\255\
\007\001\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\255\255\025\001\255\255\255\255\077\001\255\255\079\001\
\255\255\032\001\033\001\034\001\255\255\085\001\255\255\255\255\
\255\255\089\001\090\001\091\001\092\001\093\001\045\001\046\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\007\001\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\023\001\255\255\025\001\255\255\076\001\077\001\255\255\
\079\001\007\001\032\001\033\001\034\001\255\255\036\001\255\255\
\255\255\015\001\089\001\090\001\091\001\092\001\093\001\045\001\
\046\001\023\001\255\255\025\001\255\255\255\255\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\059\001\060\001\061\001\
\255\255\063\001\255\255\255\255\255\255\255\255\255\255\045\001\
\046\001\255\255\255\255\255\255\255\255\255\255\255\255\077\001\
\255\255\255\255\007\001\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\015\001\089\001\090\001\091\001\092\001\093\001\
\255\255\255\255\023\001\255\255\025\001\255\255\255\255\077\001\
\255\255\255\255\255\255\032\001\033\001\034\001\255\255\085\001\
\255\255\255\255\255\255\089\001\090\001\091\001\092\001\093\001\
\045\001\046\001\255\255\007\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\255\255\255\255\059\001\060\001\
\061\001\255\255\063\001\023\001\255\255\025\001\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\033\001\034\001\255\255\
\077\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\085\001\045\001\046\001\255\255\089\001\090\001\091\001\092\001\
\093\001\255\255\255\255\255\255\007\001\255\255\255\255\059\001\
\060\001\061\001\255\255\063\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\255\255\025\001\255\255\
\076\001\077\001\255\255\255\255\007\001\032\001\033\001\034\001\
\255\255\255\255\255\255\255\255\015\001\089\001\090\001\091\001\
\092\001\093\001\045\001\046\001\023\001\255\255\025\001\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\034\001\
\059\001\060\001\061\001\255\255\063\001\255\255\255\255\255\255\
\255\255\255\255\045\001\046\001\255\255\255\255\255\255\255\255\
\255\255\255\255\077\001\255\255\255\255\007\001\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\015\001\089\001\090\001\
\091\001\092\001\093\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\077\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\089\001\090\001\
\091\001\092\001\093\001\045\001\046\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\077\001\255\255\255\255\255\255\255\255\
\255\255\083\001\084\001\255\255\255\255\255\255\003\001\089\001\
\090\001\091\001\092\001\093\001\009\001\010\001\255\255\012\001\
\013\001\014\001\255\255\255\255\255\255\018\001\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\255\255\255\255\255\255\255\255\044\001\
\255\255\255\255\047\001\255\255\049\001\050\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\062\001\255\255\064\001\255\255\066\001\255\255\068\001\
\069\001\070\001\071\001\255\255\073\001\074\001\075\001\255\255\
\255\255\078\001\255\255\080\001\255\255\255\255\083\001\084\001\
\085\001\086\001\087\001\088\001\003\001\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\012\001\013\001\014\001\
\255\255\255\255\255\255\018\001\019\001\255\255\021\001\255\255\
\255\255\024\001\255\255\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\255\255\255\255\255\255\255\255\044\001\255\255\255\255\
\047\001\255\255\049\001\050\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\062\001\
\255\255\064\001\255\255\066\001\255\255\068\001\069\001\070\001\
\071\001\255\255\073\001\074\001\075\001\255\255\255\255\078\001\
\255\255\080\001\255\255\255\255\083\001\084\001\085\001\086\001\
\087\001\088\001\003\001\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\012\001\013\001\014\001\255\255\255\255\
\255\255\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\255\255\
\255\255\255\255\255\255\044\001\255\255\255\255\047\001\255\255\
\049\001\050\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\062\001\255\255\064\001\
\255\255\066\001\255\255\068\001\069\001\070\001\071\001\255\255\
\073\001\074\001\075\001\255\255\255\255\078\001\255\255\080\001\
\255\255\255\255\083\001\084\001\085\001\086\001\087\001\088\001\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\012\001\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\255\255\021\001\255\255\255\255\024\001\255\255\026\001\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\255\255\255\255\255\255\
\255\255\044\001\255\255\255\255\047\001\255\255\049\001\050\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\062\001\255\255\064\001\255\255\066\001\
\255\255\068\001\069\001\070\001\071\001\255\255\073\001\074\001\
\075\001\255\255\255\255\078\001\255\255\080\001\255\255\255\255\
\083\001\084\001\085\001\086\001\087\001\088\001\003\001\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\255\255\012\001\
\013\001\014\001\255\255\255\255\255\255\018\001\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\255\255\255\255\255\255\255\255\044\001\
\255\255\255\255\047\001\255\255\049\001\050\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\062\001\255\255\064\001\255\255\066\001\255\255\068\001\
\069\001\070\001\071\001\255\255\073\001\074\001\075\001\255\255\
\255\255\078\001\255\255\080\001\255\255\255\255\083\001\084\001\
\085\001\086\001\087\001\088\001\003\001\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\012\001\013\001\014\001\
\255\255\255\255\255\255\018\001\019\001\255\255\021\001\255\255\
\255\255\024\001\255\255\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\255\255\255\255\255\255\255\255\044\001\255\255\255\255\
\047\001\255\255\049\001\050\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\062\001\
\255\255\064\001\255\255\066\001\255\255\068\001\069\001\070\001\
\071\001\255\255\073\001\074\001\075\001\255\255\255\255\078\001\
\255\255\080\001\255\255\255\255\083\001\084\001\085\001\086\001\
\087\001\088\001\003\001\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\012\001\013\001\014\001\255\255\255\255\
\255\255\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\255\255\
\255\255\255\255\255\255\044\001\255\255\255\255\047\001\255\255\
\049\001\050\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\062\001\255\255\064\001\
\255\255\066\001\255\255\068\001\069\001\070\001\071\001\255\255\
\073\001\074\001\075\001\255\255\255\255\078\001\255\255\080\001\
\255\255\255\255\083\001\084\001\085\001\086\001\087\001\088\001\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\012\001\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\255\255\021\001\255\255\255\255\024\001\255\255\026\001\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\255\255\255\255\255\255\
\255\255\044\001\255\255\255\255\047\001\255\255\049\001\050\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\062\001\255\255\064\001\255\255\066\001\
\255\255\068\001\255\255\070\001\071\001\255\255\073\001\074\001\
\075\001\255\255\255\255\078\001\255\255\080\001\255\255\255\255\
\083\001\084\001\085\001\086\001\087\001\088\001\003\001\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\255\255\012\001\
\013\001\014\001\255\255\255\255\255\255\018\001\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\255\255\255\255\255\255\255\255\044\001\
\255\255\255\255\047\001\255\255\049\001\050\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\062\001\255\255\064\001\255\255\066\001\255\255\068\001\
\069\001\255\255\071\001\255\255\073\001\074\001\075\001\255\255\
\255\255\078\001\255\255\080\001\255\255\255\255\083\001\084\001\
\085\001\086\001\087\001\088\001\003\001\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\012\001\013\001\014\001\
\255\255\255\255\255\255\018\001\019\001\255\255\021\001\255\255\
\255\255\024\001\255\255\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\039\001\255\255\255\255\255\255\255\255\044\001\255\255\255\255\
\047\001\255\255\049\001\050\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\062\001\
\255\255\064\001\255\255\066\001\255\255\068\001\255\255\070\001\
\071\001\255\255\073\001\074\001\075\001\255\255\255\255\078\001\
\255\255\080\001\255\255\255\255\083\001\084\001\085\001\086\001\
\087\001\088\001\003\001\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\012\001\013\001\014\001\255\255\255\255\
\255\255\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\255\255\
\255\255\255\255\255\255\044\001\255\255\255\255\047\001\255\255\
\049\001\050\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\062\001\255\255\064\001\
\255\255\066\001\255\255\068\001\255\255\070\001\071\001\255\255\
\073\001\074\001\075\001\255\255\255\255\078\001\255\255\080\001\
\255\255\255\255\083\001\084\001\085\001\086\001\087\001\088\001\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\012\001\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\255\255\255\255\255\255\255\255\024\001\255\255\026\001\
\255\255\255\255\029\001\030\001\009\001\010\001\255\255\255\255\
\013\001\014\001\255\255\038\001\039\001\255\255\019\001\255\255\
\255\255\044\001\255\255\024\001\047\001\026\001\049\001\050\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\037\001\038\001\039\001\062\001\255\255\064\001\255\255\066\001\
\255\255\068\001\047\001\255\255\049\001\255\255\073\001\074\001\
\075\001\003\001\255\255\078\001\255\255\080\001\255\255\009\001\
\010\001\062\001\012\001\013\001\014\001\088\001\255\255\068\001\
\018\001\019\001\255\255\255\255\255\255\255\255\024\001\003\001\
\026\001\255\255\255\255\029\001\030\001\009\001\010\001\255\255\
\255\255\013\001\014\001\255\255\038\001\039\001\255\255\019\001\
\255\255\021\001\044\001\255\255\024\001\047\001\026\001\049\001\
\050\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\062\001\255\255\064\001\255\255\
\066\001\255\255\068\001\047\001\255\255\049\001\255\255\073\001\
\074\001\075\001\003\001\255\255\078\001\255\255\080\001\255\255\
\009\001\010\001\255\255\012\001\013\001\014\001\088\001\255\255\
\255\255\018\001\019\001\255\255\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\029\001\030\001\009\001\010\001\
\255\255\255\255\013\001\014\001\255\255\038\001\039\001\255\255\
\019\001\255\255\255\255\044\001\255\255\024\001\047\001\026\001\
\049\001\050\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\062\001\255\255\064\001\
\255\255\066\001\255\255\068\001\047\001\255\255\049\001\255\255\
\073\001\255\255\075\001\255\255\255\255\078\001\255\255\080\001\
\255\255\003\001\083\001\084\001\085\001\086\001\087\001\009\001\
\010\001\255\255\012\001\013\001\014\001\255\255\255\255\255\255\
\018\001\019\001\255\255\021\001\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\029\001\030\001\009\001\010\001\255\255\
\255\255\013\001\014\001\255\255\038\001\039\001\255\255\019\001\
\255\255\255\255\044\001\255\255\024\001\047\001\026\001\049\001\
\050\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\062\001\255\255\064\001\255\255\
\066\001\255\255\068\001\047\001\255\255\049\001\255\255\073\001\
\255\255\075\001\255\255\255\255\078\001\255\255\080\001\255\255\
\003\001\083\001\084\001\085\001\086\001\087\001\009\001\010\001\
\255\255\012\001\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\255\255\021\001\255\255\255\255\024\001\255\255\026\001\
\255\255\255\255\029\001\030\001\009\001\010\001\255\255\255\255\
\255\255\014\001\255\255\038\001\039\001\255\255\019\001\255\255\
\255\255\044\001\255\255\024\001\047\001\026\001\049\001\050\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\062\001\255\255\064\001\255\255\066\001\
\255\255\068\001\047\001\255\255\049\001\255\255\255\255\255\255\
\075\001\255\255\255\255\078\001\255\255\080\001\255\255\003\001\
\083\001\084\001\085\001\086\001\087\001\009\001\010\001\255\255\
\012\001\013\001\014\001\255\255\255\255\255\255\018\001\019\001\
\255\255\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\255\255\255\255\255\255\255\255\
\044\001\255\255\255\255\047\001\255\255\049\001\050\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\062\001\255\255\064\001\255\255\066\001\255\255\
\068\001\255\255\255\255\255\255\255\255\255\255\255\255\075\001\
\003\001\255\255\078\001\255\255\080\001\255\255\009\001\010\001\
\255\255\012\001\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\255\255\255\255\255\255\255\255\024\001\255\255\026\001\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\255\255\255\255\255\255\
\255\255\044\001\255\255\255\255\047\001\255\255\049\001\050\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\062\001\255\255\064\001\255\255\066\001\
\255\255\068\001\255\255\255\255\255\255\255\255\255\255\255\255\
\075\001\003\001\255\255\078\001\255\255\080\001\255\255\009\001\
\010\001\255\255\012\001\013\001\014\001\255\255\255\255\255\255\
\018\001\019\001\255\255\255\255\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\038\001\039\001\255\255\255\255\
\255\255\255\255\044\001\255\255\255\255\047\001\255\255\049\001\
\050\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\255\255\064\001\255\255\
\066\001\255\255\068\001\255\255\255\255\255\255\255\255\255\255\
\255\255\075\001\003\001\255\255\078\001\255\255\080\001\255\255\
\009\001\010\001\255\255\012\001\013\001\014\001\255\255\255\255\
\255\255\018\001\019\001\255\255\255\255\255\255\255\255\024\001\
\255\255\026\001\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\255\255\
\255\255\255\255\255\255\044\001\255\255\255\255\047\001\255\255\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\062\001\255\255\064\001\
\255\255\066\001\255\255\068\001\255\255\255\255\255\255\255\255\
\255\255\255\255\075\001\003\001\255\255\078\001\255\255\080\001\
\255\255\009\001\010\001\255\255\012\001\013\001\014\001\255\255\
\255\255\255\255\018\001\019\001\255\255\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\255\255\255\255\255\255\255\255\044\001\255\255\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\062\001\255\255\
\064\001\255\255\066\001\255\255\068\001\255\255\255\255\255\255\
\255\255\255\255\255\255\075\001\003\001\255\255\078\001\255\255\
\080\001\255\255\009\001\010\001\255\255\012\001\013\001\014\001\
\255\255\255\255\255\255\018\001\019\001\255\255\255\255\255\255\
\255\255\024\001\255\255\026\001\255\255\255\255\029\001\255\255\
\009\001\010\001\011\001\255\255\013\001\014\001\255\255\038\001\
\039\001\255\255\019\001\255\255\255\255\044\001\255\255\024\001\
\047\001\026\001\049\001\255\255\255\255\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\037\001\038\001\039\001\062\001\
\255\255\064\001\255\255\066\001\255\255\068\001\047\001\255\255\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\078\001\
\255\255\080\001\255\255\255\255\255\255\062\001\255\255\255\255\
\255\255\255\255\067\001\068\001\069\001\070\001\255\255\255\255\
\073\001\255\255\255\255\255\255\255\255\078\001\079\001\009\001\
\010\001\011\001\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\255\255\255\255\255\255\
\255\255\067\001\068\001\069\001\070\001\255\255\255\255\073\001\
\255\255\255\255\255\255\255\255\078\001\079\001\009\001\010\001\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\019\001\255\255\255\255\255\255\255\255\024\001\255\255\026\001\
\255\255\255\255\255\255\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\037\001\038\001\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\255\255\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\062\001\255\255\255\255\255\255\255\255\
\255\255\068\001\069\001\070\001\255\255\255\255\073\001\255\255\
\255\255\255\255\255\255\078\001\079\001\009\001\010\001\011\001\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\255\255\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\062\001\255\255\255\255\255\255\255\255\067\001\
\068\001\069\001\070\001\255\255\255\255\073\001\255\255\009\001\
\010\001\011\001\078\001\013\001\014\001\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\255\255\255\255\255\255\
\255\255\255\255\068\001\069\001\070\001\255\255\255\255\073\001\
\255\255\009\001\010\001\011\001\078\001\013\001\014\001\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\062\001\255\255\
\255\255\255\255\255\255\255\255\068\001\069\001\070\001\255\255\
\255\255\073\001\255\255\009\001\010\001\011\001\078\001\013\001\
\014\001\255\255\255\255\255\255\255\255\019\001\255\255\255\255\
\255\255\255\255\024\001\255\255\026\001\255\255\255\255\255\255\
\255\255\031\001\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\255\255\049\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\062\001\255\255\255\255\255\255\255\255\255\255\068\001\069\001\
\070\001\255\255\255\255\073\001\255\255\009\001\010\001\011\001\
\078\001\013\001\014\001\255\255\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\255\255\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\062\001\255\255\255\255\255\255\255\255\255\255\
\068\001\069\001\070\001\255\255\255\255\073\001\255\255\009\001\
\010\001\011\001\078\001\013\001\014\001\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\255\255\255\255\024\001\255\255\
\026\001\255\255\255\255\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\255\255\255\255\255\255\
\255\255\255\255\068\001\069\001\070\001\255\255\255\255\073\001\
\255\255\009\001\010\001\011\001\078\001\013\001\014\001\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\062\001\255\255\
\255\255\255\255\255\255\255\255\068\001\069\001\070\001\255\255\
\255\255\073\001\255\255\009\001\010\001\011\001\078\001\013\001\
\014\001\255\255\255\255\255\255\255\255\019\001\255\255\255\255\
\255\255\255\255\024\001\255\255\026\001\255\255\255\255\255\255\
\255\255\031\001\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\255\255\049\001\009\001\010\001\011\001\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\019\001\255\255\
\062\001\255\255\255\255\024\001\255\255\026\001\068\001\069\001\
\070\001\255\255\031\001\073\001\255\255\255\255\255\255\255\255\
\037\001\038\001\039\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\047\001\255\255\049\001\009\001\010\001\255\255\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\019\001\
\255\255\062\001\255\255\255\255\024\001\255\255\026\001\068\001\
\069\001\070\001\255\255\255\255\073\001\255\255\255\255\255\255\
\255\255\037\001\038\001\039\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\255\255\049\001\009\001\010\001\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\019\001\255\255\062\001\255\255\255\255\024\001\255\255\026\001\
\068\001\069\001\070\001\255\255\255\255\073\001\255\255\255\255\
\255\255\255\255\037\001\038\001\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\255\255\049\001\009\001\
\010\001\255\255\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\019\001\255\255\062\001\255\255\255\255\024\001\255\255\
\026\001\068\001\255\255\070\001\255\255\255\255\073\001\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\003\001\049\001\
\255\255\255\255\255\255\255\255\009\001\010\001\255\255\012\001\
\013\001\014\001\255\255\255\255\062\001\255\255\019\001\255\255\
\255\255\255\255\068\001\024\001\070\001\026\001\255\255\073\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\255\255\255\255\255\255\255\255\044\001\
\003\001\255\255\047\001\255\255\049\001\255\255\009\001\010\001\
\255\255\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\019\001\062\001\255\255\064\001\255\255\024\001\003\001\026\001\
\255\255\255\255\029\001\255\255\009\001\010\001\255\255\012\001\
\013\001\014\001\255\255\038\001\039\001\255\255\019\001\255\255\
\255\255\044\001\255\255\024\001\047\001\026\001\049\001\255\255\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\038\001\039\001\062\001\255\255\064\001\255\255\044\001\
\255\255\255\255\047\001\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\064\001"

val yynames_const = "\
  ANA\000\
  ANALYSIS\000\
  AND\000\
  ARROW\000\
  AS\000\
  ATOMIC\000\
  BOTTOM\000\
  CASE\000\
  CCR\000\
  CIM\000\
  CONSTRAINT\000\
  ELSE\000\
  END\000\
  EQN\000\
  FALSE\000\
  FLAT\000\
  FN\000\
  FROM\000\
  FUN\000\
  IF\000\
  IN\000\
  INDEX\000\
  INT\000\
  LATTICE\000\
  LET\000\
  MAP\000\
  MP\000\
  NOT\000\
  OF\000\
  OR\000\
  ORDER\000\
  POST\000\
  POWER\000\
  PRE\000\
  PRODUCT\000\
  REC\000\
  RHS\000\
  QUERY\000\
  SET\000\
  SIG\000\
  SIGNATURE\000\
  SUM\000\
  SYNTREE\000\
  THEN\000\
  TOP\000\
  TRUE\000\
  VAL\000\
  VAR\000\
  WIDEN\000\
  WITH\000\
  AF\000\
  AG\000\
  AU\000\
  AX\000\
  EF\000\
  EG\000\
  EU\000\
  EX\000\
  UNDER\000\
  UNDERUNDER\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  COMMA\000\
  STAR\000\
  PLUS\000\
  MINUS\000\
  LEFTARROW\000\
  RIGHTARROW\000\
  BOTHARROW\000\
  DOUBLEARROW\000\
  AT\000\
  HAT\000\
  BAR\000\
  DOT\000\
  DOTDOTDOT\000\
  BANG\000\
  QUESTION\000\
  LT\000\
  GT\000\
  EQ\000\
  LE\000\
  GE\000\
  LINE\000\
  EOF\000\
  "

val yynames_block = "\
  LID\000\
  UID\000\
  SID\000\
  INTNUM\000\
  NMLEXP\000\
  CTLID\000\
  ANAID\000\
  "

val yyact = [|
  (fn _ => failwith "parser")
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	Obj.repr((
(* # 495 "parser.ny" *)
        a_1 ) : RabbitAst.topdec)  end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 500 "parser.ny" *)
        (a_1, region ()) )) end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 502 "parser.ny" *)
        (a_1, region ()) )) end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 504 "parser.ny" *)
        (a_1, region ()) )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 509 "parser.ny" *)
        a_1::[] )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 511 "parser.ny" *)
        a_1::a_3 )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 522 "parser.ny" *)
       
        AnaDec a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 526 "parser.ny" *)
       
        SigDec a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 530 "parser.ny" *)
       
        TemDec a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 537 "parser.ny" *)
       
        (a_1: topdec)::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 541 "parser.ny" *)
       
        (a_1: topdec)::(a_2: topdec list)
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 548 "parser.ny" *)
       
        DomDec a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 552 "parser.ny" *)
       
        SemDec a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 556 "parser.ny" *)
       
        QueryDec a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 563 "parser.ny" *)
        a_1::[] )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 565 "parser.ny" *)
        a_1::a_2 )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 570 "parser.ny" *)
       
        let
            val anaid  = a_2
            val anaexp = a_4
        in
            store_anaid (anaid.0);
            {anaid=anaid, anaexp=anaexp}
        end
      )) end  end )
, (fn parser_env =>
	Obj.repr((
(* # 583 "parser.ny" *)
       
        push_setid_env ();
        push_latid_env ();
        push_ctlid_env ();
        push_cvarid_env ();

        ()
      )))
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_2 = peek_val parser_env 1 in
	Obj.repr((
(* # 595 "parser.ny" *)
       
        pop_setid_env ();
        pop_latid_env ();
        pop_ctlid_env ();
        pop_cvarid_env ();

        AnaExpEnd a_2
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 3 in
	let val a_3 = peek_val parser_env 1 in
	Obj.repr((
(* # 604 "parser.ny" *)
       
        AnaExpApp {temid=a_1, params=a_3}
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 608 "parser.ny" *)
       
        AnaExpId a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 615 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 619 "parser.ny" *)
       
        a_1::a_3
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 4 in
	let val a_5 = peek_val parser_env 1 in
	Obj.repr((
(* # 626 "parser.ny" *)
       
        let
            val sigid  = a_2
            val sigexp = SigExp a_5
        in
            {sigid=sigid, sigexp=sigexp}
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 635 "parser.ny" *)
       
        let
            val sigid  = a_2
            val sigexp = SigId a_4
        in
            {sigid=sigid, sigexp=sigexp}
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 647 "parser.ny" *)
       
        push_anaid_env ();

        a_2
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 7 in
	let val a_3 = peek_val parser_env 5 in
	let val a_6 = peek_val parser_env 2 in
	let val a_7 = peek_val parser_env 1 in
	Obj.repr((
(* # 656 "parser.ny" *)
       
        let
            val temid = a_1
        in
            pop_anaid_env ();
            pop_setid_env ();
            pop_latid_env ();
            pop_ctlid_env ();
            pop_cvarid_env ();

            {temid=temid, params=a_3, body=a_7} 
        end
      )) end  end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 4 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 673 "parser.ny" *)
       
        let
            val anaid  = a_1
            val sigexp = SigExp a_4
        in
            store_anaid (anaid.0);
            {anaid=anaid, sigexp=sigexp}
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 683 "parser.ny" *)
       
        let
            val anaid  = a_1
            val sigexp = SigId a_3
        in
            store_anaid (anaid.0);
            {anaid=anaid, sigexp=sigexp}
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 696 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 700 "parser.ny" *)
       
        a_1::a_3 
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 707 "parser.ny" *)
       
        a_2
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 711 "parser.ny" *)
       
        a_2
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 715 "parser.ny" *)
       
        let
            val varid = a_2
            val ty    = ty_of a_4
        in
            (VarDesc (varid, ty))::[]
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 724 "parser.ny" *)
       
        let
            val varid = a_2
            val ty    = ty_of a_4
        in
            (EqnDesc (varid, ty))::[]
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 733 "parser.ny" *)
       
        let
            val ctlid = a_2
            val ty    = ty_of a_4
        in
            (QueryDesc (ctlid, ty))::[]
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 745 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 749 "parser.ny" *)
       
        a_1 @ a_2 
      )) end  end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 756 "parser.ny" *)
       
        let
            val setid = (a_1, region ())
        in
            SDescId setid
        end
      )) end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 2 : string) in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 764 "parser.ny" *)
       
        let
            val setid = (a_1, region_of 1)
        in
            SDescKind (setid, a_3)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 772 "parser.ny" *)
       
        SDescBind a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 779 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 783 "parser.ny" *)
       
        a_1::a_3
      )) end  end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 790 "parser.ny" *)
       
        let
            val latid = (a_1, region ())
        in
            LDescId latid
        end
      )) end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 2 : string) in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 798 "parser.ny" *)
       
        let
            val latid = (a_1, region_of 1)
        in
            LDescKind (latid, a_3)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 806 "parser.ny" *)
       
        LDescBind a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 813 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 817 "parser.ny" *)
       
        a_1::a_3
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 824 "parser.ny" *)
       
        SetDec a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 828 "parser.ny" *)
       
        LatDec a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 832 "parser.ny" *)
       
        WidenDec a_1
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 839 "parser.ny" *)
       
        let
            val (setid, setexp) = a_2
        in
            store_setid (setid.0);
            (setid, setexp)
        end
      )) end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 2 : string) in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 851 "parser.ny" *)
       
        let
            val setid  = (a_1, region_of 1)
            val setexp = setexp_of a_3
        in
            (setid, setexp)
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 863 "parser.ny" *)
       
        let
            val (latid, latexp) = a_2
        in
            store_latid (latid.0);
            (latid, latexp)
        end
      )) end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 2 : string) in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 875 "parser.ny" *)
       
        let
            val latid  = (a_1, region_of 1)
            val latexp = latexp_of a_3
        in
            (latid, latexp)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 887 "parser.ny" *)
       
        NmlTyDom (a_1, region ()) 
      )) end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 891 "parser.ny" *)
       
        let
            val longid = (a_1::[], region ())
        in
            IdDom (longid, region ())
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 899 "parser.ny" *)
       
        let
            val longid = ((a_1.0)::a_3::[], region ())
        in
            IdDom (longid, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 3 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 917 "parser.ny" *)
       
        let
            val exp1 = exp_of a_2
            val exp2 = exp_of a_4
        in
            IntervalDom (exp1, exp2, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	Obj.repr((
(* # 926 "parser.ny" *)
       
        EnumDom (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	Obj.repr((
(* # 930 "parser.ny" *)
       
        a_2
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 937 "parser.ny" *)
       
        a_1 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 941 "parser.ny" *)
       
        let
            val setexp = setexp_of a_1
        in
            ConstraintDom (setexp, a_3, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 949 "parser.ny" *)
       
        let
            val setexp = setexp_of a_1
        in
            OrderDom (setexp, a_3, region ()) 
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 960 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 964 "parser.ny" *)
       
        let
            val setexp = setexp_of a_2
        in
            PowerDom (setexp, region ()) 
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 972 "parser.ny" *)
       
        let
            val setexp = setexp_of a_2
        in
            FlatDom (setexp, region ()) 
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 983 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 987 "parser.ny" *)
       
        ProductDom (a_1::a_3::[], region ()) 
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 994 "parser.ny" *)
       
        a_1 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 998 "parser.ny" *)
        
        SumDom (a_1::a_3::[], region ()) 
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1005 "parser.ny" *)
       
        a_1 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1009 "parser.ny" *)
       
        ArrowDom (a_1, a_3, region ()) 
      )) end  end )
, (fn parser_env =>
	let val a_4 = peek_val parser_env 4 in
	let val a_8 = peek_val parser_env 0 in
	Obj.repr((
(* # 1016 "parser.ny" *)
       
        let
            val cvarid_list  = a_4
            val index_option = None
            val rhs_list     = a_8
        in
            List.iter (fn x => store_cvarid (x.0)) cvarid_list;
            {cvar=cvarid_list, index=index_option, rhs=rhs_list}::[]
        end
      )) end  end )
, (fn parser_env =>
	let val a_4 = peek_val parser_env 6 in
	let val a_7 = peek_val parser_env 3 in
	let val a_10 = peek_val parser_env 0 in
	Obj.repr((
(* # 1027 "parser.ny" *)
       
        let
            val cvarid_list  = a_4
            val index_option = Some (setexp_of a_7)
            val rhs_list     = a_10
        in
            List.iter (fn x => store_cvarid (x.0)) cvarid_list;
            {cvar=cvarid_list, index=index_option, rhs=rhs_list}::[]
        end
      )) end  end  end )
, (fn parser_env =>
	Obj.repr((
(* # 1041 "parser.ny" *)
       
        RhsVar
      )))
, (fn parser_env =>
	let val a_2 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 1045 "parser.ny" *)
       
        let
            val setlongid = ([a_2], region_of 2)
        in
            RhsVarr setlongid
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 1053 "parser.ny" *)
       
        let
            val setlongid = ([a_2.1,a_4], merged_region_of 2 4)
        in
            RhsVarr setlongid
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1061 "parser.ny" *)
       
        let
            val conid = a_1
            val carg  = CargEmpty
            val flag  = NonAtomic
        in
            RhsConid {conid=conid, carg=carg, flag=flag}
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1071 "parser.ny" *)
       
        let
            val conid = a_1
            val carg  = CargSet (setexp_of a_2)
            val flag  = NonAtomic
        in
            RhsConid {conid=conid, carg=carg, flag=flag}
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1081 "parser.ny" *)
       
        let
            val conid = a_1
            val carg  = a_2
            val flag  = NonAtomic
        in
            RhsConid {conid=conid, carg=carg, flag=flag}
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	Obj.repr((
(* # 1091 "parser.ny" *)
       
        let
            val conid = a_1
            val carg  = CargEmpty
            val flag  = Atomic
        in
            RhsConid {conid=conid, carg=carg, flag=flag}
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 3 in
	let val a_2 = peek_val parser_env 2 in
	Obj.repr((
(* # 1101 "parser.ny" *)
       
        let
            val conid = a_1
            val carg  = CargSet (setexp_of a_2)
            val flag  = Atomic
        in
            RhsConid {conid=conid, carg=carg, flag=flag}
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 3 in
	let val a_2 = peek_val parser_env 2 in
	Obj.repr((
(* # 1111 "parser.ny" *)
       
        let
            val conid = a_1
            val carg  = a_2
            val flag  = Atomic
        in
            RhsConid {conid=conid, carg=carg, flag=flag}
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1124 "parser.ny" *)
       
        a_1::[] 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1128 "parser.ny" *)
       
        a_1::a_3
      )) end  end )
, (fn parser_env =>
	Obj.repr((
(* # 1134 "parser.ny" *)
       
        CargVar
      )))
, (fn parser_env =>
	let val a_2 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 1138 "parser.ny" *)
       
        let
            val setlongid = ([a_2], region_of 2)
        in
            CargVarr setlongid
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 1146 "parser.ny" *)
       
        let
            val setlongid = ([a_2.1,a_4], merged_region_of 2 4)
        in
            CargVarr setlongid
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	Obj.repr((
(* # 1154 "parser.ny" *)
       
        let
            val carg_list = a_2::[]
        in
            CargTuple carg_list
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 3 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 1162 "parser.ny" *)
       
        let
            val setexp    = setexp_of a_2
            val carg      = CargSet setexp
            val carg_list = carg::a_4
        in
            CargTuple carg_list
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 3 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 1172 "parser.ny" *)
       
        let
            val carg_list = a_2::a_4
        in
            CargTuple carg_list
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1183 "parser.ny" *)
       
        let
            val setexp    = setexp_of a_1
            val carg      = CargSet setexp
        in
            carg::[]
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1192 "parser.ny" *)
       
        let
            val setexp   = setexp_of a_1
            val carg     = CargSet setexp
        in
            carg::a_3
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1201 "parser.ny" *)
       
        a_1::[] 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1205 "parser.ny" *)
       
        a_1::a_3 
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1212 "parser.ny" *)
       
        let
            val po  = LTrop
            val pat = pat_of a_2
        in
            ((po, pat)::[], region ())
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1221 "parser.ny" *)
       
        let
            val po  = GTrop
            val pat = pat_of a_2
        in
            ((po, pat)::[], region ())
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1230 "parser.ny" *)
       
        let
            val pat = pat_of a_1
        in
            (dissolve_sugared_order pat a_2, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1241 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1245 "parser.ny" *)
       
        let
            val (orders1, _) = a_1
            val (orders2, _) = a_3
        in
            (orders1 @ orders2, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1257 "parser.ny" *)
       
        let
            val po  = LTrop
            val pat = pat_of a_2
        in
            (po, pat)::[]
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1266 "parser.ny" *)
       
        let
            val po  = GTrop
            val pat = pat_of a_2
        in
            (po, pat)::[]
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1275 "parser.ny" *)
       
        let
            val po  = LTrop
            val pat = pat_of a_2
        in
            (po, pat)::a_3
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1284 "parser.ny" *)
       
        let
            val po  = GTrop
            val pat = pat_of a_2
        in
            (po, pat)::a_3
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = (peek_val parser_env 2 : string) in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 1296 "parser.ny" *)
       
        let
            val latid = (a_2, region_of 2)
        in
            (latid, a_4)
        end
      )) end  end )
, (fn parser_env =>
	Obj.repr((
(* # 1307 "parser.ny" *)
       
        SyntreeKind 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1311 "parser.ny" *)
       
        IndexKind 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1315 "parser.ny" *)
       
        PowerKind 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1319 "parser.ny" *)
       
        SumKind 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1323 "parser.ny" *)
       
        ProductKind 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1327 "parser.ny" *)
       
        ArrowKind 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1331 "parser.ny" *)
       
        ConstraintKind 
      )))
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1338 "parser.ny" *)
       
        ValDec a_1 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1342 "parser.ny" *)
       
        EqnDec a_1 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1346 "parser.ny" *)
       
        CcrDec a_1 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1350 "parser.ny" *)
       
        CimDec a_1 
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1357 "parser.ny" *)
       
        ValBind (a_2, region ()) 
      )) end )
, (fn parser_env =>
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1361 "parser.ny" *)
       
        RecValBind (a_3, region ()) 
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1365 "parser.ny" *)
       
        FunBind (a_2, region ()) 
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1369 "parser.ny" *)
       
        MapBind (a_2, region ()) 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1376 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1380 "parser.ny" *)
       
        a_1::a_2
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1387 "parser.ny" *)
       
        let
            val pat = pat_of a_1
            val exp = exp_of a_3
        in
            (pat, exp)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1399 "parser.ny" *)
       
        a_1::[] 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1403 "parser.ny" *)
       
        a_1::a_3 
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 3 in
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 1410 "parser.ny" *)
       
        let
            val varid = a_1
            val pat   = pat_of a_2
            val exp   = exp_of a_4
        in
            {varid=a_1, pat=pat, exp=exp}::[]
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 5 in
	let val a_2 = peek_val parser_env 4 in
	let val a_4 = peek_val parser_env 2 in
	let val a_6 = peek_val parser_env 0 in
	Obj.repr((
(* # 1420 "parser.ny" *)
       
        let
            val varid = a_1
            val pat   = pat_of a_2
            val exp   = exp_of a_4
        in
            {varid=a_1, pat=pat, exp=exp}::a_6
        end
      )) end  end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1433 "parser.ny" *)
        
        (a_1, region_of 1)::[] 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1437 "parser.ny" *)
       
        (a_1, region_of 1)::a_3 
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1444 "parser.ny" *)
       
        EqnBind (a_2, region ()) 
      )) end )
, (fn parser_env =>
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1448 "parser.ny" *)
       
        RecEqnBind (a_3, region ()) 
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1452 "parser.ny" *)
       
        FunEqnBind (a_2, region ()) 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1459 "parser.ny" *)
       
        let
            val varid = a_1
            val exp   = exp_of a_3
        in
            (varid, exp, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1471 "parser.ny" *)
       
        a_1::[] 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1475 "parser.ny" *)
       
        a_1::a_3 
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 1483 "parser.ny" *)
       
        let
            val premise = a_2
            val conseq  = a_4
        in
            ({premise=premise, conseq=conseq}, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1495 "parser.ny" *)
       
        CcrCnst a_1 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1499 "parser.ny" *)
       
        CcrGuard a_1 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1506 "parser.ny" *)
        
        a_1::[] 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1510 "parser.ny" *)
       
        a_1::a_3 
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1517 "parser.ny" *)
       
        let
            val cvarexp     = cvarexp_of a_1
            val rhsexp_list = a_3
        in
            (cvarexp, rhsexp_list)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1529 "parser.ny" *)
       
        let
            val cvarlongid = ([a_1.1], region ())
            val cvarexp    = {cvarid=cvarlongid, index=None}
        in
            RhsexpCvar cvarexp
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1538 "parser.ny" *)
       
        let
            val cvarlongid = ([a_1.1,a_3.1], region ())
            val cvarexp    = {cvarid=cvarlongid, index=None}
        in
            RhsexpCvar cvarexp
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1547 "parser.ny" *)
       
        let
            val cvarlongid = ([a_1.1], region_of 1)
            val pat        = pat_of a_3
            val cvarexp    = {cvarid=cvarlongid, index=(Some pat)}
        in
            RhsexpCvar cvarexp
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 4 in
	let val a_3 = peek_val parser_env 2 in
	let val a_5 = peek_val parser_env 0 in
	Obj.repr((
(* # 1557 "parser.ny" *)
       
        let
            val cvarlongid = ([a_1.1,a_3.1], merged_region_of 1 3)
            val pat        = pat_of a_5
            val cvarexp    = {cvarid=cvarlongid, index=(Some pat)}
        in
            RhsexpCvar cvarexp
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1567 "parser.ny" *)
       
        let
            val conlongid = ([a_1.1], region_of 1)
            val cargexp   = cargexp_of a_2
        in
            RhsexpConid (conlongid, cargexp)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 3 in
	let val a_3 = peek_val parser_env 1 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 1576 "parser.ny" *)
       
        let
            val conlongid = ([a_1.1,a_3.1], merged_region_of 1 3)
            val cargexp   = cargexp_of a_4
        in
            RhsexpConid (conlongid, cargexp)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1588 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1592 "parser.ny" *)
       
        a_1::a_3
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1600 "parser.ny" *)
       
        a_1::[] 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1604 "parser.ny" *)
       
        a_1::a_3 
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 1611 "parser.ny" *)
       
        let
            val conlongid = ([a_2.1], region_of 2)
            val exp       = exp_of a_4
        in
            (conlongid, None, exp, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 4 in
	let val a_4 = peek_val parser_env 2 in
	let val a_6 = peek_val parser_env 0 in
	Obj.repr((
(* # 1620 "parser.ny" *)
       
        let
            val conlongid = ([a_2.1,a_4.1], merged_region_of 2 4)
            val exp       = exp_of a_6
        in
            (conlongid, None, exp, region ())
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 3 in
	let val a_3 = peek_val parser_env 2 in
	let val a_5 = peek_val parser_env 0 in
	Obj.repr((
(* # 1629 "parser.ny" *)
       
        let
            val conlongid = ([a_2.1], region_of 2)
            val pat       = pat_of a_3
            val exp       = exp_of a_5
        in
            (conlongid, Some pat, exp, region ()) 
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 5 in
	let val a_4 = peek_val parser_env 3 in
	let val a_5 = peek_val parser_env 2 in
	let val a_7 = peek_val parser_env 0 in
	Obj.repr((
(* # 1639 "parser.ny" *)
       
        let
            val conlongid = ([a_2.1,a_4.1], merged_region_of 2 4)
            val pat       = pat_of a_5
            val exp       = exp_of a_7
        in
            (conlongid, Some pat, exp, region ()) 
        end
      )) end  end  end  end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 0 : int) in
	Obj.repr((
(* # 1652 "parser.ny" *)
       
        IntConst a_1 
      )) end )
, (fn parser_env =>
	Obj.repr((
(* # 1656 "parser.ny" *)
       
        TopConst 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1660 "parser.ny" *)
       
        BottomConst
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1664 "parser.ny" *)
       
        TopConst 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1668 "parser.ny" *)
       
        BottomConst 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1672 "parser.ny" *)
       
        TrueConst
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1676 "parser.ny" *)
       
        FalseConst
      )))
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 0 : string) in
	Obj.repr((
(* # 1683 "parser.ny" *)
       
        Nml (a_1, region ())
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1687 "parser.ny" *)
       
        Id a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1697 "parser.ny" *)
       
        Const (a_1, region ())
      )) end )
, (fn parser_env =>
	Obj.repr((
(* # 1701 "parser.ny" *)
       
        (* pat: wild pattern *)
        Pat (WildPat, region ())
      )))
, (fn parser_env =>
	Obj.repr((
(* # 1706 "parser.ny" *)
       
        (* ty: integer type *)
        Ty (IntTy, region ())
      )))
, (fn parser_env =>
	let val a_2 = peek_val parser_env 3 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 1711 "parser.ny" *)
       
        Interval (a_2, a_4, region ())
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	Obj.repr((
(* # 1715 "parser.ny" *)
       
        Set (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	Obj.repr((
(* # 1719 "parser.ny" *)
       
        Map (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 3 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 1723 "parser.ny" *)
       
        (* e: set comprehension *)
        let
            val exp_list = exp_list_of a_2
            val qual = a_4
            val exp = SetCompExp (exp_list, qual, region ())
        in
            Exp (exp, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 3 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 1734 "parser.ny" *)
       
        (* e: map comprehension *)
        let
            val exp_list = mrule_list_of a_2
            val qual = a_4
            val exp = MapCompExp (exp_list, qual, region ()) 
        in
            Exp (exp, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	Obj.repr((
(* # 1745 "parser.ny" *)
       
        (* pat: set pattern *)
        let
            val pat_list = (pat_of a_2)::[]
            val pat = SetDotsPat pat_list
        in
            Pat (pat, region ())
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 4 in
	let val a_4 = peek_val parser_env 2 in
	Obj.repr((
(* # 1755 "parser.ny" *)
       
        (* pat: set pattern *)
        let
            val pat_list = (pat_of a_2)::(pat_list_of a_4)
            val pat = SetDotsPat pat_list
        in
            Pat (pat, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	Obj.repr((
(* # 1765 "parser.ny" *)
       
        (* pat: map pattern *)
        Pat (MapDotsPat (mpat_list_of a_2), region ())
      )) end )
, (fn parser_env =>
	Obj.repr((
(* # 1790 "parser.ny" *)
       
        (* e: empty set/map *)
        Exp (EmptySetExp (region ()), region ())
      )))
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	Obj.repr((
(* # 1795 "parser.ny" *)
       
        a_2 
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 3 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 1799 "parser.ny" *)
       
        Tuple (a_2::a_4, region ()) 
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 3 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 1803 "parser.ny" *)
       
        let
            val exp = exp_of a_4
            val r   = region ()
        in
            Exp (LetExp (a_2, exp, r), r)
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = (peek_val parser_env 0 : int) in
	Obj.repr((
(* # 1815 "parser.ny" *)
       
        (IntProjTag a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1822 "parser.ny" *)
       
        let
            val longid = ((a_2.0)::[], a_2.1)
        in
            (IdProjTag longid, region ())
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1833 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1837 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1841 "parser.ny" *)
       
        a_1::a_2
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1845 "parser.ny" *)
       
        let
            fun is_idprojtag (IdProjTag _,_) = true
              | is_idprojtag _ = false
        in
            if (is_idprojtag (List.hd a_2)) then
                let
                    val (IdProjTag (s1::_, r1), r2) = a_1
                    val (IdProjTag (s2::_, r3), r4) = List.hd a_2
                in
                    if (is_anaid s1) then
                        let
                            val r5 = Region.merge_region r1 r3
                            val r6 = Region.merge_region r2 r4
                            val longid = (s1::s2::[], r5)
                        in
                            ((IdProjTag longid), r6)::(List.tl a_2)
                        end
                    else
                        a_1::a_2
                end
            else
               a_1::a_2
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1874 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 1878 "parser.ny" *)
       
        let
            fun is_idprojtag (IdProjTag _,_) = true
              | is_idprojtag _ = false

            fun make_exp exp (projtag,r) = 
                let
                    val r' = Region.merge_region (region_of 1) r
                in
                    ProjectExp (exp, projtag, r')
                end
        in
            if (is_id a_1) andalso (is_anaid (id_of a_1).0) then
                let
                    val (s1,r1) = (id_of a_1)
                    (* TODO: *)
                    val (IdProjTag (s2::_,_),r2) = List.hd a_2
                    val longid = (s1::s2::[], Region.merge_region r1 r2)
                    val exp = exp_of (LongId longid)
                in
                    if ((List.length (List.tl a_2)) = 0) then
                        LongId longid
                    else
                        Exp (List.fold_left make_exp exp (List.tl a_2), region ())
                end
            else
                Exp (List.fold_left make_exp (exp_of a_1) a_2, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 1942 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 1946 "parser.ny" *)
       
        Index (a_1, a_3, region ())
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 1983 "parser.ny" *)
       
        let
            val tag   = Pre
            val eqnid = ((a_2.0)::[], a_2.1)
            val exp   = exp_of a_4
            val r     = region ()
        in
            Exp (IndexExp ({tag=(Some tag), eqnid=eqnid, index=exp}, r), r)
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 4 in
	let val a_4 = peek_val parser_env 2 in
	let val a_6 = peek_val parser_env 0 in
	Obj.repr((
(* # 1994 "parser.ny" *)
       
        let
            val tag_option = Some Pre
            val eqnid      = ((a_2.0)::(a_4.0)::[], merged_region_of 2 4)
            val exp        = exp_of a_6
            val r          = region ()
        in
            Exp (IndexExp ({tag=tag_option, eqnid=eqnid, index=exp}, r), r)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 2005 "parser.ny" *)
       
        let
            val tag_option = Some Post
            val eqnid      = ((a_2.0)::[], a_2.1)
            val exp        = exp_of a_4
            val r          = region ()
        in
            Exp (IndexExp ({tag=tag_option, eqnid=eqnid, index=exp}, r), r)
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 4 in
	let val a_4 = peek_val parser_env 2 in
	let val a_6 = peek_val parser_env 0 in
	Obj.repr((
(* # 2016 "parser.ny" *)
       
        let
            val tag_option = Some Post
            val eqnid      = ((a_2.0)::(a_4.0)::[], merged_region_of 2 4)
            val exp        = exp_of a_6
            val r          = region ()
        in
            Exp (IndexExp ({tag=tag_option, eqnid=eqnid, index=exp}, r), r)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2112 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2116 "parser.ny" *)
       
        let
            val ty = ty_of a_2
            val r  = region ()
        in
            Ty (PowerTy (ty, r), r)
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2128 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 3 in
	let val a_3 = peek_val parser_env 1 in
	Obj.repr((
(* # 2132 "parser.ny" *)
       
        let
            val exp   = exp_of a_1
            val mrule = mrule_of a_3
            val r     = region ()
        in
            Exp (MapModExp (exp, mrule, r), r)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2145 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2149 "parser.ny" *)
       
        let
            val ty = ty_of a_3
        in
            Coercion (a_1, ty, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2157 "parser.ny" *)
       
        let
            val ty = ty_of a_1
            val r  = region ()
        in
            Ty (KindTy (ty, a_3, r), r)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2169 "parser.ny" *)
        
        a_1 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2173 "parser.ny" *)
       
        let
            val exp1 = exp_of a_1
            val exp2 = exp_of a_2
            val r    = region ()
        in
            Exp (AppExp (exp1, exp2, r), r)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2186 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2190 "parser.ny" *)
       
        Exp (CnstExp (a_1, region ()), region ())
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2197 "parser.ny" *)
        
        a_1 
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2201 "parser.ny" *)
       
        let
            val exp = exp_of a_2
            val r   = region ()
        in
            Exp (FoldMeetExp (exp, r), r)
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2210 "parser.ny" *)
       
        let
            val exp = exp_of a_2
            val r   = region ()
        in
            Exp (FoldJoinExp (exp, r), r)
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2222 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2226 "parser.ny" *)
       
        Meet (a_1, a_3, region ()) 
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2233 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2237 "parser.ny" *)
       
        Join (a_1, a_3, region ()) 
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2241 "parser.ny" *)
       
        let
            val exp1 = exp_of a_1
            val exp2 = exp_of a_3
            val r    = region ()
        in
            Exp (BopExp (exp1, MinusOp, exp2, r), r)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2254 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2258 "parser.ny" *)
       
        let
            val ty1 = ty_of a_1
            val ty2 = ty_of a_3
            val r   = region ()
        in
            Ty (ArrowTy (ty1, ty2, r), r)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2271 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 4 in
	let val a_4 = peek_val parser_env 2 in
	let val a_6 = peek_val parser_env 0 in
	Obj.repr((
(* # 2275 "parser.ny" *)
       
        let
            val exp1 = exp_of a_2
            val exp2 = exp_of a_4
            val exp3 = exp_of a_6
            val r    = region ()
        in
            Exp (IfExp (exp1, exp2, exp3, r), r)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2289 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_2 = peek_val parser_env 1 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2293 "parser.ny" *)
       
        let
            val exp = exp_of a_3
        in
            Rop (a_1, a_2, exp, region ())
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2304 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2308 "parser.ny" *)
       
        let
            val pat = pat_of a_1
            val exp = exp_of a_3
        in
            Pat (InPat (pat, exp), region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2320 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_3 = (peek_val parser_env 2 : int) in
	let val a_5 = peek_val parser_env 0 in
	Obj.repr((
(* # 2324 "parser.ny" *)
       
        (* pat: injection pattern *)
        let
            val injtag = a_3
            val pat    = pat_of a_5
        in
            Pat (InjectPat (injtag, pat), region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_3 = (peek_val parser_env 3 : int) in
	let val a_5 = peek_val parser_env 1 in
	let val a_6 = peek_val parser_env 0 in
	Obj.repr((
(* # 2334 "parser.ny" *)
       
        (* e: injection *)
        let
            val injtag = a_3
            val ty     = ty_of a_5
            val exp    = exp_of a_6
            val r      = region ()
        in
            Exp (InjectExp (injtag, ty, exp, r), r)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2349 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2353 "parser.ny" *)
       
        (* pat: as pattern *)
        let
            val varid = a_1
            val pat   = pat_of a_3
        in
            Pat (AsPat (varid, pat), region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2366 "parser.ny" *)
       
        a_1 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2370 "parser.ny" *)
       
        (* pat: guarded pattern *)
        let
            val pat   = pat_of a_1
            val guard = a_3
        in
            Pat (GuardedPat (pat, guard), region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2383 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2387 "parser.ny" *)
       
        (* pat: or pattern *)
        let
            val pat1 = pat_of a_1
            val pat2 = pat_of a_3
        in
            Pat (OrPat (pat1::pat2::[]), region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2400 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2404 "parser.ny" *)
       
        let
            val exp = FnExp (a_2, region ())
        in
            Exp (exp, region ())
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2412 "parser.ny" *)
       
        let
            val exp = MpExp (a_2, region ())
        in
            Exp (exp, region ())
        end
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 2420 "parser.ny" *)
       
        let
            val exp   = exp_of a_2
            val match = a_4
        in
            Exp (CaseExp (exp, match, region ()), region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2429 "parser.ny" *)
       
          let
              val exp1 = exp_of a_2
              val exp2 = exp_of a_3
          in
              Exp (MappingExp (exp1, exp2, region ()), region ())
          end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2441 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2445 "parser.ny" *)
       
        a_1::a_3
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2453 "parser.ny" *)
       
        (a_1, a_3, region ())
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2460 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2464 "parser.ny" *)
       
        a_1::a_3
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2471 "parser.ny" *)
       
        let
            val mrule = mrule_of a_1
        in
            mrule::[]
        end
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2479 "parser.ny" *)
       
        let
            val mrule = mrule_of a_1
        in
            mrule::a_3
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2490 "parser.ny" *)
       
        let
            val pat = pat_of a_1
            val exp = exp_of a_3
            val ge  = SetElmtGen (pat, exp, region ())
            val gen = (ge::[], region ())
        in
            (gen, None)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2501 "parser.ny" *)
       
        let
            val mpat = mpat_of a_1
            val exp  = exp_of a_3
            val ge   = MapElmtGen (mpat, exp, region ())
            val gen  = (ge::[], region ())
        in
            (gen, None)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 4 in
	let val a_3 = peek_val parser_env 2 in
	let val a_5 = peek_val parser_env 0 in
	Obj.repr((
(* # 2512 "parser.ny" *)
       
        let
            val pat = pat_of a_1
            val exp = exp_of a_3
            val r1  = merged_region_of 1 3
            val r2  = region_of 5
            val ge  = SetElmtGen (pat, exp, r1)
            val gen = (ge::[], r1)
            val guard_option = Some (AndGuard (a_5, r2))
        in
            (gen, guard_option)
        end
      
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 4 in
	let val a_3 = peek_val parser_env 2 in
	let val a_5 = peek_val parser_env 0 in
	Obj.repr((
(* # 2527 "parser.ny" *)
       
        let
            val mpat = mpat_of a_1
            val exp  = exp_of a_3
            val r1   = merged_region_of 1 3
            val r2   = region_of 5
            val ge   = MapElmtGen (mpat, exp, r1)
            val gen  = (ge::[], r1)
            val guard_option = Some (AndGuard (a_5, r2))
        in
            (gen, guard_option)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 4 in
	let val a_3 = peek_val parser_env 2 in
	let val a_5 = peek_val parser_env 0 in
	Obj.repr((
(* # 2541 "parser.ny" *)
       
        let
            val pat = pat_of a_1
            val exp = exp_of a_3
            val ge  = SetElmtGen (pat, exp, region ())
            val ((ge_list,r), guard_option) = a_5
            val gen = (ge::ge_list, Region.merge_region (region_of 1) r)
        in
            (gen, guard_option)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 4 in
	let val a_3 = peek_val parser_env 2 in
	let val a_5 = peek_val parser_env 0 in
	Obj.repr((
(* # 2553 "parser.ny" *)
       
        let
            val mpat = mpat_of a_1
            val exp  = exp_of a_3
            val ge   = MapElmtGen (mpat, exp, region ())
            val ((ge_list,r), guard_option) = a_5
            val gen  = (ge::ge_list, Region.merge_region (region_of 1), r)
        in
            (gen, guard_option)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2598 "parser.ny" *)
       
        let
            val pat = pat_of a_1
            val exp = exp_of a_3
        in
            SetElmtGen (pat, exp, region ()) 
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2607 "parser.ny" *)
       
        let
            val mpat = mpat_of a_1
            val exp  = exp_of a_3
        in
            MapElmtGen (mpat, exp, region ()) 
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2619 "parser.ny" *)
       
        a_1::[] 
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2623 "parser.ny" *)
       
        a_1::a_3
      )) end  end )
, (fn parser_env =>
	Obj.repr((
(* # 2630 "parser.ny" *)
       
        LTrop 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 2634 "parser.ny" *)
       
        GTrop 
      )))
, (fn parser_env =>
	Obj.repr((
(* # 2638 "parser.ny" *)
       
        EQrop
      )))
, (fn parser_env =>
	Obj.repr((
(* # 2642 "parser.ny" *)
       
        LErop
      )))
, (fn parser_env =>
	Obj.repr((
(* # 2646 "parser.ny" *)
       
        GErop 
      )))
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_2 = peek_val parser_env 1 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2653 "parser.ny" *)
       
        let
            val exp1 = exp_of a_1
            val exp2 = exp_of a_3
        in
            RopGuard (LTrop, exp1::exp2::[], region ()) 
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2662 "parser.ny" *)
       
        let
            val exp1 = exp_of a_1
            val exp2 = exp_of a_3
        in
            MemberGuard (exp1, exp2, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	Obj.repr((
(* # 2671 "parser.ny" *)
       
        AndGuard (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2678 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2682 "parser.ny" *)
       
        NotGuard (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2689 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2693 "parser.ny" *)
       
        AndGuard (a_1::a_3::[], region ())
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2700 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2704 "parser.ny" *)
       
        OrGuard (a_1::a_3::[], region ())
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2711 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 2715 "parser.ny" *)
       
        UnivGuard (a_2, a_4, region ())
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 2 in
	let val a_4 = peek_val parser_env 0 in
	Obj.repr((
(* # 2719 "parser.ny" *)
       
        ExisGuard (a_2, a_4, region ())
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2726 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2730 "parser.ny" *)
       
        a_1::a_3
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2737 "parser.ny" *)
       
        QueryDec a_2
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2744 "parser.ny" *)
       
        let
            val ctlid = a_1
            val ctl   = a_3
        in
            store_ctlid (ctlid.0);
            (ctlid, ctl, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2757 "parser.ny" *)
       
        a_1::[]
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2761 "parser.ny" *)
       
        a_1::a_3
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 3 in
	let val a_3 = peek_val parser_env 1 in
	Obj.repr((
(* # 2768 "parser.ny" *)
       
        let
            val varid      = a_1
            val tag_option = None
            val eqnid      = ([a_3.1], region_of 3)
        in
            check_ctlid := true;
            (varid, tag_option, eqnid)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 7 in
	let val a_4 = peek_val parser_env 4 in
	let val a_6 = peek_val parser_env 2 in
	Obj.repr((
(* # 2779 "parser.ny" *)
       
        let
            val varid      = a_1
            val tag_option = None
            val eqnid      = ([a_4.1,a_6.1], merged_region_of 4 6)
        in
            check_ctlid := true;
            (varid, tag_option, eqnid)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 4 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 2790 "parser.ny" *)
       
        let
            val varid      = a_1
            val tag_option = Some Pre
            val eqnid      = ([a_4.1], region_of 4)
        in
            check_ctlid := true;
            (varid, tag_option, eqnid)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 8 in
	let val a_5 = peek_val parser_env 4 in
	let val a_7 = peek_val parser_env 2 in
	Obj.repr((
(* # 2801 "parser.ny" *)
       
        let
            val varid      = a_1
            val tag_option = Some Pre
            val eqnid      = ([a_5.1,a_7.1], merged_region_of 5 7)
        in
            check_ctlid := true;
            (varid, tag_option, eqnid)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 4 in
	let val a_4 = peek_val parser_env 1 in
	Obj.repr((
(* # 2812 "parser.ny" *)
       
        let
            val varid      = a_1
            val tag_option = Some Post
            val eqnid      = ([a_4.1], region_of 4)
        in
            check_ctlid := true;
            (varid, tag_option, eqnid)
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 8 in
	let val a_5 = peek_val parser_env 4 in
	let val a_7 = peek_val parser_env 2 in
	Obj.repr((
(* # 2823 "parser.ny" *)
       
        let
            val varid      = a_1
            val tag_option = Some Post
            val eqnid      = ([a_5.1,a_7.1], merged_region_of 5 7)
        in
            check_ctlid := true;
            (varid, tag_option, eqnid)
        end
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2837 "parser.ny" *)
       
        let
            val (varid, tag_option, eqnid) = a_1
        in
            check_ctlid := false;
            FormulaCtl {id=varid, tag=tag_option, eqnid=eqnid, formula=a_2}
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 1 in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2846 "parser.ny" *)
       
        let
            val (varid, tag_option, eqnid) = a_1
        in
            check_ctlid := false;
            GuardCtl {id=varid, tag=tag_option, eqnid=eqnid, guard=a_2}
        end
      )) end  end )
, (fn parser_env =>
	let val a_1 = (peek_val parser_env 1 : string) in
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2914 "parser.ny" *)
       
        let
            val ctlid = (a_1, region_of 1)
            val varid = a_2
        in
            AppForm (ctlid, varid, region ())
        end
      )) end  end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 1 in
	Obj.repr((
(* # 2923 "parser.ny" *)
       
        a_2
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2930 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2934 "parser.ny" *)
       
        AXForm (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2938 "parser.ny" *)
       
        AFForm (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2942 "parser.ny" *)
       
        AGForm (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2946 "parser.ny" *)
       
        EXForm (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2950 "parser.ny" *)
       
        EFForm (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2954 "parser.ny" *)
       
        EGForm (a_2, region ()) 
      )) end )
, (fn parser_env =>
	let val a_3 = peek_val parser_env 3 in
	let val a_5 = peek_val parser_env 1 in
	Obj.repr((
(* # 2958 "parser.ny" *)
       
        AUForm (a_3, a_5, region ())
      )) end  end )
, (fn parser_env =>
	let val a_3 = peek_val parser_env 3 in
	let val a_5 = peek_val parser_env 1 in
	Obj.repr((
(* # 2962 "parser.ny" *)
       
        EUForm (a_3, a_5, region ())
      )) end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2969 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_2 = peek_val parser_env 0 in
	Obj.repr((
(* # 2973 "parser.ny" *)
       
        NotForm (a_2, region ())
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2980 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_2 = peek_val parser_env 1 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 2984 "parser.ny" *)
       
        AndForm (a_1::a_3::[], region ())
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 2997 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_2 = peek_val parser_env 1 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 3001 "parser.ny" *)
       
        OrForm (a_1::a_3::[], region ())
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 0 in
	Obj.repr((
(* # 3014 "parser.ny" *)
       
        a_1
      )) end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_2 = peek_val parser_env 1 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 3018 "parser.ny" *)
       
        ImplyForm (a_1, a_3, region ())
      )) end  end  end )
, (fn parser_env =>
	let val a_1 = peek_val parser_env 2 in
	let val a_2 = peek_val parser_env 1 in
	let val a_3 = peek_val parser_env 0 in
	Obj.repr((
(* # 3022 "parser.ny" *)
       
        EquivForm (a_1, a_3, region ())
      )) end  end  end )
, (fn parser_env =>
	Obj.repr((
(* # 3039 "parser.ny" *)
       
        check_ctlid := true
      )))
, (fn parser_env =>
	Obj.repr((
(* # 3046 "parser.ny" *)
       
        check_ctlid := true
      )))
, (fn parser_env =>
	Obj.repr((
(* # 3053 "parser.ny" *)
       
        check_ctlid := true
      )))
, (fn parser_env =>
	Obj.repr((
(* # 3060 "parser.ny" *)
       
        check_ctlid := true
      )))
(* Entry rabbit *)
, (fn parser_env => raise (YYexit (peek_val parser_env 0)))
|]
val yytables =
  { actions=yyact,
    transl_const=yytransl_const,
    transl_block=yytransl_block,
    lhs=yylhs,
    len=yylen,
    defred=yydefred,
    dgoto=yydgoto,
    sindex=yysindex,
    rindex=yyrindex,
    gindex=yygindex,
    tablesize=yytablesize,
    table=yytable,
    check=yycheck,
    error_function=parse_error,
    names_const=yynames_const,
    names_block=yynames_block }
fun rabbit (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : RabbitAst.topdec)


end (* END of structure Parser *)
