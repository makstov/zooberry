structure Lexer = struct
(* # 21 "lexer.nl" *)
 

open Parser

type error = Illegal_character
           | Unterminated_comment
           | Unterminated_nml_string
           | Unterminated_nml_comment

exception Error of error * int * int


(* for debugging *)

val verbose_mode = true

fun print_token (ANAID s) = print_string ("(ANAID "^s^") ")
  | print_token (CTLID s) = print_string ("(CTLID "^s^") ")
  | print_token (LID s)   = print_string ("(LID "^s^") ")
  | print_token (UID s)   = print_string ("(UID "^s^") ")
  | print_token (SID s)   = print_string ("(SID "^s^") ")
  | print_token _ = ()

(* to store the position of the beginning of a string and comment *)

val comment_start_pos = ref 0
val embedded_nml_start_pos = ref 0
val nml_string_start_pos = ref 0
val nml_comment_start_pos = ref 0


(* for nested comments *)

val comment_depth = ref 0
val nml_comment_depth = ref 0


(*--------------------------------------------------------------------*)
(* To buffer string literals (by JungTaek Kim)                        *)
(*--------------------------------------------------------------------*)

val initial_string_buffer = String.create 256
val string_buff = ref initial_string_buffer
val string_index = ref 0

fun reset_string_buffer () =
  (string_buff := initial_string_buffer;
   string_index := 0)

fun store_string_char c =
  (if !string_index >= String.length (!string_buff) then
   (
    let val new_buff = String.create (String.length (!string_buff) * 2)
    in
      String.blit (!string_buff) 0 new_buff 0 (String.length (!string_buff));
      string_buff := new_buff
    end
   );
   String.unsafe_set (!string_buff) (!string_index) c;
   incr string_index)


fun store_string s = 
    for i=0; i<(String.length s); i+1 do 
        store_string_char (String.get s i)
    end


fun get_stored_string () =
  let val s = String.sub (!string_buff) 0 (!string_index)
  in
    string_buff := initial_string_buffer; s
  end

(*--------------------------------------------------------------------*)
(* From misc.ml                                                       *)
(*--------------------------------------------------------------------*)

fun create_hashtable size init =
  let val tbl = Hashtbl.create size
  in
      List.iter (fn (key, data) => Hashtbl.add tbl key data) init;
      tbl
  end

(*--------------------------------------------------------------------*)

val keyword_table =
    create_hashtable 149 [
        ("ana", ANA),
        ("analysis", ANALYSIS),
        ("and", AND),
        ("arrow", ARROW),
        ("as", AS),
        ("atomic", ATOMIC),
        ("bottom", BOTTOM),
        ("case", CASE),
        ("ccr", CCR),
        ("cim", CIM),
        ("constraint", CONSTRAINT),
        ("else", ELSE),
        ("end", END),
        ("eqn", EQN),
        ("false", FALSE),
        ("flat", FLAT),
        ("fn", FN),
        ("from", FROM),
        ("fun", FUN),
        ("if", IF),
        ("in", IN),
        ("index", INDEX),
        ("int", INT),
        ("lattice", LATTICE),
        ("let", LET),
        ("map", MAP),
        ("mp", MP),
        ("not", NOT),
        ("of", OF),
        ("or", OR),
        ("order", ORDER),
        ("post", POST),
        ("power", POWER),
        ("pre", PRE),
        ("product", PRODUCT),
        ("rec", REC),
        ("rhs", RHS),
        ("query", QUERY),
        ("set", SET),
        ("sig", SIG),
        ("signature", SIGNATURE),
        ("sum", SUM),
        ("syntree", SYNTREE),
        ("then", THEN),
        ("top", TOP),
        ("true", TRUE),
        ("val", VAL),
        ("var", VAR),
        ("widen", WIDEN),
        ("with", WITH),
        ("AF", AF),
        ("AG", AG),
        ("AU", AU),
        ("AX", AX),
        ("EF", EF),
        ("EG", EG), 
        ("EU", EU),
        ("EX", EX)
    ]

(*--------------------------------------------------------------------*)
(*  Error Report                                                      *)
(*--------------------------------------------------------------------*)

val report_error = fn
    Illegal_character =>
        print_string "Illegal character"
  | Unterminated_comment =>
        print_string "Comment not terminated"
  | Unterminated_nml_string =>
        print_string "Embbed nML expression not terminated"
  | Unterminated_nml_comment =>
        print_string "nML comment not terminated"
val lex_tables = Interop.lexing_to_lex_tables(
  (* lex_base = *) 
   "\000\000\117\000\118\000\120\000\252\255\253\255\017\000\088\000\
    \251\255\254\255\255\255\089\000\255\255\090\000\092\000\215\255\
    \002\000\254\255\224\255\183\000\092\000\243\255\236\255\235\255\
    \237\255\090\000\090\000\090\000\183\000\234\000\238\255\103\000\
    \087\000\089\000\223\255\229\255\024\001\240\255\239\255\228\255\
    \056\000\201\001\242\255\227\255\241\255\001\000\002\000\253\001\
    \216\255\215\002\003\000\004\000\011\003\245\255\229\003\005\000\
    \007\000\025\004\218\255\230\255\091\000\219\255\231\255\099\001\
    \106\000\247\000\234\004\001\005\006\001\118\000\008\000\110\000\
    \225\255\116\000\109\001\232\255\247\255\048\005\007\000",
  (* lex_backtrk = *) 
   "\255\255\255\255\255\255\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255\255\255\003\000\255\255\003\000\003\000\255\255\
    \000\000\255\255\255\255\040\000\011\000\255\255\255\255\255\255\
    \255\255\021\000\029\000\006\000\005\000\005\000\255\255\033\000\
    \035\000\034\000\255\255\255\255\003\000\255\255\255\255\255\255\
    \009\000\002\000\255\255\255\255\255\255\040\000\040\000\040\000\
    \255\255\002\000\255\255\255\255\255\255\255\255\003\000\255\255\
    \255\255\255\255\255\255\255\255\022\000\255\255\255\255\005\000\
    \255\255\255\255\255\255\005\000\005\000\005\000\007\000\255\255\
    \255\255\004\000\005\000\255\255\255\255\038\000\000\000",
  (* lex_default = *) 
   "\015\000\004\000\004\000\004\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\000\000\049\000\049\000\049\000\
    \000\000\255\255\049\000\049\000\049\000\000\000\255\255\054\000\
    \054\000\054\000\000\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\070\000\255\255\
    \000\000\255\255\255\255\000\000\000\000\255\255\255\255",
  (* lex_trans = *) 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\016\000\017\000\078\000\016\000\016\000\078\000\078\000\
    \078\000\000\000\255\255\078\000\078\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\018\000\078\000\019\000\019\000\019\000\019\000\078\000\
    \020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
    \028\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\030\000\010\000\031\000\032\000\033\000\034\000\
    \035\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\037\000\019\000\038\000\039\000\040\000\
    \019\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\042\000\043\000\044\000\019\000\005\000\
    \005\000\009\000\005\000\009\000\010\000\009\000\076\000\073\000\
    \071\000\070\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\060\000\059\000\058\000\053\000\
    \075\000\062\000\069\000\069\000\072\000\013\000\011\000\014\000\
    \006\000\073\000\007\000\000\000\061\000\012\000\069\000\069\000\
    \000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\047\000\
    \077\000\000\000\077\000\077\000\077\000\077\000\000\000\000\000\
    \000\000\077\000\077\000\000\000\077\000\000\000\077\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\077\000\000\000\077\000\077\000\077\000\077\000\077\000\
    \000\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \048\000\255\255\255\255\255\255\255\255\255\255\065\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
    \000\000\000\000\000\000\077\000\000\000\077\000\000\000\077\000\
    \000\000\064\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\000\000\000\000\065\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\066\000\
    \000\000\000\000\000\000\077\000\000\000\077\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\000\000\054\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\000\000\000\000\008\000\008\000\054\000\
    \008\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\055\000\055\000\055\000\055\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\057\000\
    \049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
    \049\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\050\000\050\000\050\000\
    \050\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \052\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\049\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\000\000\000\000\000\000\000\000\049\000\000\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\050\000\050\000\050\000\050\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\052\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\054\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \000\000\000\000\000\000\000\000\054\000\000\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\055\000\055\000\055\000\055\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\057\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \000\000\000\000\000\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\077\000\000\000\077\000\077\000\077\000\077\000\000\000\
    \000\000\000\000\077\000\077\000\000\000\077\000\000\000\077\000\
    \000\000\000\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \000\000\000\000\077\000\000\000\077\000\077\000\077\000\077\000\
    \077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\077\000\000\000\077\000\000\000\
    \077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\077\000\000\000\077\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000",
  (* lex_check = *) 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\016\000\000\000\000\000\016\000\016\000\
    \078\000\255\255\070\000\078\000\078\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\016\000\000\000\000\000\000\000\000\000\078\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
    \002\000\007\000\003\000\011\000\013\000\014\000\020\000\025\000\
    \026\000\027\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\031\000\032\000\033\000\040\000\
    \025\000\060\000\064\000\064\000\071\000\001\000\002\000\001\000\
    \003\000\073\000\003\000\255\255\031\000\002\000\069\000\069\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\255\255\019\000\019\000\019\000\019\000\255\255\255\255\
    \255\255\019\000\019\000\255\255\019\000\255\255\019\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\019\000\255\255\019\000\019\000\019\000\019\000\019\000\
    \255\255\028\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\045\000\046\000\050\000\051\000\055\000\028\000\056\000\
    \070\000\255\255\255\255\255\255\255\255\255\255\255\255\028\000\
    \255\255\255\255\255\255\019\000\255\255\019\000\255\255\019\000\
    \255\255\028\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\255\255\255\255\028\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\028\000\
    \255\255\255\255\255\255\019\000\255\255\019\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\255\255\036\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\255\255\255\255\001\000\002\000\036\000\
    \003\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \041\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\255\255\255\255\255\255\255\255\
    \041\000\255\255\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\049\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\255\255\255\255\255\255\255\255\049\000\255\255\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\054\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \255\255\255\255\255\255\255\255\054\000\255\255\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\066\000\066\000\066\000\066\000\066\000\
    \066\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\067\000\067\000\067\000\067\000\067\000\067\000\
    \255\255\255\255\255\255\066\000\066\000\066\000\066\000\066\000\
    \066\000\077\000\255\255\077\000\077\000\077\000\077\000\255\255\
    \255\255\255\255\077\000\077\000\255\255\077\000\255\255\077\000\
    \255\255\255\255\067\000\067\000\067\000\067\000\067\000\067\000\
    \255\255\255\255\077\000\255\255\077\000\077\000\077\000\077\000\
    \077\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\077\000\255\255\077\000\255\255\
    \077\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\077\000\255\255\077\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255"
)

fun start lexbuf = n_lex_start_rec lexbuf 0
and n_lex_start_rec lexbuf state =
 case (Lexing.engine lex_tables state lexbuf) of
    0 => (
(* # 241 "lexer.nl" *)
      	
        start lexbuf
     )
  | 1 => (
(* # 247 "lexer.nl" *)
      
        FileInfo.store_line_info (Lexing.lexeme_end lexbuf);
        start lexbuf
     )
  | 2 => (
(* # 253 "lexer.nl" *)
      
        let
            val s = Lexing.lexeme lexbuf
            fun token s =
                if (!Parser.check_ctlid) andalso (Parser.is_ctlid s) then
                    (CTLID s)
                else
                    if (!Parser.check_anaid) andalso (Parser.is_anaid s) then
                        (ANAID s)
                    else
                        (LID s)
            val _ = Parser.check_ctlid := false
        in
            FileInfo.set_token_start (Lexing.lexeme_start lexbuf);
            (Hashtbl.find keyword_table s) handle Not_found => token s
        end
     )
  | 3 => (
(* # 273 "lexer.nl" *)
      
        let
            val s = Lexing.lexeme lexbuf
            fun token s = 
                if (!Parser.check_ctlid) andalso (Parser.is_ctlid s) then
                    (CTLID s)
                else
                    if (!Parser.check_anaid) andalso (Parser.is_anaid s) then
                        (ANAID s)
                    else
                        (UID s)
            val _ = Parser.check_ctlid := false
        in
            FileInfo.set_token_start (Lexing.lexeme_start lexbuf);
            (Hashtbl.find keyword_table s) handle Not_found => token s
        end
     )
  | 4 => (
(* # 293 "lexer.nl" *)
      
        FileInfo.set_token_start (Lexing.lexeme_start lexbuf);
        LINE
     )
  | 5 => (
(* # 300 "lexer.nl" *)
      
        let
            val s = Lexing.lexeme lexbuf
        in
            FileInfo.set_token_start (Lexing.lexeme_start lexbuf);
            INTNUM (int_of_string s)
        end
     )
  | 6 => (
(* # 311 "lexer.nl" *)
      
        reset_string_buffer ();
        let
            val nml_start = Lexing.lexeme_start lexbuf
        in
            FileInfo.set_token_start (Lexing.lexeme_start lexbuf);
            embedded_nml_start_pos := nml_start;
            embedded_nml lexbuf;
            NMLEXP (get_stored_string())
        end
     )
  | 7 => (
(* # 325 "lexer.nl" *)
      
        start lexbuf
     )
  | 8 => (
(* # 331 "lexer.nl" *)
      
	comment_depth := 1;
        comment_start_pos := Lexing.lexeme_start lexbuf;
        comment lexbuf;
        start lexbuf
     )
  | 9 => (
(* # 339 "lexer.nl" *)
              UNDER )
  | 10 => (
(* # 340 "lexer.nl" *)
              UNDERUNDER )
  | 11 => (
(* # 341 "lexer.nl" *)
              LPAREN )
  | 12 => (
(* # 342 "lexer.nl" *)
              RPAREN )
  | 13 => (
(* # 343 "lexer.nl" *)
              LBRACE )
  | 14 => (
(* # 344 "lexer.nl" *)
              RBRACE )
  | 15 => (
(* # 345 "lexer.nl" *)
              LBRACKET )
  | 16 => (
(* # 346 "lexer.nl" *)
              RBRACKET )
  | 17 => (
(* # 347 "lexer.nl" *)
              COLON )
  | 18 => (
(* # 348 "lexer.nl" *)
              COMMA )
  | 19 => (
(* # 349 "lexer.nl" *)
              STAR )
  | 20 => (
(* # 350 "lexer.nl" *)
              PLUS )
  | 21 => (
(* # 351 "lexer.nl" *)
              MINUS )
  | 22 => (
(* # 352 "lexer.nl" *)
              LEFTARROW )
  | 23 => (
(* # 353 "lexer.nl" *)
              RIGHTARROW )
  | 24 => (
(* # 354 "lexer.nl" *)
              BOTHARROW )
  | 25 => (
(* # 355 "lexer.nl" *)
              DOUBLEARROW )
  | 26 => (
(* # 356 "lexer.nl" *)
              AT )
  | 27 => (
(* # 357 "lexer.nl" *)
              HAT )
  | 28 => (
(* # 358 "lexer.nl" *)
              BAR )
  | 29 => (
(* # 359 "lexer.nl" *)
              DOT )
  | 30 => (
(* # 360 "lexer.nl" *)
              DOTDOTDOT )
  | 31 => (
(* # 361 "lexer.nl" *)
              BANG )
  | 32 => (
(* # 362 "lexer.nl" *)
              QUESTION )
  | 33 => (
(* # 363 "lexer.nl" *)
              LT )
  | 34 => (
(* # 364 "lexer.nl" *)
              GT )
  | 35 => (
(* # 365 "lexer.nl" *)
              EQ )
  | 36 => (
(* # 366 "lexer.nl" *)
              LE )
  | 37 => (
(* # 367 "lexer.nl" *)
              GE )
  | 38 => (
(* # 371 "lexer.nl" *)
      
        let
            val s = Lexing.lexeme lexbuf
            fun token s = 
                if (!Parser.check_ctlid) andalso (Parser.is_ctlid s) then
                    (CTLID s)
                else
                    if (!Parser.check_anaid) andalso (Parser.is_anaid s) then
                        (ANAID s)
                    else
                        (SID s)
            val _ = Parser.check_ctlid := false
        in
            FileInfo.set_token_start (Lexing.lexeme_start lexbuf);
            token s
        end
     )
  | 39 => (
(* # 390 "lexer.nl" *)
              EOF )
  | 40 => (
(* # 394 "lexer.nl" *)
      
        let
            val s = Lexing.lexeme_start lexbuf
            val e = Lexing.lexeme_end lexbuf
        in
            raise (Error (Illegal_character, s, e))
        end
     )
  | n => (Interop.lexing_field_refill_buff lexbuf) lexbuf; n_lex_start_rec lexbuf n

and comment lexbuf = n_lex_comment_rec lexbuf 1
and n_lex_comment_rec lexbuf state =
 case (Lexing.engine lex_tables state lexbuf) of
    0 => (
(* # 409 "lexer.nl" *)
     
        comment_depth := succ !comment_depth;
        comment lexbuf 
    )
  | 1 => (
(* # 416 "lexer.nl" *)
     
        comment_depth := pred !comment_depth;
        if !comment_depth > 0 then comment lexbuf
    )
  | 2 => (
(* # 423 "lexer.nl" *)
     
        FileInfo.store_line_info (Lexing.lexeme_end lexbuf);
        comment lexbuf
    )
  | 3 => (
(* # 430 "lexer.nl" *)
     
        comment lexbuf
    )
  | 4 => (
(* # 436 "lexer.nl" *)
     
        let
            val s = !comment_start_pos
            val e = s + 2
        in
            raise (Error (Unterminated_comment, s, e))
        end
    )
  | n => (Interop.lexing_field_refill_buff lexbuf) lexbuf; n_lex_comment_rec lexbuf n

and embedded_nml lexbuf = n_lex_embedded_nml_rec lexbuf 2
and n_lex_embedded_nml_rec lexbuf state =
 case (Lexing.engine lex_tables state lexbuf) of
    0 => (
(* # 451 "lexer.nl" *)
     
        ()
    )
  | 1 => (
(* # 456 "lexer.nl" *)
      
        store_string (Lexing.lexeme lexbuf);
	nml_comment_depth := 1;
        nml_comment lexbuf;
        embedded_nml lexbuf
     )
  | 2 => (
(* # 464 "lexer.nl" *)
     
        FileInfo.store_line_info (Lexing.lexeme_end lexbuf);
        store_string_char (Lexing.lexeme_char lexbuf 0);
        embedded_nml lexbuf
    )
  | 3 => (
(* # 472 "lexer.nl" *)
     
        store_string_char (Lexing.lexeme_char lexbuf 0);
        embedded_nml lexbuf
    )
  | 4 => (
(* # 479 "lexer.nl" *)
     
        let
            val s = !embedded_nml_start_pos
            val e = s + 1
        in
            raise (Error (Unterminated_nml_string, s, e))
        end
    )
  | n => (Interop.lexing_field_refill_buff lexbuf) lexbuf; n_lex_embedded_nml_rec lexbuf n

and nml_comment lexbuf = n_lex_nml_comment_rec lexbuf 3
and n_lex_nml_comment_rec lexbuf state =
 case (Lexing.engine lex_tables state lexbuf) of
    0 => (
(* # 494 "lexer.nl" *)
     
        store_string (Lexing.lexeme lexbuf);
        nml_comment_depth := succ !nml_comment_depth;
        nml_comment lexbuf 
    )
  | 1 => (
(* # 502 "lexer.nl" *)
     
        store_string (Lexing.lexeme lexbuf);
        nml_comment_depth := pred !nml_comment_depth;
        if !nml_comment_depth > 0 then nml_comment lexbuf
    )
  | 2 => (
(* # 510 "lexer.nl" *)
     
        FileInfo.store_line_info (Lexing.lexeme_end lexbuf);
        store_string_char (Lexing.lexeme_char lexbuf 0);
        nml_comment lexbuf
    )
  | 3 => (
(* # 518 "lexer.nl" *)
     
        store_string_char (Lexing.lexeme_char lexbuf 0);
        nml_comment lexbuf
    )
  | 4 => (
(* # 525 "lexer.nl" *)
     
        let
            val s = !comment_start_pos
            val e = s + 2
        in
            raise (Error (Unterminated_nml_comment, s, e))
        end
    )
  | n => (Interop.lexing_field_refill_buff lexbuf) lexbuf; n_lex_nml_comment_rec lexbuf n


end
