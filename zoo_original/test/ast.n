(*
 Kwangkeun Yi, The LET Project, KAIST

 Copyright(c) 2001 Research On Program Analysis System
 National Creative Research Initiative Center
 Korea Advanced Institute of Science & Technology
 http://ropas.kaist.ac.kr

 All rights reserved. This file is distributed under the terms of
 an Open Source License.
*)

(* ast for rabbit *)

signature LOC = (* region/location information in rabbit specification *)
  sig
    type loc = int * int
    type region
    val make_region: loc -> loc -> region
    val region_start: region -> loc
    val region_end: region -> loc
    val merge_region: region -> region -> region
    val pp_loc: loc -> unit
    val pp_region: region -> unit
    val loc2string: loc -> string
    val region2string: region -> string
  end

signature NML = (* nML parts to be embedded in rabbit specification *)
  sig
    type tylongid = string
    type strlongid = string
    type ty = string
    type pat = string
    type exp = string
  end

functor RabbitAstFun(L: LOC, Nml: NML) = 
struct
  type id = string 
  type varid = id * L.region
  type varlongid = id list * L.region
  type ctlid = id * L.region
  type ctllongid = id list * L.region
  type cvarid = id * L.region
  type cvarlongid = id list * L.region
  type elmtid = id * L.region
  type elmtlongid = id list * L.region
  type setid = id * L.region
  type setlongid = id list * L.region
  type latid = id * L.region
  type latlongid = id list * L.region
  type domid = id * L.region
  type domlongid = id list * L.region
  type conid = id * L.region
  type conlongid = id list * L.region
  type anaid = id * L.region
  type sigid = id * L.region
  type temid = id * L.region

  type topdec = dec list
  and dec = ADec of adec
          | AnaDec of anadec
          | SigDec of sigdec
          | TemDec of temdec
  and adec = ade list
  and ade = DomDec of domdec
          | SemDec of semdec
          | QueryDec of querydec
  and anadec = {anaid: anaid, anaexp: anaexp}
  and anaexp = AnaExpEnd of adec
             | AnaExpId of anaid
             | AnaExpApp of {temid: temid, params: anaexp list}
  and sigdec = {sigid: sigid, sigexp: sigexp}
  and sigexp = SigExp of adesc
             | SigId of sigid
  and temdec = {temid: temid,
                params: {anaid: anaid, sigexp: sigexp} list,
                body: adec} 
  and adesc =  ades list
  and ades = SDescId of setid
           | SDescKind of setid * kind
           | SDescBind of setdec
           | LDescId of latid
           | LDescKind of latid * kind
           | LDescBind of latdec
           | VarDesc of varid * ty
           | EqnDesc of varid * ty
           | QueryDesc of ctlid * ty
  and kind = SyntreeKind | IndexKind | PowerKind | SumKind
           | ProductKind | ArrowKind | ConstraintKind

  and domdec = SetDec of setdec
             | LatDec of latdec
             | WidenDec of widendec
  and setdec = setid * setexp
  and latdec = latid * latexp
  and widendec = latid * match
  and setexp = NmlTySet of Nml.tylongid   * L.region   (* nML type id *)
             | NmlStrSet of Nml.strlongid * L.region   (* nML structure id *)
             | IdSet of setlongid         * L.region   (* set id *)
             | IntervalSet of exp * exp   * L.region   (* int interval set *)
             | EnumSet of elmtid list     * L.region   (* enumerated set *)
             | PowerSet of setexp            * L.region (* power set *)
             | ProductSet of setexp list     * L.region (* product set *)
             | SumSet of setexp list         * L.region (* separated sum set *)
             | FunSet of setexp * setexp     * L.region (* finite ftn set *)
             | CnstSet of setexp * cnstdec   * L.region    (* constraint set *)
  and cnstdec = cnst list  
  and cnst = {cvar: cvarid list, index: setexp option, rhs: rhs list}
  and rhs = RhsVar
          | RhsVarr of setlongid
          | RhsConid of {conid:conid, carg:carg, flag: atomicflag}
  and atomicflag = Atomic | NonAtomic
  and carg = CargEmpty
           | CargVar
           | CargVarr of setlongid
           | CargSet of setexp
           | CargTuple of carg list

  and latexp = NmlStrLat of Nml.strlongid    * L.region (* nML structure id *)
             | IdLat of latlongid            * L.region (* lattice id *)
             | FlatLat of setexp             * L.region (* flat lattice *)
             | PowerLat of setexp            * L.region (* powerset lattice *)
             | ProductLat of latexp list     * L.region (* product lattice *)
             | SumLat of latexp list         * L.region (* sum lattice *)
             | AtomicLat of latexp * latexp  * L.region (* atomic ftn *)
             | DependLat of setexp * latexp  * L.region (* dependent product *)
             | OrderLat of setexp * order    * L.region (* explicit order *)
  and order = (rop * pat) list * L.region

  and semdec = ValDec of valdec
             | EqnDec of eqndec
             | CcrDec of ccrdec
             | CimDec of cimdec
  and valdec = ValBind of vbind list    * L.region (* and-block bind *)
             | RecValBind of vbind list * L.region (* and-block bind *)
             | FunBind of fbind list    * L.region (* and-block bind *)
             | MapBind of fbind list    * L.region (* and-block bind *)
  and vbind = pat * exp
  and fbind = {varid: varid, pat: pat, exp: exp} list * L.region
  and eqndec = EqnBind of ebind list      * L.region (* and-block bind *)
             | RecEqnBind of ebind list   * L.region (* and-block bind *)
             | FunEqnBind of efbind list  * L.region (* and-block bind *)
  and ebind =  varid * exp                * L.region
  and efbind = {varid: varid, pat: pat, exp: exp} list  * L.region
  and ccrdec = {premise: cnstguard list, conseq: constraint list} * L.region
  and cnstguard = CcrCnst of constraint 
                | CcrGuard of guard
  and constraint = cvarexp * rhsexp list
  and rhsexp = RhsexpCvar of cvarexp
             | RhsexpConid of conlongid * cargexp
  and cargexp = CargexpEmpty
              | CargexpCvar of cvarexp
              | CargexpPat of pat 
              | CargexpTuple of cargexp list
  and cvarexp = {cvarid: cvarlongid, index: pat option}
  and cimdec = conlongid * pat option * exp * L.region

  and exp = NmlExp of Nml.exp       * L.region
          | SetIdExp of setlongid   * L.region
          | CnstExp of constraint   * L.region
          | ConstExp of const       * L.region
          | IdExp of varlongid      * L.region
          | BopExp of exp * bop * exp       * L.region
          | IntervalSetExp of exp * exp     * L.region
          | EnumSetExp of exp list          * L.region
          | SetCompExp of exp list * qual   * L.region
          | MapExp of mrule list            * L.region
          | MapCompExp of mrule list * qual * L.region
          | EmptySetExp of                 L.region
          | FoldJoinExp of exp           * L.region
          | FoldMeetExp of exp           * L.region
          | TupleExp of exp list         * L.region
          | ProjectExp of exp * projtag    * L.region
          | InjectExp of injtag * ty * exp * L.region
          | LetExp of valdec list * exp    * L.region
          | FnExp of match           * L.region
          | AppExp of exp * exp      * L.region
          | CoerceExp of exp * ty    * L.region
          | IndexExp of {tag: tag option , eqnid: varlongid, index: exp} * L.region
          | MapModExp of exp * mrule * L.region
          | MpExp of match           * L.region
          | MappingExp of exp * exp  * L.region
          | CaseExp of exp * match   * L.region
          | IfExp of exp * exp * exp * L.region
  and tag = Pre | Post
  and bop = PlusOp
          | MultiOp
          | MinusOp
          | RelOp of rop
  and const = IntConst of int
            | ElmtIdConst of elmtlongid
            | TopConst
            | BottomConst
            | TrueConst
            | FalseConst
  and projtag = IntProjTag of int
              | IdProjTag of domlongid
  and injtag = int
  and ty = IntTy                  
         | BoolTy                 
         | DomTy of domlongid     * L.region
         | NmlTy of Nml.tylongid  * L.region
         | TupleTy of ty list     * L.region
         | SumTy of ty list       * L.region
         | ArrowTy of ty * ty     * L.region
         | PowerTy of ty          * L.region
         | KindTy of ty * kind    * L.region
  and qual = gen * guard option
  and gen = ge list                  * L.region
  and ge = SetElmtGen of pat * exp   * L.region
         | MapElmtGen of mpat * exp  * L.region
  and guard = RopGuard of rop * exp list * L.region
            | MemberGuard of exp * exp   * L.region
            | NotGuard of guard          * L.region
            | AndGuard of guard list     * L.region
            | OrGuard of guard list      * L.region
            | UnivGuard of gen * guard   * L.region
            | ExisGuard of gen * guard   * L.region
  and rop = LTrop
          | GTrop
          | EQrop
          | LErop
          | GErop
  and match = mrule list     * L.region
  and mrule = pat * exp      * L.region
  and pat = WildPat 
          | VarPat of varid              
          | NmlPat of Nml.pat            
          | SetPat of pat list           
          | SetDotsPat of pat list       
          | IntervalSetPat of pat * pat  
          | MapPat of mpat list          
          | MapDotsPat of mpat list      
          | InjectPat of injtag * pat    
          | TuplePat of pat list         
          | GuardedPat of pat * guard    
          | OrPat of pat list            
          | AsPat of varid * pat         
          | TyPat of pat * ty            
          | ConstPat of const            
          | RopPat of pat * rop * exp    
          | InPat of pat * exp           
  and mpat = pat * pat 

  and querydec = ctlid * ctl * L.region
  and ctl = FormulaCtl of {id:varid, tag: tag option, eqnid: varlongid, formula: form}
          | GuardCtl of {id: varid, tag: tag option, eqnid: varlongid, guard: guard}
  and form = AppForm of ctlid * varid  * L.region
           | NotForm of form           * L.region
           | AndForm of form list      * L.region
           | OrForm of form list       * L.region
           | ImplyForm of form * form  * L.region
           | EquivForm of form * form  * L.region
           | AXForm of ctl       * L.region
           | AFForm of ctl       * L.region
           | AGForm of ctl       * L.region
           | AUForm of ctl * ctl * L.region
           | EXForm of ctl       * L.region
           | EFForm of ctl       * L.region
           | EGForm of ctl       * L.region
           | EUForm of ctl * ctl * L.region

end
