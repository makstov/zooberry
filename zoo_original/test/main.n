(*====================================================================*)
(*  You-il Kim, The LET Project, KAIST                                *)
(*--------------------------------------------------------------------*)
(*  Copyright(c) 2001 Research On Program Analysis System             *)
(*  National Creative Research Initiative Center                      *)
(*  Korea Advanced Institute of Science & Technology                  *)
(*  http://ropas.kaist.ac.kr                                          *)
(*--------------------------------------------------------------------*)
(*  All rights reserved. This file is distributed under the terms of  *)
(*  an Open Source License.                                           *)
(*====================================================================*)

val files = ref ([]:string list)
val verbose_mode = ref False

fun report_error (Parsing.Parse_error) =
        print_newline ();
        print_string "오류로 인해 파싱이 중단되었습니다.";
        print_newline ()
  | report_error (ErrorInfo.Error e) =
        ErrorInfo.report_error e;
        print_newline ();
        print_string "오류로 인해 파싱이 중단되었습니다.";
        print_newline ()
  | report_error (Sys_error s) =
        print_string s;
        print_newline ()
  | report_error e = 
        raise e

(*
fun usage () =
        print_string "Usage: rabbit [-v] <filename>\n";
        print_string "  -v  Print abstract syntax tree of the program\n"
*)

fun run [] = ()
  | run (filename::l) =
        let
            val file_channel = open_in filename

            val _ = print_string (filename^": ")

            val lexbuf = Lexing.from_channel file_channel 
            val result = Parser.rabbit Lexer.start lexbuf
        in
            if (!verbose_mode) then
                (print_newline ();
                 Print.print_topdec result)
            else
                (print_string "오류가 없습니다.";
                 print_newline ());

            run l
        end


fun collect_filename filename = (files := (!files) @ [filename])

val usage = "Usage: rabbit [-v] <files>\n"

val _ = Arg.parse
    [
        ("-v", Arg.Unit (fn () => (verbose_mode := True)), " verbose mode")
    ]
    collect_filename usage

val _ = run (!files) handle e => report_error e
