(*====================================================================*)
(*  You-il Kim, The LET Project, KAIST                                *)
(*--------------------------------------------------------------------*)
(*  Copyright(c) 2001 Research On Program Analysis System             *)
(*  National Creative Research Initiative Center                      *)
(*  Korea Advanced Institute of Science & Technology                  *)
(*  http://ropas.kaist.ac.kr                                          *)
(*--------------------------------------------------------------------*)
(*  All rights reserved. This file is distributed under the terms of  *)
(*  an Open Source License.                                           *)
(*====================================================================*)

(*
val elements = [1, 2, 3, 4]
val relation = 
[
    (1, 1), (2, 2), (3, 3), (4, 4), (2, 1), (4, 2), (4, 1), (3, 1), (4, 3)
]
*)

val elements = [1, 2, 3, 4, 5, 6]
val relation =
[
    (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6),
    (2, 1), (4, 2), (4, 1), (6, 4), (6, 2), (6, 1),
    (3, 1), (5, 3), (5, 1), (6, 5), (6, 3),
    (4, 3), (5, 2),
    (2, 3)
]


fun reflexive_closure ([],relation) = relation
  | reflexive_closure ((x::l),relation) = 
        if List.exist (fn (y,z) => (x = y) andalso (x = z)) relation then
            reflexive_close(l,relation)
        else
            reflexive_close(l,((x,x)::relation))

fun is_antisymmetric [] = true
  | is_antisymmetric ((x,y)::l) = 
        let
            val c1 = List.exists (fn (y',x') => (x = x') andalso (y = y')) l
            val c2 = is_antisymmetric l
        in
            (not c1) andalso c2
        end

fun least_exists (elements,relation) =
    let
        fun is_minimal x = 
            not (List.exists (fn (y,z) => (x = z) andalso not (y = z)) relation)
        val minimals = List.filter is_minimal elements
    in
        (List.length minimals) = 1 
    end

fun combinations [] = []
  | combinations (x::l) = (List.map (fn y => (x,y)) l) @ (combinations l)

fun upper_elements (elements,relation) a b =
    let
        fun is_upper x =
            let
                val c1 = List.exists (fn (y,z) => (y = a) && (z = x)) relation
                val c2 = List.exists (fn (y,z) => (y = b) && (z = x)) relation
            in
                c1 && c2
            end
    in
        List.filter is_upper elements
    end

fun is_valid_lattice (element,relation) =
    if least_exists (element,relation) then
        let
            val pairs = combinations elements
            fun check (a,b) =
                let
                    val uppers = upper_elements (elements,relation) a b
                    fun filter (x,y) =
                        let
                            val c1 = List.exists (fn z => x = z) uppers
                            val c2 = List.exists (fn z => y = z) uppers
                        in
                            c1 && c2
                        end
                    val relation' = List.filter filter relation
                in
                    not (least_exists (uppers,relation'))
                end    
        in
            not (List.exists check pairs)
        end
    else
        false
