(* Invariants *)
- 한 Rabbit type 에 오직 하나의 domain implementation 이 존재한다.
- 될 수 있으면 deforest! (no hash consing)
- Rabbit 식들의 타입과 선언된 도메인들과는 1-1일 필요가 있을까?
  필요없을듯. 대게 Rabbit 식들의 타입은 선언된 도메인들 보다 많다.
  tycheck 과정을 통해서, 장차 필요한 도메인 선언들이 무엇인지 모으도록 한다.
- translation은 type safety를 보존해야 한다. 즉, Rabbit 프로그램이 타입검증이 되면, nML로 변환된 프로그램도
  nML 타입검증을 통과해야한다. 

(* Domain (set or lattice) functor definitions *)

signature DOMAIN =
sig
 type 'a elmt
 type index
 val index: 'a elmt -> index
end

signature SET = sig include DOMAIN end
signature SYNTREE_SET
signature INDEX_SET
signature INTEGER_SET
signature INTERVAL_SET = sig        (* a power set of integers that will be implemented as set of integer intervals *)
                          type atom
                          include DOMAIN
                          val make_interval: atom -> atom -> atom elmt
                          val min: atom elmt -> atom
                          val max: atom elmt -> atom
                         end

signature POWER_SET = sig
			type atom
			include SET
			val make: atom -> atom elmt
			val make2: atom -> atom -> atom elmt
			val map: (atom -> 'a) -> atom elmt -> 'a list
			val mapfold: (atom -> 'a) -> atom elmt -> ('a -> 'a -> 'b) -> 'b -> 'b
                                    (* mapfold f L g x = List.fold_right g x (map f L)
                                                         i.e., apply f to each element of L and
                                                               foldr g with initial value x
                                       and the intermediate list is not generated *)
                        val fold: (atom -> 'a -> 'a) -> 'a -> atom elmt -> 'a
			val join: atom elmt -> atom elmt -> atom elmt
			val meet: atom elmt -> atom elmt -> atom elmt
			val diff: atom elmt -> atom elmt -> atom elmt
			val top: atom elmt
			val bottom: atom elmt
			val joinN: atom elmt list -> atom elmt
			val meetN: atom elmt list -> atom elmt
			val join3: atom elmt -> atom elmt -> atom elmt -> atom elmt
			val join4: atom elmt -> atom elmt -> atom elmt -> atom elmt -> atom elmt
                        val in: atom -> atom elmt -> bool (* member test *)
		      end
signature SUM_SET = sig
                      type elmt = First of elmt1 | Second of elmt2 | Third of elmt3 | ... | Nth of elmtN
                    end
signature PROD_SET
signature ARROW_SET = sig
			type dom and rng 
			include SET
			val make: dom * rng -> (dom * rng) elmt
			val make2: dom * rng -> dom * rng -> (dom * rng) elmt
			val map: (dom * rng -> 'a) -> (dom * rng) elmt -> 'a list
			val mapfold: ((dom * rng) -> 'a) -> (dom * rng) elmt -> ('a -> 'a -> 'b) -> 'b -> 'b
                        val fold: ((dom * rng) -> 'a -> 'a) -> 'a -> (dom * rng ) elmt -> 'a
			val join: (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt
			val meet: (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt
			val diff: (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt
			val top: (dom * rng) elmt
			val bottom: (dom * rng) elmt
			val joinN: (dom * rng) elmt list -> (dom * rng) elmt
			val meetN: (dom * rng) elmt list -> (dom * rng) elmt
                        val image: (dom * rng) elmt -> dom -> rng
			val join3: (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt
			val join4: (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt
                        val constant: (dom * rng) elmt -> rng -> bool  (* constant map test *)
                        val shadow: (dom * rng) elmt -> dom -> rng -> (dom * rng) elmt  (* f[y/x] *)
                        val in: (dom * rng) -> (dom * rng) elmt -> bool (* membership test for an entry *)
		      end

signature LATTICE = sig
			include DOMAIN
			val top: 'a elmt
			val bottom: 'a elmt
			val join: 'a elmt -> 'a elmt -> 'a elmt
			val meet: 'a elmt -> 'a elmt -> 'a elmt
			val leq: 'a elmt -> 'a elmt -> bool
			val lt: 'a elmt -> 'a elmt -> bool
                        val widen: 'a elmt -> 'a elmt (* every lattice has this homomorphism *)
		    end
signature POWER_LAT = sig
			type atom
			include LATTICE
			val map: (atom -> 'a) -> atom elmt -> 'a list
			val mapfold: (atom -> 'a) -> atom elmt -> ('a -> 'a -> 'b) -> 'b -> 'b
                        val fold: (atom -> 'a -> 'a) -> 'a -> atom elmt -> 'a
			val make: atom -> atom elmt
			val make2: atom -> atom -> atom elmt
			val joinN: atom elmt list -> atom elmt
			val meetN: atom elmt list -> atom elmt
			val join3: atom elmt -> atom elmt -> atom elmt -> atom elmt
			val join4: atom elmt -> atom elmt -> atom elmt -> atom elmt -> atom elmt
                        val in: atom elmt -> atom -> bool (* member test *)
		      end
signature SUM_LAT = sig
                      type elmt = First of elmt1 | Second of elmt2 | Third of elmt3 | ... | Nth of elmtN
                    end
signature PROD_LAT
signature ARROW_LAT = sig
			type dom and rng
			include LATTICE
			val make: dom * rng -> (dom * rng) elmt
			val make2: dom * rng -> dom * rng -> (dom * rng) elmt
			val map: (dom * rng -> 'a) -> (dom * rng) elmt -> 'a list
			val mapfold: ((dom * rng) -> 'a) -> (dom * rng) elmt -> ('a -> 'a -> 'b) -> 'b -> 'b
                        val fold: ((dom * rng) -> 'a -> 'a) -> 'a -> (dom * rng ) elmt -> 'a
                        val image: (dom * rng) elmt -> dom -> rng
			val joinN: (dom * rng) elmt list -> (dom * rng) elmt
			val meetN: (dom * rng) elmt list -> (dom * rng) elmt
			val join3: (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt
			val join4: (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt -> (dom * rng) elmt
                        val constant: (dom * rng) elmt -> rng -> bool (* constant map test *)
                        val shadow: (dom * rng) elmt -> dom -> rng -> (dom * rng) elmt  (* f[y/x] *)
                        val in: (dom * rng) -> (dom * rng) elmt -> bool (* membership test for an entry *)
		      end

(* Utility functions to used during the translation *)

val tynom_ty: rabbit_ty -> tynom   (* for <tynom: given Rabbit type ty, return its, if any, defined domain name *)

- 부분분석(separate analysis)를 지원하기 위해서 분석결과와 분석 방정식을 dump/restore해주는 함수가 필요. 
  부분분석에서는 조각조각난 프로그램 모듈들을 의존관계를 준수하면서 분석하고 그 분석결과를 보관해서 다음의 조각을 분석할 때
  복구해서 쓰게된다.
