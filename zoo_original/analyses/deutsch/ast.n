(*
   Ast for Alain Deutsch's May-Alias Analysis
   Sukyoung Ryu 7/9/2001
*)

signature Ast =
sig

type ty
type var = string
type sel =         (* selectors *)
    Var of var     (* structure field names, variable names *)
  | Star
type ap = sel list (* access path = a string of selectors connected by "." *)
type exp =
    Ass of ap * ap (* assignment *)
  | Ftn of var * ap list * exp
  | App of var * ap list

type matchKind = Equiv | In | Ni (* \equiv, \in, \ni *)
type equation = Eq of var * var

(* mkAssIn(l,r) = (lhs, sigma, rhs) *)
(* where 'lhs.sigma \not(<=) rhs' and 'lhs.sigma \not(>=) rhs' *)
val mkAssIn: ap * ap -> ap * sel * ap

(* mkAp(lhs,sigma) = lhs.sigma *)
val mkAp: ap * sel -> ap
(* mkAp'(u,M) = u.M *)
val mkAp': sel * ap -> ap
(* mkAp''(f1,f2) = f1.f2 *)
val mkAp'': ap * ap -> ap
(* mkStar(a) = a.* *)
val mkStar: ap -> ap
val splitAp: ap -> sel * ap

val typeof: ap -> ty
val getArgs: var -> ap list  (* formal parameters of a function *)
val getBody: var -> exp      (* body of a function *)

val isGlobal: sel -> bool    (* is a global *)
val isGeneric: sel -> bool   (* is a generic name *)

val len: 'a list -> int
val nth: 'a list * int -> 'a
val list2set: 'a list -> 'a set
val set2list: 'a set -> 'a list

end (* Ast *)
