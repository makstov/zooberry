signature WEAK_HASH_TABLE =
  sig
    type entry
    type 'a hash_table
      
    val mkTable : unit -> entry hash_table
    val insert : entry hash_table -> (int * entry) -> unit
    val peek : entry hash_table -> int -> entry option
    val find : entry hash_table -> int -> entry
    val remove : entry hash_table -> int -> entry
    val numItems : entry hash_table ->  int
    val listItems : entry hash_table -> (int * entry) list
    val apply : ((int * entry) -> entry) -> entry hash_table -> unit
    val map : ((int * entry) -> '2b) -> entry hash_table -> '2b hash_table
    val filter : ((int * entry) -> bool) -> entry hash_table -> unit
    val transform : (entry -> '2b) -> entry hash_table -> '2b hash_table
    val copy : '1a hash_table -> '1a hash_table
    val bucketSizes : entry hash_table -> int list
  end 

functor WeakHashTable (C : sig type cell end) : WEAK_HASH_TABLE =
  struct
    exception NotFound
    type entry = C.cell System.Weak.weak list

    type 'a bucket_t
      = NIL
      | B of (int * 'a * 'a bucket_t)

    type 'a hash_table = HT of {
	not_found : exn,
	table : 'a bucket_t array ref,
	n_items : int ref
      }

  val htSizes = [103,223,419,823,1613,3217,6421,12829,25633,51217,99991]
		(* prime numbers *)
  exception HashSizeRoundUp
  fun roundUp n =
    if n < 103 orelse n > 99991 then raise HashSizeRoundUp
      else
	let
	  fun r [] = raise HashSizeRoundUp
	    | r (a::b) = if n > a then r b
	                 else a
	in
	  r htSizes
	end

    fun mkTable () = HT{
	    not_found = NotFound,
	    table = ref (Array.array(103, NIL)),
	    n_items = ref 0
	  }

    fun growTable (ht as HT{table, n_items, ...}) = let
	    val arr = !table
	    val sz = Array.length arr
	    val grow_threshold = 2
	    in
	      if (!n_items >= sz * grow_threshold)
		then let
		  val newSz = roundUp (sz+1)
		  val newArr = Array.array (newSz, NIL)
		  fun copy NIL = ()
		    | copy (B (key, v, rest)) = let
			val indx = key mod newSz
			in
			  Array.update (newArr, indx,
			    B(key, v, Array.sub(newArr, indx)));
			  copy rest
			end
		  fun bucket n = (copy (Array.sub(arr, n)); bucket (n+1))
		  in
		    (bucket 0) handle _ => ();
		    table := newArr
		  end
		else ()
	    end (* growTable *)

    and clean(ht) =			(* recycle the weak cells and
					   accordingly shrink the table size *)
      	  let 
	    fun recycle [] = []
	      | recycle (a::b) = 
		(case System.Weak.strong a 
		   of NONE => recycle b
		    | SOME a' => a :: (recycle b)
		) 
	  in 
	    apply
	    (fn (key, entry) => recycle entry) (* recycle the spline *)
	    ht ;
	    filter
	    (fn (key, []) => false | _ => true)	(* remove empty entry *)
	    ht
	  end 

    and insert (tbl as HT{table, n_items, ...}) (key, item) = let
	  val arr = !table
	  val sz = Array.length arr
	  val indx = key mod sz	
	  fun look NIL = (
		Array.update(arr,indx,B(key,item,Array.sub(arr,indx)));
		n_items := !n_items + 1;
		growTable tbl
		   handle HashSizeRoundUp =>
			  (clean tbl; growTable tbl);
			  (* after clean up, if the table size is
			     still too big, then stop. *)
		NIL)
	    | look (B(k, v, r)) = if key = k
		then B(key, item, r)
		else (case (look r)
		   of NIL => NIL
		    | rest => B(k, v, rest)
		  (* end case *))
	  in
	    case (look (Array.sub (arr, indx)))
	     of NIL => ()
	      | b => Array.update(arr, indx, b)
	  end

  (* find an item, the table's exception is raised if the item doesn't exist *)
    and find (HT{table, not_found, ...}) key = let
	  val arr = !table
	  val sz = Array.length arr
	  val indx = key mod sz
	  fun look NIL = raise not_found
	    | look (B(k, v, r)) = if key = k then v else look r
	  in
	    look (Array.sub (arr, indx))
	  end

  (* look for an item, return NONE if the item doesn't exist *)
    and peek (HT{table, ...}) key = let
	  val arr = !table
	  val sz = Array.length arr
	  val indx = key mod sz
	  fun look NIL = NONE
	    | look (B(k, v, r)) = if key = k then SOME v else look r
	  in
	    look (Array.sub (arr, indx))
	  end

  (* Remove an item.  The table's exception is raised if
   * the item doesn't exist.
   *)
   and remove (HT{not_found, table, n_items}) key = let
	  val arr = !table
	  val sz = Array.length arr
	  val indx = key mod sz
	  fun look NIL = raise not_found
	    | look (B(k, v, r)) = if key = k
		then (v, r)
		else let val (item, r') = look r in (item, B(k, v, r')) end
	  val (item, bucket) = look (Array.sub (arr, indx))
	  in
	    Array.update (arr, indx, bucket);
	    n_items := !n_items - 1;
	    item
	  end (* remove *)

  (* Return the number of items in the table *)
  and numItems (HT{n_items, ...}) = !n_items

  (* return a list of the items in the table *)
  and listItems (HT{table = ref arr, n_items, ...}) = let
	  fun f (_, l, 0) = l
	    | f (~1, l, _) = l
	    | f (i, l, n) = let
		fun g (NIL, l, n) = f (i-1, l, n)
		  | g (B(k, v, r), l, n) = g(r, (k, v)::l, n-1)
		in
		  g (Array.sub(arr, i), l, n)
		end
	  in
	    f ((Array.length arr) - 1, [], !n_items)
	  end (* listItems *)

  (* Apply a function to the entries of the table *)
  and apply f (HT{table, ...}) = let
	  fun appF NIL = ()
	    | appF (B(key, item, rest)) = (
		f (key, item);
		appF rest)
	  val arr = !table
	  val sz = Array.length arr
	  fun appToTbl i = if (i < sz)
		then (appF (Array.sub (arr, i)); appToTbl(i+1))
		else ()
	  in
	    appToTbl 0
	  end (* apply *)

  (* Map a table to a new table that has the same keys and exception *)
  and map f (HT{table, n_items, not_found}) = let
	  fun mapF NIL = NIL
	    | mapF (B(key, item, rest)) =
		B(key, f (key, item), mapF rest)
	  val arr = !table
	  val sz = Array.length arr
	  val newArr = Array.array (sz, NIL)
	  fun mapTbl i = if (i < sz)
		then (
		  Array.update(newArr, i, mapF (Array.sub(arr, i)));
		  mapTbl (i+1))
		else ()
	  in
	    mapTbl 0;
	    HT{table = ref newArr, n_items = ref(!n_items), not_found = not_found}
	  end (* transform *)

  (* remove any hash table items that do not satisfy the given
   * predicate.
   *)
  and filter pred (HT{table, n_items, not_found}) = let
	  fun filterP NIL = NIL
	    | filterP (B(key, item, rest)) = if (pred(key, item))
		then B(key, item, filterP rest)
		else filterP rest
	  val arr = !table
	  val sz = Array.length arr
	  fun filterTbl i = if (i < sz)
		then (
		  Array.update (arr, i, filterP (Array.sub (arr, i)));
		  filterTbl (i+1))
		else ()
	  in
	    filterTbl 0
	  end (* filter *)

  (* Map a table to a new table that has the same keys and exception *)
  and transform f (HT{table, n_items, not_found}) = let
	  fun mapF NIL = NIL
	    | mapF (B(key, item, rest)) = B(key, f item, mapF rest)
	  val arr = !table
	  val sz = Array.length arr
	  val newArr = Array.array (sz, NIL)
	  fun mapTbl i = if (i < sz)
		then (
		  Array.update(newArr, i, mapF (Array.sub(arr, i)));
		  mapTbl (i+1))
		else ()
	  in
	    mapTbl 0;
	    HT{table = ref newArr, n_items = ref(!n_items), not_found = not_found}
	  end (* transform *)

  (* Create a copy of a hash table *)
  and copy (HT{table, n_items, not_found}) = let
	  val arr = !table
	  val sz = Array.length arr
	  val newArr = Array.array (sz, NIL)
	  fun mapTbl i = (
		Array.update (newArr, i, Array.sub(arr, i));
		mapTbl (i+1))
	  in
	    (mapTbl 0) handle _ => ();
	    HT{table = ref newArr, n_items = ref(!n_items), not_found = not_found}
	  end (* copy *)

  and bucketSizes (HT{table = ref arr, ...}) = let
	  fun len (NIL, n) = n
	    | len (B(_, _, r), n) = len(r, n+1)
	  fun f (~1, l) = l
	    | f (i, l) = f (i-1, len (Array.sub (arr, i), 0) :: l)
	  in
	    f ((Array.length arr)-1, [])
	  end

  end (* HashTable *)
