(*
 * ProdLatticeCode: product lattice code is generated online
 *)
structure ProdLatticeCode = 
    struct
	open Error
	exception LattCodeError
	
	fun datatypeCode(file, Ast.LATTICE(name,Ast.PRODUCT(children),proj)) =
	  (output(file,
		  format "\ntype addr_t = int ref\
		          \\ntype elmt = addr_t * (%s)"
		  [STR(Old.implode(Zutil.wedge
			       (map (fn x => format
				             "(%s.elmt %s.t)"
					     [STR(x),STR(x)])
			            children,
				"*")))]);
	   output(file,	"\ntype 'a t = BOT | TOP | ELMT of 'a");
	   output(file, "\nval BOTaddr = ref(0)");
	   output(file, "\nval TOPaddr = ref(1)")
	   )

	fun hashCode(file,   Ast.LATTICE(name,Ast.PRODUCT(children),proj)) =
	   output(file,
		  format
		  "\nstructure HT = WeakHashTable(type cell = elmt t)\
                   \\nstructure JT = WeakHashTable(type cell = elmt t * elmt t * elmt t)\
		   \\nval ht = HT.mkTable()\
	           \\nval jt = JT.mkTable()\
		   \\nfun rotateAdd(x,y) = Bits.xorb\
		   \\n   (Bits.xorb(Bits.lshift(x,5),\
		   \\n              Bits.rshift(x,26)),\
		   \\n    y)\
	           \\nfun newaddr(x:int) = ref x\
        \\nfun hash_stat stream =\
	\\n let\
\\n           fun p [] = ()\
\\n             | p (a::b) =\
\\n              (output(stream, Format.format \", %%d\" [Format.INT(a)]);\
\\n               p b)\
\\n         in\
\\n           (output(stream, \"\\n%s:ht\");\
\\n            p (HT.bucketSizes ht);\
\\n            output(stream, \"\\n%s:jt\");\
\\n            p (JT.bucketSizes jt))\
\\n         end"
(*	  STR(Old.implode
		       (Zutil.wedge
			(map (fn x =>
			      format "(%s.elmt %s.t)" [STR(x),STR(x)])
			     children,
			 "*"))), *)
		[STR(name),STR(name)])

	fun uniqueCode(file, Ast.LATTICE(name,Ast.PRODUCT(children),proj)) =
	  let
	    val args = Zutil.uniqueVarDomPairLst("a",children)
	    val (xs,_) = Old.unzip args
	    val xs_comma = Old.implode(Zutil.wedge(xs, ","))
	    val xs_commap = Old.implode(Zutil.wedge(map (fn x => x^"'") xs, ","))
	  in
	    output(file,
		   format "\
	\\n  fun unique(%s) = BOT\
     	\\n    | unique(%s) = TOP\
     	\\n    | unique(x as (%s)) = \
     	\\n      let \
	\\n         val hv = %s \
     	\\n      in \
     	\\n      case HT.peek ht hv \
     	\\n       of NONE => let val x = ELMT(newaddr(hv),x) \
          \\n                in (HT.insert ht \
          \\n                    (hv, [System.Weak.weak x]); x) end \
          \\n      | SOME l => \
	  \\n        let\
          \\n           fun match nil =      \
          \\n             let val x = ELMT(newaddr(hv), x) \
          \\n             in (HT.insert\
          \\n                 ht (hv, (System.Weak.weak x :: l)); x) \
          \\n             end  \
          \\n             | match (a::b) = \
          \\n              (case System.Weak.strong(a) \
          \\n                of NONE => match b \
          \\n                 | SOME(a') => if equiv(x,a')  \
          \\n                           then a' else match b \
          \\n              ) \
          \\n           and equiv((%s),ELMT(a,(%s))) = %s \
          \\n        in \
          \\n           match l \
          \\n        end\
	  \\n    end"
             [STR(Old.implode(Zutil.wedge(map (fn (x,dom) => dom^".BOT") args,
				      ","))),
              STR(Old.implode(Zutil.wedge(map (fn (x,dom) => dom^".TOP") args,
				      ","))),
              STR(xs_comma),
	      STR(Old.fold (fn ((arg,dom),accum) =>
			        format
				"rotateAdd(%s,!(%s.addr(%s)))"
				[STR(accum), STR(dom), STR(arg)])
		            args
			    "0"),
              STR(xs_comma), STR(xs_commap),
              STR(Old.implode(Zutil.wedge(map (fn (x,dom) =>
					   format
					   "(%s.addr(%s) = %s.addr(%s'))"
					   [STR(dom),STR(x),STR(dom),STR(x)])
				           args,
				      " andalso ")))]
	     ) (* output *)
	  end
		 
	fun makeCode(file, Ast.LATTICE(name,Ast.PRODUCT(children),proj)) =
	  (*
	    fun make (A.BOT,...,Z.BOT) = BOT
	      | make (A.TOP,...,Z.TOP) = TOP
	      | make x: A.t * ... * Z.t = unique x
	   *)
	  case children
	    of [a] => (output(file,
			      format "\nfun make (%s.BOT) = BOT" [STR(a)]);
		       output(file,
			      format "\n  | make (%s.TOP) = TOP" [STR(a)]);
		       output(file, "\n  | make x = ELMT x"))
	     | a::b =>(output(file,
			      format "\nfun make (%s.BOT" [STR(a)]);
		       app (fn (x) => output(file,
					     format
					     ", %s.BOT" [STR(x)]))
		           b;
		       output(file, ") = BOT");
		       output(file,
			      format "\n |  make (%s.TOP" [STR(a)]);
		       app (fn (x) => output(file,
					     format
					     ", %s.TOP" [STR(x)]))
		           b;
		       output(file, ") = TOP");
		       output(file, "\n |  make x = unique x")
		       )
	     | _ => raise LattCodeError

	fun joinCode(file, Ast.LATTICE(name,Ast.PRODUCT(children),proj)) =
	    let	
		val args = Zutil.uniqueVarDomPairLst("v", children)
		val (xs,_) = Old.unzip args
		val argso = Old.implode(Zutil.wedge(xs, ","))
		val argsop = Old.implode(Zutil.wedge(map (fn x => x^"'") xs, ","))
	    in
	      output(file,
		     format
		     "\
          \\n fun join (BOT,x) = x\
          \\n      | join (x,BOT) = x\
          \\n      | join (_,TOP) = TOP\
          \\n      | join (TOP,_) = TOP\
          \\n      | join (x as ELMT(a1,(%s)), y as ELMT(a2,(%s))) = \
          \\n     if a1 = a2 then x\
          \\n       else\
          \\n         let\
          \\n           val hv = rotateAdd(!a1,!a2)\
          \\n         in\
          \\n           case JT.peek jt hv\
          \\n            of NONE => let\
          \\n                   val joined = unique(%s)\
          \\n                 in (JT.insert jt (hv,\
          \\n                     [System.Weak.weak (x,y,joined)]);\
          \\n                     joined)\
          \\n                 end\
          \\n          | SOME l =>\
          \\n              let\
          \\n                fun match nil = \
          \\n               let val joined = unique(%s)\
          \\n               in (JT.insert jt (hv,\
          \\n                   (System.Weak.weak(x,y,joined)::l));\
          \\n                   joined)\
          \\n               end\
          \\n               | match (a::b) =\
          \\n                 (case System.Weak.strong(a)\
          \\n                    of NONE => match b\
          \\n                     | SOME(ELMT(a1',_),ELMT(a2',_),joined') =>\
          \\n                      if (a1 = a1' andalso a2 = a2')\
          \\n                       orelse\
          \\n                       (a1 = a2' andalso a2 = a1')\
          \\n                      then joined'\
          \\n                      else match b\
          \\n                  )\
          \\n              in\
          \\n                match l\
          \\n              end\
          \\n         end"
		     [STR(argso),STR(argsop),
		      STR(Old.implode(Zutil.wedge(map (fn (x,dom) =>
					     format
					     "%s.join(%s,%s')"
					     [STR(dom),STR(x),STR(x)])
					     args,
					","))),
		      STR(Old.implode(Zutil.wedge(map (fn (x,dom) =>
					     format
					     "%s.join(%s,%s')"
					     [STR(dom),STR(x),STR(x)])
					     args,
					",")))]
		     ) (* output *)
	    end


	fun leCode(file, Ast.LATTICE(name,Ast.PRODUCT(children),proj)) =
	    let val args = Zutil.uniqueVarDomPairLst("l", children)
	        val (xs,_) = Old.unzip args
		val argo = Old.implode(Zutil.wedge(xs, ","))
		val argoo = Old.implode(Zutil.wedge(map (fn x => x^"'") xs, ","))
	    in
	      output(file,
		    format
		    "\
        \\nfun le (BOT,_) = true\
     \\n  | le (_,BOT) = false\
     \\n  | le (_,TOP) = true\
     \\n  | le (TOP,_) = false\
     \\n  | le (x as ELMT(a1,(%s)), y as ELMT(a2,(%s))) =\
     \\n    if a1 = a2 then true\
     \\n    else\
     \\n     let\
     \\n       val hv = rotateAdd(!a1,!a2)\
     \\n     in\
     \\n       case JT.peek jt hv\
     \\n         of NONE => if (%s) then\
     \\n                       (JT.insert jt (hv,\
     \\n                  [System.Weak.weak(x,y,y)]);\
     \\n                  true)\
     \\n                 else false\
     \\n          | SOME l =>\
     \\n             let\
     \\n            fun match nil =\
     \\n                if (%s) then\
     \\n                 (JT.insert\
     \\n                   jt (hv, (System.Weak.weak (x,y,y)::l));\
     \\n                  true)\
     \\n                else false                \
     \\n              | match (a::b) =\
     \\n             (case System.Weak.strong a\
     \\n                of NONE => match b\
     \\n                 | SOME(ELMT(a1',_),ELMT(a2',_),ELMT(a3',_)) =>\
     \\n                   if (a1 = a1' andalso\
     \\n                    a2 = a2' andalso a2 = a3') orelse\
     \\n                   (a1 = a2' andalso\
     \\n                    a1 = a1' andalso a2 = a3') then\
     \\n                   true\
     \\n                   else match b\
     \\n             )\
     \\n          in\
     \\n            match l\
     \\n          end\
     \\n     end"
		    [STR(argo),STR(argoo),
		     STR(Old.implode(Zutil.wedge
				 (map
				  (fn (x,dom) =>
				   format
				   "%s.le(%s,%s')"
				   [STR(dom),STR(x),STR(x)])
				  args,
				  " andalso "))),
		     STR(Old.implode(Zutil.wedge
				 (map
				  (fn (x,dom) =>
				   format
				   "%s.le(%s,%s')"
				   [STR(dom),STR(x),STR(x)])
				  args,
				  " andalso ")))]
		    ) (* output *)
	    end

	fun selectCode(file, Ast.LATTICE(name,Ast.PRODUCT(children),proj)) =
	    let val args = Zutil.uniqueVarDomPairLst("s", children)
		val out = file
	    in app (fn (a,b) => output(out,
				       format
				       "\nfun %s (BOT) = %s.BOT \
			                \\n | %s (TOP) = %s.TOP \
				        \\n | %s (ELMT(_,%s)) = %s\n"
				       [STR(b), STR(b),STR(b),
					STR(b), STR(b),
					STR(Zutil.ppPatVarLst(args,a)),
					STR(a)]))
		   args
	    end
	  
	fun addrCode(file, Ast.LATTICE(name,Ast.PRODUCT(children),proj)) =
	    output(file,
		   "\nfun addr BOT = BOTaddr\
		    \\n | addr TOP = TOPaddr\
		    \\n | addr (ELMT(a, _)) = a\
		    \\nfun hash x = !(addr x)")

	fun ppCode(file, Ast.LATTICE(name,Ast.PRODUCT(children),proj)) =
	    let val args = Zutil.uniqueVarDomPairLst("v", children)
		val out = file
		val len = String.size(name)
		val _ = output(out,
			       format
			       "\nfun pp(x,file,indent) = let\
				\\n val indent' = if indent <= %d then 1\
				\\n               else indent-%d\
				\\n val _ = Zutil.plate(file, \"%s\", indent')"
			       [INT(len), INT(len), STR(name)])
	        val _ = output(out,
			       "\n in (case x of BOT => output(file, \"_\") \
	                        \\n | TOP => output(file, \"^\") |")
		val _ = output(out,
			       format
			       " ELMT(_,(%s)) => "
			       [STR(Zutil.ppVarLst2(args))])
	    in ((case args of
		    (a,b)::c => (output(out,
					format
					" (output(file, \"<\");\
					\\n %s.pp(%s, file, indent'+1);"
					[STR(b),STR(a)]);
				 app (fn (a,b) =>
				      output(out,
					     format
					     " output(file, \", \");\
					     \\n %s.pp(%s,file,indent'+1);"
					     [STR(b),STR(a)]))
				     c;
				 output(out, "output(file, \">\"))"))
		  | _ => raise LattCodeError);
		output(out, "\n)end "))
	    end

	fun codegen (file, x as Ast.LATTICE(n, Ast.PRODUCT(c), proj)) =
	    ( output(file, format "\n\nstructure %s = struct " [STR(n)]);
	      datatypeCode(file, x);
	      hashCode(file, x);
	      addrCode(file, x);
	      uniqueCode(file, x);
	      makeCode(file, x);
	      joinCode(file, x);
	      leCode(file, x);
	      selectCode(file, x);
	      ppCode(file, x);
	      output(file, "\nend")
	      )
	  | codegen (file,  _) =
	    zAbort "prodLatticeCode.codegen: not a product lattice"

(*
 sig code gen
*)
	fun makeSigCode(Ast.LATTICE(_,Ast.PRODUCT(children),_)) =
	  case children
	    of [a] => 
			     format "\nval make: %s.elmt %s.t -> elmt t"
			     [STR(a), STR(a)]
	     | a::b => (format "\nval make: %s.elmt %s.t "
			      [STR(a), STR(a)]) ^
		       (Old.implode (map (fn (x) => 
					     format
					     "* %s.elmt %s.t "
					     [STR(x), STR(x)]) b)) ^
		       " -> elmt t"
	     | _ => raise LattCodeError

	fun selectSigCode(Ast.LATTICE(_,Ast.PRODUCT(children),_)) =
	    let val args = Zutil.uniqueVarDomPairLst("s", children)
	    in Old.implode (map (fn (a,b) => 
				       format
				       "\nval %s: elmt t -> %s.elmt %s.t"
				       [STR(b), STR(b),STR(b)])
			args)
	    end

	fun sig_codegen (x as Ast.LATTICE(n, Ast.PRODUCT(c), proj)) =
	    ( "\nsig" ^
	      "\ntype elmt and addr_t type 'a t = BOT | TOP | ELMT of 'a " ^
	      makeSigCode(x) ^
	      "\nval addr: elmt t -> addr_t" ^
	      "\nval hash: elmt t -> int" ^
	      "\nval join: elmt t * elmt t -> elmt t" ^
	      "\nval le: elmt t * elmt t -> bool" ^
	      selectSigCode(x) ^
	      "\nval pp: elmt t * outstream * int -> unit" ^
	      "\nval hash_stat: outstream -> unit" ^
	      "\nend"
            )
	  | sig_codegen _ =
	    zAbort "prodLatticeCode.codegen: not a product lattice"	    

    end
