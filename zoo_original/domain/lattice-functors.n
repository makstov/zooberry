functor FlatLatticeFun (val name__:string structure Set__: SET):FLAT_LATTICE = 
    struct
        structure Set = Set__
	type elmt = Set.t
	type addr_t = int
	type 'a t = BOT | TOP | ELMT of 'a
	fun addr (BOT) = -1
	  | addr (TOP) = -2
	  | addr (ELMT x) = Set.ord x
	fun hash x = addr x
	fun join (BOT,x) = x
	  | join (x,BOT) = x
	  | join (TOP,_) = TOP
	  | join (_,TOP) = TOP
	  | join (ELMT(x),ELMT(y)) = if Set.equiv(x,y) then ELMT(x) else TOP
	fun le (BOT,_) = true
	  | le (_,BOT) = false
	  | le (_,TOP) = true
	  | le (TOP,_) = false
	  | le (ELMT(x),ELMT(y)) =
	    if (Set.ord(x) = Set.ord(y)) then true else false
	fun pp (x,file,indent) =
	    let val _ = output(file, "\n")
		val _ = Zutil.plate(file, name__, indent)
	    in case x of
		BOT => output(file, "_")
	      | TOP => output(file, "^")
	      | ELMT(v) => Set.pp(v,file,indent)
	    end	    
    end

functor PowerLatticeFun (val name__:string structure Set__:SET)
  :POWER_LATTICE =
  struct
        structure Set = Set__
	type addr_t = int ref		(* ref to hash value *)
	type elmt = int * addr_t * Set.t Array.array
	           (* size, obj_id, and sorted integer list *)
	type 'a t = BOT | TOP | ELMT of 'a

	structure HT = WeakHashTable(type cell = elmt t)
	structure JT = WeakHashTable(type cell = elmt t * elmt t * elmt t)
	val ht = HT.mkTable()
	val jt = JT.mkTable()

	fun rotateAdd(x,y) =
	    Word.toInt
	     (Word.xorb
	      (Word.xorb(Word.<<(Word.fromInt x, Word.fromInt 5),
			 Word.>>(Word.fromInt x, Word.fromInt 26)),
	       Word.fromInt y
	      )
	     )
	  
	fun newaddr(x:int) = ref x

	(* hash-consing *)
	fun unique (size, y) =
	  if size = 0 then BOT
	  else if size = Set.size() then TOP
	  else 
	    let
	      fun hash (x, i) =
		if i>=size then x
		  else hash(rotateAdd(x, Set.ord(Array.sub(y,i))), i+1)
	      val hv = hash(0,0)
	    in
	      case HT.peek ht hv
	       of NONE => let val x = ELMT(size, newaddr(hv), y) 
			  in (HT.insert ht (hv, [System.Weak.weak x]); x)
			  end
		| SOME l =>
		    let
		      fun match nil =	(* not hash-consed before *)
			   let val x = ELMT(size, newaddr(hv), y)
			   in (HT.insert
			       ht (hv, (System.Weak.weak x :: l));
			       x)
			   end 
			| match (a::b) =
			    (case System.Weak.strong(a)
			      of NONE => match b
			       | SOME(a') => if equivto a' (* already in *)
					       then a' else match b
			    )
		      and equivto (ELMT(s',_,l')) =
			  if size <> s' then false
			  else
			    let
			      fun eql i =
				if i>= size then true
				else
				  let
				    val a = Array.sub(y,i)
				    val a' = Array.sub(l',i)
				  in
				    if Set.ord(a) = Set.ord(a')
				      then eql (i+1)
				    else false
				  end
			    in
			      eql 0
			    end
		    in
		      match l
		    end
	    end

	fun size (BOT) = 0
	  | size (TOP) = Set.size()
	  | size (ELMT(size,_,_)) = size

	fun included (_, BOT) = false
	  | included (_, TOP) = true
	  | included (e, ELMT(size, _, x)) = 
		let
		  fun inp i =
		    if i>=size then false
		    else if Set.ord(e) = Set.ord(Array.sub(x,i)) then true
		      else inp (i+1)
		in inp 0
		end	  

	val BOTaddr = ref(0)
	val TOPaddr = ref(1)
	fun addr (BOT) = BOTaddr
	  | addr (TOP) = TOPaddr
	  | addr (ELMT(_,a,_)) = a
	fun hash x = !(addr x)

	fun make ([]) = BOT
	  | make ([a]) = unique(1,Array.fromList [a])
	  | make (x) = 
	    let
	      val x' 
		  = ListMergeSort.uniqueSort
		       (fn (a,b) =>
			if Set.ord(a) < Set.ord(b) then LESS
			else if Set.ord(a) > Set.ord(b) then GREATER
			else EQUAL)
		       x
	    in unique(length x', Array.fromList x')
	    end

	fun enlist (BOT) = []
	  | enlist (TOP) = Set.enlist()
	  | enlist (ELMT(size,_,x)) =
	    let
	      fun el(i,y) = 
		if i <= 0 then y
		else el(i-1, Array.sub(x,i-1)::y)
	    in
	      el(size, nil)
	    end

	fun join (BOT,x) = x
	  | join (x,BOT) = x
	  | join (_,TOP) = TOP
	  | join (TOP,_) = TOP
	  | join (x as ELMT(s1,a1,xs), y as ELMT(s2,a2,ys)) =
	    if a1 = a2 then x
	      else
		let
		  val hv = rotateAdd(!a1,!a2) (* hash value *)
		  fun jsize((s1,xs),(s2,ys)) =
		    let fun js (0,j,sz) = sz + j
			  | js (i,0,sz) = sz + i
			  | js (i,j,sz) =
			    let
			      val ordx = Set.ord(Array.sub(xs,i-1))
			      val ordx' = Set.ord(Array.sub(ys,j-1))
			    in
			      if ordx > ordx' then js(i-1,j,sz+1)
			      else if ordx < ordx' then js(i,j-1,sz+1)
			      else js(i-1,j-1,sz+1)
			    end
		    in js(s1,s2,0)
		    end
		  fun merge ((s1,xs),(s2,ys)) = 
		    let
		      val sz = jsize((s1,xs),(s2,ys))
		      val r = Array.array(sz, Set.DUMMY)
		      fun copy(n,k,(s,a)) = (* copy a[n..s] to r[k..k+s-n] *)
			let
			  fun cp(n,k) = 
			    if n >= s then ()
			    else (Array.update(r,k,Array.sub(a,n));
				  cp(n+1,k+1))
			in cp(n,k)
			end
		      fun mg(i,j,k) =
			if i >= s1 then (copy(j,k,(s2,ys)); r)
			  else if j >= s2 then (copy(i,k,(s1,xs)); r)
			    else
			      let
				val a = Array.sub(xs,i)
				val b = Array.sub(ys,j)
				val ordx = Set.ord(a)
				val ordx' = Set.ord(b)
			      in
				if ordx > ordx' then
				  (Array.update(r,k,b);
				   mg(i,j+1,k+1))
				  else if ordx < ordx' then
				    (Array.update(r,k,a);
				     mg(i+1,j,k+1))
				    else
				      (Array.update(r,k,a);
				       mg(i+1,j+1,k+1))
			      end
		    in
		      (sz,mg(0,0,0))
		    end		      
		in
		  case JT.peek jt hv
		    of NONE => let
				 val joined = unique(merge((s1,xs),(s2,ys)))
			       in (JT.insert jt
				   (hv,[System.Weak.weak (x,y,joined)]);
				   joined)
			       end
		     | SOME l =>
		      let
			fun match nil = (* not memoized *)
			  let 
			      val joined = unique(merge((s1,xs),(s2,ys)))
			  in (JT.insert jt
			      (hv,(System.Weak.weak (x,y,joined)::l));
			      joined)
			  end
			  | match (a::b) =
			    (case System.Weak.strong(a)
			       of NONE => match b
				| SOME(ELMT(_,a1',_),ELMT(_,a2',_),joined') =>
				  if (a1 = a1' andalso a2 = a2') orelse
				     (a1 = a2' andalso a2 = a1') then joined'
				  else match b
			    )
		      in
			match l
		      end
		end
			         
	fun le (BOT,_) = true
	  | le (_,BOT) = false
	  | le (_,TOP) = true
	  | le (TOP,_) = false
	  | le (x as ELMT(s1:int,a1,xs), y as ELMT(s2:int,a2,ys)) =
	    if a1 = a2 then true
	    else if s1 >= s2 then false
	    else
	      let
		val hv = rotateAdd(!a1,!a2)
		fun leq ((s1,xs),(s2,ys)) =
		    let
		      fun check(i,j) = 
			if i >= s1 then true (* xs included in ys *)
			  else if j >= s2 then false (* ys included in xs *)
			    else
			      let
				val ordx = Set.ord(Array.sub(xs,i))
				val ordx' = Set.ord(Array.sub(ys,j))
			      in
				if ordx < ordx' then false
				else if ordx > ordx' then check(i,j+1)
				else check(i+1,j+1)
			      end
		    in
		      check(0,0)
		    end
	      in
		case JT.peek jt hv
		  of NONE => if leq((s1,xs),(s2,ys)) then
		               (JT.insert jt
				(hv,[System.Weak.weak (x,y,y)]);
				true)
			       else false
		   | SOME l =>
	             let
		       fun match nil =
			 if leq((s1,xs),(s2,ys)) then
			    (JT.insert
			     jt (hv, (System.Weak.weak (x,y,y)::l));
			     true)
			    else false			 
		         | match (a::b) =
			   (case System.Weak.strong a
			      of NONE => match b
			       | SOME(ELMT(_,a1',_),ELMT(_,a2',_),
				      ELMT(_,a3',_)) =>
			         if (a1 = a1' andalso
				     a2 = a2' andalso a2 = a3') orelse
				    (a1 = a2' andalso
				     a1 = a1' andalso a2 = a3') then
				    true
				 else match b
			   )
		     in
		       match l
		     end
	      end

	fun pp (x,file,indent) =
	    let val _ = output(file, "\n")
		val _ = Zutil.plate(file, name__, indent)
	    in  case x of
		BOT => output(file, "_")
	      | TOP => output(file, "^")
	      | ELMT(s,_,a) =>
		  let
		    val _ = output(file, "{")
		    fun p i =
		      if i >= s then ()
		      else (Set.pp(Array.sub(a,i), file, indent);
			    p (i+1))
		  in
		    p 0;
		    output(file, "}")
		  end
	    end

	fun hash_stat stream =
	  let
	    fun p [] = ()
	      | p (a::b) =
		(output(stream, Format.format ", %d" [Format.INT(a)]);
		 p b)
	  in
	    (output(stream,
		    Format.format
		    "\n%s:ht" [Format.STR(name__)]);
	     p (HT.bucketSizes ht);
	     output(stream,
		    Format.format
		    "\n%s:jt" [Format.STR(name__)]);
	     p (JT.bucketSizes jt))
	  end
    end

functor AtomicFtnLatticeFun (structure A__ : FLAT_LATTICE
			       sharing type A__.elmt = A__.Set.t
			     structure B__ : LATTICE
			     val name__ : string) : FTN_LATTICE =
    struct
        structure A = A__
	structure B = B__

	type addr_t = int ref
	type elmt = int * addr_t * (A.Set.t * B.elmt B.t) array
	            (* size * obj_id * a and b pair array *)
	type 'a t = BOT | TOP | ELMT of 'a

	structure HT = WeakHashTable(type cell = elmt t)
	structure JT = WeakHashTable(type cell = elmt t * elmt t * elmt t)
	val ht = HT.mkTable()
	val jt = JT.mkTable()

	fun rotateAdd(x,y) =
	    Word.toInt
	    (Word.xorb
	      (Word.xorb(Word.<<(Word.fromInt x, Word.fromInt 5),
			 Word.>>(Word.fromInt x, Word.fromInt 26)),
	       Word.fromInt y
	      )
            )

	fun newaddr(x:int) = ref x

	(* hash-consing *)
	fun unique (size, y) = 
	  if size = 0 then BOT
	  else if size = A.Set.size() andalso
	          let
		    fun istop(i) =
		      if i>=size then true
		      else (case Array.sub(y,i) 
			     of (_,B.TOP) => istop(i+1)
			      | _ => false)
		  in
		    istop 0
		  end
		then TOP
	  else 
	    let
	      fun hash (x, i) =
		if i >= size then x
		  else let
			 val (_,b) = Array.sub(y,i)
			 val b' = B.hash(b)
		       in hash(rotateAdd(x,b'),i+1)
		       end
	      val hv = hash(0,0)
	    in
	      case HT.peek ht hv
	       of NONE => let val x = ELMT(size, newaddr(hv), y) 
			  in (HT.insert ht (hv, [System.Weak.weak x]); x)
			  end
		| SOME l =>
		    let
		      fun match nil =	(* not hash-consed before *)
			  let val x = ELMT(size, newaddr(hv), y)
			  in
			   (HT.insert
			    ht (hv, (System.Weak.weak x :: l));
			    x)
			  end 
			| match (a::b) =
			    (case System.Weak.strong(a)
			      of NONE => match b
			       | SOME(a') => if equivto a' (* already in *)
					       then a' else match b
			    )
		      and equivto (ELMT(s',_,l')) =
			  if size <> s' then false
			  else 
				 let
				   fun eql i =
				     if i >= size then true
				       else
					 let
					   val (a,b) = Array.sub(y,i)
					   val (a',b') = Array.sub(l',i)
					 in
					   if A.Set.ord(a) = A.Set.ord(a')
					      andalso
					      B.addr(b) = B.addr(b')
					     then eql (i+1)
					   else false
					 end
				 in
				   eql 0
				 end
		    in
		      match l
		    end
	    end

	val BOTaddr = ref(0)
	val TOPaddr = ref(1)
	fun addr (BOT) = BOTaddr
	  | addr (TOP) = TOPaddr
	  | addr (ELMT(_,a,_)) = a
	fun hash x = ! (addr x)
	    
	fun constant (B.BOT) = BOT
	  | constant (B.TOP) = TOP
	  | constant (y) =
	    let
	      val atoms = A.Set.enlist()
	      val element = Old.fold
		            (fn (s,result) => (s,y)::result)
			    atoms
			    nil
	    in unique(A.Set.size(), Array.fromList element)
	    end

	fun dom (BOT) = []
	  | dom (TOP) = A.Set.enlist()
	  | dom (ELMT(s,_,xys)) =
	    let
	      fun unzip(x,i) =
		if i >= s then x
		else let val (a,_) = Array.sub(xys,i) 
		     in unzip(a :: x, i+1)
		     end
	    in unzip(nil,0)
	    end

	fun join (BOT,x) = x
	  | join (x,BOT) = x
	  | join (_,TOP) = TOP
	  | join (TOP,_) = TOP
	  | join (x as ELMT(s1,a1,xs), y as ELMT(s2,a2,ys)) =
	    if a1 = a2 then x
	      else
		let
		  val hv = let val a1h = !a1
		               val a2h = !a2
			   in rotateAdd(a1h,a2h)
			   end
		  fun jsize((s1,xs),(s2,ys)) =
		    let fun js (0,j,sz) = sz + j
			  | js (i,0,sz) = sz + i
			  | js (i,j,sz) =
			    let
			      val (a,_) = Array.sub(xs,i-1)
			      val (a',_) = Array.sub(ys,j-1)
			      val ordx = A.Set.ord(a)
			      val ordx' = A.Set.ord(a')
			    in
			      if ordx > ordx' then js(i-1,j,sz+1)
			      else if ordx < ordx' then js(i,j-1,sz+1)
			      else js(i-1,j-1,sz+1)
			    end
		    in js(s1,s2,0)
		    end
		  fun merge ((s1,xs),(s2,ys)) = 
		    let
		      val sz = jsize((s1,xs),(s2,ys))
		      val r = Array.array(sz, (A.Set.DUMMY,B.BOT))
		      fun copy(n,k,(s,a)) = (* copy a[n..s] to r[k..k+s-n] *)
			let
			  fun cp(n,k) = 
			    if n >= s then ()
			    else (Array.update(r,k,Array.sub(a,n));
				  cp(n+1,k+1))
			in cp(n,k)
			end
		      fun mg(i,j,k) =
			if i >= s1 then (copy(j,k,(s2,ys)); r)
			  else if j >= s2 then (copy(i,k,(s1,xs)); r)
			    else
			      let
				val a as (x,y) = Array.sub(xs,i)
				val b as (x',y') = Array.sub(ys,j)
				val ordx = A.Set.ord(x)
				val ordx' = A.Set.ord(x')
			      in
				if ordx > ordx' then
				  (Array.update(r,k,b);
				   mg(i,j+1,k+1))
				  else if ordx < ordx' then
				    (Array.update(r,k,a);
				     mg(i+1,j,k+1))
				    else
				      (Array.update(r,k, (x, B.join(y,y')));
				       mg(i+1,j+1,k+1))
			      end
		    in
		      (sz,mg(0,0,0))
		    end		      
		in
		  case JT.peek jt hv
		    of NONE => let 
				 val joined = unique(merge((s1,xs),(s2,ys)))
			       in (JT.insert jt
				   (hv,[System.Weak.weak (x,y,joined)]);
				   joined)
			       end
		     | SOME l =>
			 let
			   fun match nil = (* not memoized *)
			     let
			       val joined = unique(merge((s1,xs),(s2,ys)))
			     in (JT.insert jt
				 (hv,(System.Weak.weak (x,y,joined)::l));
				 joined)
			     end
			     | match (a::b) =
			       (case System.Weak.strong(a)
				  of NONE => match b
				  | SOME(ELMT(_,a1',_),ELMT(_,a2',_),joined')=>
				    if (a1 = a1' andalso a2 = a2') orelse
				      (a1 = a2' andalso a2 = a1') then joined'
				    else match b
			    )
			 in
			   match l
			 end
		end

	fun le (BOT,_) = true
	  | le (_,BOT) = false
	  | le (_,TOP) = true
	  | le (TOP,_) = false
	  | le (x as ELMT(s1:int,a1,xs), y as ELMT(s2:int,a2,ys)) =
	    if a1 = a2 then true
	    else if s1 >= s2 then false
	    else
		let
		  val hv = let val a1h = !a1
		               val a2h = !a2
			   in rotateAdd(a1h,a2h)
			   end
		  fun leq ((s1,xs),(s2,ys)) =
		    let
		      fun check(i,j) = 
			if i >= s1 then true (* xs included in ys *)
			  else if j >= s2 then false (* ys included in xs *)
			    else
			      let
				val a as (x,y) = Array.sub(xs,i) 
				val b as (x',y') = Array.sub(ys,j)
				val ordx = A.Set.ord(x)
				val ordx' = A.Set.ord(x')
			      in
				if ordx < ordx' then false
				else if ordx > ordx' then check(i,j+1)
				else if B.le(y,y') then check(i+1,j+1)
				else false
			      end
		    in
		      check(0,0)
		    end
		in
		  case JT.peek jt hv
		    of NONE => if leq((s1,xs),(s2,ys))
			       then
		                 (JT.insert
				  jt (hv, [System.Weak.weak(x,y,y)]);
				  true)
			       else false
		     | SOME l =>
	             let
		       fun match nil =
			 if leq((s1,xs),(s2,ys)) then
			    (JT.insert
			     jt (hv, (System.Weak.weak (x,y,y)::l));
			     true)
			    else false			 
		         | match (a::b) =
			   (case System.Weak.strong a
			      of NONE => match b
			       | SOME(ELMT(_,a1',_),ELMT(_,a2',_),
				      ELMT(_,a3',_)) =>
			         if (a1 = a1' andalso
				     a2 = a2' andalso a2 = a3') orelse
				    (a1 = a2' andalso
				     a1 = a1' andalso a2 = a3') then
				    true
				 else match b
			   )
		     in
		       match l
		     end
		end
	      
	fun apply (BOT, _) = B.BOT
	  | apply (_, A.BOT) = B.BOT
	  | apply (TOP, _) = B.TOP
	  | apply (ELMT(s1,_,x), A.TOP) =
	    let
	      fun appjoin(i,r) =
		if i >= s1 then r
		else let val (_,b) = Array.sub(x,i)
		     in appjoin(i+1, B.join(r, b))
		     end
	    in
	      appjoin(0, B.BOT)
	    end
	  | apply (ELMT(s1,_,xs), A.ELMT(x)) = 
	    let
	      val ordx = A.Set.ord(x)
	      fun look (i) =
		if i >= s1 then B.BOT
		else
		  let
		    val (a,b) = Array.sub(xs,i)  
		    val orda = A.Set.ord(a)
		  in
		    if orda = ordx then b
		      else if orda > ordx then B.BOT
			else look (i+1)
		  end
	    in look 0
	    end	    

	exception UpdateOnTop and UpdateOnBottom
	
	fun update (_, A.BOT, _) = raise UpdateOnBottom
	  | update (_, A.TOP, _) = raise UpdateOnTop
	  | update (BOT, A.ELMT(id), B.BOT) = BOT
	  | update (BOT, A.ELMT(id), B.TOP) =
	    if A.Set.size() = 1 then TOP
	      else unique(1, Array.fromList [(id, B.TOP)])
	  | update (BOT, A.ELMT(id), v) =
	      unique(1, Array.fromList [(id, v)])
	  | update (TOP, A.ELMT(id), B.TOP) = TOP
	  | update (TOP, A.ELMT(id), B.BOT) =
	    if A.Set.size() = 1 then BOT
	      else
		let
		  val ord = A.Set.ord(id)
		  val r  = Array.array(A.Set.size()-1,(A.Set.DUMMY,B.BOT))
		in
		  unique(
		   A.Set.size()-1,
		   (
		    Old.fold
		    (fn (a,i) => if not(A.Set.ord(a) = ord)
				   then (Array.update(r,i,(a,B.TOP)); i+1)
				 else i)
		    (A.Set.enlist())
		    0;
		    r
		   )
		 )
		end
	  | update (TOP, A.ELMT(id), v) =
		let
		  val ord = A.Set.ord(id)
		  val r = Array.array(A.Set.size(),(A.Set.DUMMY,B.BOT))
		in
		  unique(
		   A.Set.size(),
		   (
		    Old.fold
		    (fn (a,i) => if A.Set.ord(a) = ord
				   then (Array.update(r,i,(a,v)); i+1)
				 else (Array.update(r,i,(a,B.TOP)); i+1))
		    (A.Set.enlist())
		    0;
		    r
		   )
		 )
		end
	  | update (z as ELMT(size,_,x), A.ELMT(id), B.BOT) =
	    let
	      val ord = A.Set.ord(id)
	      val r = Array.array(size, (A.Set.DUMMY,B.BOT))
		(* Note that we don't allocate size-1 array. Depending on
		   whether x has (id, y) entry or not, actual accupancy size
		   will be size or size-1.
		   Thus, size in ELMT(size,_,y) keeps the actual accupancy size
	           and Array.length(y) = size or size-1. 
		 *)
	      fun copy (i,n,j) = (* copy x[i...n] to r[j...n] *)
		if i >= n then ()
		else (Array.update(r,j,Array.sub(x,i));
		      copy(i+1,n,j+1))
	      fun remove (i) =	 (* removes (id,y) entry from x *)
		if i >= size then z
		  else
		    let val (a,b) = Array.sub(x,i)
		        val orda = A.Set.ord(a)
		    in
		      if orda = ord then (copy(i+1,size,i);
					  unique(size-1,r))
			else if orda > ord then (copy(i,size,i);
						 unique(size,r))
			  else (Array.update(r,i,Array.sub(x,i));
				remove (i+1))
		    end
	    in remove 0
	    end
	  | update (ELMT(size,_,x), A.ELMT(id), v) = 
	    let
	      val ord = A.Set.ord(id)
	      val r = Array.array(size+1, (A.Set.DUMMY,B.BOT))
		(* Note that we don't allocate size array. Depending on
		   whether x has (id, y) entry or not, actual accupancy size
		   will be size or size+1.
		   Thus, size in ELMT(size,_,y) keeps the actual accupancy size
	           and Array.length(y) = size or size+1. 
		 *)
	      fun copy (i,n,j) = (* copy x[i...n] to r[j...n] *)
		if i >= n then ()
		else (Array.update(r,j,Array.sub(x,i));  
		      copy(i+1,n,j+1))
	      fun stick (i) =		(* insert (id,B.TOP) entry into x *)
		if i >= size then (Array.update(r,i,(id,v));
				   unique(size+1,r))
		  else
		    let val (a,b) = Array.sub(x,i)  
		        val orda = A.Set.ord(a)
		    in
		      if orda = ord then (Array.update(r,i,(id,v));
					  copy(i+1,size,i+1);
					  unique(size,r))
			else if orda > ord
			       then (Array.update(r,i,(id,v));
				     copy(i,size,i+1);
				     unique(size+1,r))
			  else (Array.update(r,i,Array.sub(x,i));
				stick (i+1))
		    end
	    in
	      stick 0
	    end

	and dupdate (_, A.BOT, _) = raise UpdateOnBottom
	  | dupdate (_, A.TOP, _) = raise UpdateOnTop
	  | dupdate (BOT, A.ELMT(id), B.BOT) = BOT
	  | dupdate (BOT, A.ELMT(id), B.TOP) =
	    if A.Set.size() = 1 then TOP
	      else unique(1, Array.fromList [(id, B.TOP)])
	  | dupdate (BOT, A.ELMT(id), v) =
	      unique(1, Array.fromList [(id,v)])
	  | dupdate (TOP, _, _) = TOP
	  | dupdate (elmt, A.ELMT(id), B.BOT) = elmt
	  | dupdate (ELMT(size,_,x), A.ELMT(id), v) =
	    let
	      val ord = A.Set.ord(id)
	      val r = Array.array(size+1, (A.Set.DUMMY,B.BOT))
		(* Note that we don't allocate size array. Depending on
		   whether x has (id, y) entry or not, actual accupancy size
		   will be size or size+1.
		   Thus, size in ELMT(size,_,y) keeps the actual accupancy size
	           and Array.length(y) = size or size+1. 
		 *)
	      fun copy (i,n,j) = (* copy x[i...n] to r[j...n] *)
		if i >= n then ()
		else (Array.update(r,j,Array.sub(x,i));
		      copy(i+1,n,j+1))
	      fun stick (i) =		(* insert (id,B.TOP) entry into x *)
		if i >= size then (Array.update(r,i,(id,v));
				   unique(size+1,r))
		  else
		    let val (a,b) = Array.sub(x,i)
		        val orda = A.Set.ord(a)
		    in
		      if orda = ord then (Array.update(r,i,(id, B.join(v,b)));
					  copy(i+1,size,i+1);
					  unique(size,r))
			else if orda > ord
			       then (Array.update(r,i,(id,v));
				     copy(i,size,i+1);
				     unique(size+1,r))
			  else (Array.update(r,i,Array.sub(x,i));
				stick (i+1))
		    end
	    in
	      stick 0
	    end

	and pp (x,file,indent) =
	    let val _ = output(file, "\n")
		val indent' = if indent<=String.size(name__)
				then 1 else indent-String.size(name__)
		val _ = Zutil.plate(file, name__, indent')
	    in case x of
		BOT => output(file, "_")
	      | TOP => output(file, "^")
	      | ELMT(s,_,v) =>
		  let
		    val _ = output(file, "[")
		    fun p i =
		      if i >= s then ()
		      else let val (key,w) = Array.sub(v,i)
			   in A.pp(A.ELMT(key),file,indent'+2);
			      output(file, " =>");
			      B.pp(w,file,indent'+2);
			      p (i+1)
			   end
		  in
		    p 0;
		    output(file, "]")
		  end
	    end

	fun hash_stat stream =
	  let
	    fun p [] = ()
	      | p (a::b) =
		(output(stream, Format.format ", %d" [Format.INT(a)]);
		 p b)
	  in
	    (output(stream,
		    Format.format
		    "\n%s:ht" [Format.STR(name__)]);
	     p (HT.bucketSizes ht);
	     output(stream,
		    Format.format
		    "\n%s:jt" [Format.STR(name__)]);
	     p (JT.bucketSizes jt))
	  end
    end

