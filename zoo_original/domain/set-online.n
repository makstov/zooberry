(*
 SetCode: element/product/sum set codes are generated online, using functions
 in this structure.
 *)

structure SetCode = 
  struct
    open Error
    exception SetCodeError
    
    fun datatypeCode (file, Ast.SET(name, cons)) = 
      case cons of
	Ast.ELEMENT(children) =>
	  (case children of
	     a::b => (output(file, format "\ntype elmt = %s" [STR(a)]);
		      app (fn (a) => output(file, format " | %s " [STR(a)]))
		      b;
		      output(file, "\ntype t = DUMMY | ELMT of elmt")
		      )
	   | _ => raise SetCodeError)
      | Ast.SPRODUCT(children) =>
	  (case children of
	     a::b => (output(file, format "\ntype elmt = %s.t" [STR(a)]);
		      app
		      (fn (a) => output(file, format " * %s.t " [STR(a)]))
		      b;
		      output(file, "\ntype t = DUMMY | ELMT of elmt")
		      )
	   | _ => raise SetCodeError)
      | Ast.SSUM(children) =>
	  (case children of
	     a::b => (output(file,
			     format "\ntype elmt = in%s of %s.t"
			     [STR(a), STR(a)]);
		      app (fn (a) => output(file,
					    format
					    " | in%s of %s.t"
					    [STR(a), STR(a)]))
		          b;
		      output(file, "\ntype t = DUMMY | ELMT of elmt")
		      )
	   | _ => raise SetCodeError)
      | _ => zAbort (format "set code for %s should be generated off line"
		     [STR(name)])

    fun sizeCode (file, Ast.SET(name, cons)) = 
      case cons of
	Ast.ELEMENT(children) =>
	  output(file,
		 format
		 "\nfun size() = %d"
		 [INT(length(children))])
      | Ast.SPRODUCT(children) =>
	  (case children of
	     a::b => (output(file,
			     format "\nfun size() = %s.size()" [STR(a)]);
		      app (fn (a) => output(file,
					    format " * %s.size() " [STR(a)]))
		          b)
	   | _ => raise SetCodeError)
      | Ast.SSUM(children) =>
	  (case children of
	     a::b => (output(file, format "\nfun size() = %s.size()" [STR(a)]);
		      app (fn (a) => output(file,
					    format " + %s.size() " [STR(a)]))
		          b)
	   | _ => raise SetCodeError)
      | _ => zAbort (format "set code for %s should be generated off line"
		     [STR(name)])

    fun ordCode (file, Ast.SET(name, cons)) =
      case cons of
	Ast.ELEMENT(children) =>
	  let
	    val cnt = ref 0     
	  in (case children of
		a::b => (output(file,
				format "\nfun ord(ELMT(%s)) = %d"
				       [STR(a), INT(!cnt)]);
			 app (fn (a) => (cnt := !cnt + 1;
					 output(file,
						format
						"\n | ord(ELMT(%s)) = %d"
						[STR(a),INT(!cnt)])))
			     b)
	      | _ => raise SetCodeError)
	  end
      | Ast.SPRODUCT(children) =>
	  let
	    val args = Zutil.uniqueVarDomPairLst("a", children)
	    (* args = [(v1,set1) (v2,set2) ...] *)
	    val _ = output(file,
			   format
			   "\nfun ord(ELMT(%s)) = "
			   [STR(Zutil.ppVarLst2(args))])
	    fun fan ((a,b),result) =
	        format
		"(%s.ord(%s) + %s.size() * %s)"
		[STR(b), STR(a), STR(b), STR(result)]
	  in (case args of
		(a,b)::[] => output(file,
				    format "%s.ord(%s)" [STR(b), STR(a)])
	      | (a,b)::c => output(file,
				   Old.revfold fan c
				           (format
					    "%s.ord(%s)"
					    [STR(b), STR(a)]
					    ))
	      | _ => raise SetCodeError)
	  end
      | Ast.SSUM(children) =>
	  let
	    val co = children
	    val co' = rev co
	    val cnt = ref 0
	    val co'' = Old.fold (fn (new,result) =>
			        let val _ = cnt := !cnt +1
				in Old.nthtail(co', !cnt) :: result end)
	                    (Old.nthtail (co, 1))
			    []
	    val adds = map (fn (x) => Old.fold
			              (fn (new,result) => new ^ " + " ^ result)
				      x  
				      "")
	                   co''
	  in case co of
	    a::b =>
	      let
		val cnt = ref 0
	      in (output(file,
			 format
			 "\nfun ord (ELMT(in%s(x))) = %s.ord(x)"
			 [STR(a), STR(a)]);
		  app (fn (a) =>
		        (output(file,
				format
				"\n | ord (ELMT(in%s(x))) = %s %s.ord(x)"
				[STR(a), STR(Old.nth(adds, !cnt)), STR(a)]);
			 cnt := !cnt +1))
		       b)
	      end
	  | _ => raise SetCodeError
	  end
      | _ => zAbort (format "set code for %s should be generated off line"
		     [STR(name)])
    fun selectCode (file, Ast.SET(_,Ast.SPRODUCT(children))) =
      let val args = Zutil.uniqueVarDomPairLst("s", children)
      in app (fn (a,b) => output(file,
				 format
				 "\nfun %s (DUMMY) = %s.DUMMY \
				  \\n | %s (ELMT%s) = %s\n"
				 [STR(b), STR(b), STR(b),
				  STR(Zutil.ppPatVarLst(args,a)),
				  STR(a)]))
	args
      end	  

    fun enlistCode (file, Ast.SET(name, cons)) =
	 case cons of
	    Ast.ELEMENT(children) =>
	      let
		val lst = Old.implode(Zutil.dcolon
				  (map (fn x => "ELMT(" ^ x ^ ")") children))
	      in output(file,
			format "\nfun enlist () = %s" [STR(lst)])
	      end
	  | Ast.SPRODUCT(children as a::b) =>
	      let
		val xs = Zutil.uniqueVarDomPairLst("x", children)
	      in
		( output(file, "\nfun enlist () = let ");
		  app (fn (a,b) => output(file,
					  format
					  "\nval %s = %s.enlist()"
					  [STR(a),STR(b)]))
		       xs;
		  output(file, "\nin ");
		  app (fn (a,b) => output(file,
					  format
					  " Old.fold (fn (%s, r_%s) =>"
					  [STR(a),STR(a)]))
		      xs;
		  output(file,
			 format "(ELMT(%s))::"
			 [STR(Zutil.ppVarLst2(xs))]);
		  app (fn (a,b) =>
			  output(file,
				 format " r_%s) %s" [STR(a), STR(a)]))
		      (rev xs);
		  output(file, "\nnil\n end")
		 )
	      end
	  | Ast.SPRODUCT(_) => raise SetCodeError
	  | Ast.SSUM(children) =>
	      (case children of
		 a::b => ( output(file, "\nfun enlist () = ");
			   output(file,
				  format
				  "(app (fn (x) => ELMT(in%s(x))) %s.enlist())"
				  [STR(a), STR(a)]);
			   app (fn (x) =>
				  output(file,
					 format
					 " @ (app (fn (x) => ELMT(in%s(x)))\
					        \    %s.enlist())"
					 [STR(x), STR(x), STR(x)]))
			       b)
	       | _ => raise SetCodeError)
	  | _ => zAbort
	         (format "set code for %s should be generated off line"
		  [STR(name)])
		 
    fun cmpCode (file, Ast.SET(name, cons)) =
      output(file,
	     "\nfun cmp (x,y) = let val ord1 = ord(x) val ord2 = ord(y) in\n"
	     ^
	     "if ord1 < ord2 then LESS "
             ^
             "else if ord1 > ord2 then GREATER else EQUAL"
	     ^
	     "\nend ")
      
    fun ppCode (file, Ast.SET(name, cons)) =
      case cons of
	Ast.ELEMENT(children) =>
	  (case children of
	     a::b =>
	       (output(file,
		       format "\nfun pp(ELMT(%s),file,_) =output(file, \"%s\")"
		       [STR(a), STR(a)]);
		app (fn (a) =>
		      output(file,
			     format "\n | pp(ELMT(%s),file,_) = output(file, \"%s\")"
			     [STR(a), STR(a)])) 
		    b;
		output(file, "\n | pp(DUMMY,file,_) = output(file,\"_\")")
		)
	   | _ => raise SetCodeError)
      | Ast.SPRODUCT(children) =>
	  let val args = Zutil.uniqueVarDomPairLst("v", children)
	    val _ = output(file,
			   format
			   "\nfun pp(ELMT(%s),file,indent) = (output(file,\"<\");"
			   [STR(Zutil.ppVarLst2(args))])
	  in (case args of
		(a,b)::c => (output(file,
				    format
				    "%s.pp(%s,file,indent);"
				    [STR(b),STR(a)]);
			     app (fn (a,b) =>
				  output(file,
					 format
					 " output(file, \", \"); %s.pp(%s,file,indent);"
					 [STR(b),STR(a)]))
			          c;
			     output(file, "output(file, \">\")");
			     output(file, ")")
			     )
	      | _ => raise SetCodeError);
	     output(file, "\n | pp(DUMMY,file,_) = output(file,\"_\")")
	  end
      | Ast.SSUM(children) =>
	  (case children of
	     a::b =>
	       (output(file,
		       format
		       "\nfun pp(ELMT(in%s(x)),file,indent) = %s.pp(x,file,indent)"
		       [STR(a), STR(a)]);
		app (fn (a) =>
		     output(file,
			    format
			    "\n | pp(ELMT(in%s(x)),file,indent)=%s.pp(x,file,indent)"
			    [STR(a), STR(a)]))
		          b;
		output(file, "\n | pp(DUMMY,file,_) = output(file,\"_\")")
		)
	   | _ => raise SetCodeError)
      | _ => zAbort (format "set code for %s should be generated off line"
		     [STR(name)])

    fun codegen (file, x as Ast.SET(name, cons)) = 
      ( output(file, format "\n\nstructure %s = struct " [STR(name)]);
        datatypeCode(file, x);
        sizeCode(file, x);
        ordCode(file, x);
        cmpCode(file, x);
	(case cons
	   of Ast.SPRODUCT _ => selectCode(file, x)
	    | _ => ());
	enlistCode(file, x);
        ppCode(file, x);
        output(file, "\nend")
       )
      | codegen (file, _) = zAbort "setCode.codegen expects a set"

(*
 signature generator code
 *)
    fun datatypeSigCode (Ast.SET(name, cons)) = 
      case cons of
	Ast.ELEMENT(children) =>
	  (case children of
	     a::b => (format "\ntype elmt = %s" [STR(a)]) ^
		     (Old.implode (map (fn (a) => format " | %s " [STR(a)]) b)) ^
		     "\ntype t  = DUMMY | ELMT of elmt "
	   | _ => raise SetCodeError)
      | Ast.SPRODUCT(children) =>
	  (case children of
	     a::b => "\ntype elmt type t = DUMMY | ELMT of elmt"
	   | _ => raise SetCodeError)
      | Ast.SSUM(children) =>
	  (case children of
	     a::b => (format "\ntype elmt = in%s of %s.t "
		      [STR(a), STR(a)]) ^
		     (Old.implode (map (fn (a) => format
					    " | in%s of %s.t"
					    [STR(a), STR(a)]) b)) ^
		     "\ntype t = DUMMY | ELMT of elmt "
	   | _ => raise SetCodeError)
      | _ => zAbort (format "set code for %s should be generated off line"
		     [STR(name)])

    fun selectSigCode (Ast.SET(_,Ast.SPRODUCT(children))) =
      Old.implode (map (fn b =>
			  format
			  "\nval %s: t -> %s.t"
			  [STR(b), STR(b)]) children)

    fun sig_codegen (x as Ast.SET(name, cons)) = 
      ( "\nsig" ^
        datatypeSigCode(x) ^
	"\nval size : unit -> int" ^
	"\nval ord: t * t -> int" ^
	"\nval cmp: t * t -> order" ^
	"\nval enlist: unit -> t list" ^
	"\nval pp: t * outstream * int -> unit" ^
	(case cons
	  of Ast.SPRODUCT _ => selectSigCode(x)
	   | _ => "") ^
	"\nend"
      ) 
      | sig_codegen _ = zAbort "setCode.codegen expects a set"
	
  end

